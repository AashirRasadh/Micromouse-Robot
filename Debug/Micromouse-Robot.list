
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b220  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001904  0800b3c0  0800b3c0  0000c3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccc4  0800ccc4  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ccc4  0800ccc4  0000dcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cccc  0800cccc  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cccc  0800cccc  0000dccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ccd0  0800ccd0  0000dcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ccd4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  200001d4  0800cea8  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001560  0800cea8  0000e560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015513  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003458  00000000  00000000  00023717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00026b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f02  00000000  00000000  00027e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9ef  00000000  00000000  00028d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001809c  00000000  00000000  00043781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f87a  00000000  00000000  0005b81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006008  00000000  00000000  000fb0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001010e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3a8 	.word	0x0800b3a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b3a8 	.word	0x0800b3a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f003 f8d3 	bl	80040ac <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f005 fb17 	bl	800657c <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 f8ab 	bl	80040ac <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f005 fbbf 	bl	80066dc <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	20000290 	.word	0x20000290

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f005 fbb2 	bl	80066dc <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000290 	.word	0x20000290

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <calculate_optimal_path_from_explored_areas>:

/**
 * @brief Calculate optimal path using ONLY explored areas (MMS algorithm)
 */
void calculate_optimal_path_from_explored_areas(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 800106e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔍 CALCULATING OPTIMAL PATH FROM EXPLORED AREAS...\r\n");
 8001070:	4863      	ldr	r0, [pc, #396]	@ (8001200 <calculate_optimal_path_from_explored_areas+0x198>)
 8001072:	f000 fc41 	bl	80018f8 <send_bluetooth_message>

    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800107c:	e01d      	b.n	80010ba <calculate_optimal_path_from_explored_areas+0x52>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8001084:	e010      	b.n	80010a8 <calculate_optimal_path_from_explored_areas+0x40>
            maze[x][y].distance = MAX_DISTANCE;
 8001086:	495f      	ldr	r1, [pc, #380]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001088:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800108c:	011a      	lsls	r2, r3, #4
 800108e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8001092:	4413      	add	r3, r2
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	440b      	add	r3, r1
 8001098:	f242 720f 	movw	r2, #9999	@ 0x270f
 800109c:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 800109e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010a2:	3301      	adds	r3, #1
 80010a4:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80010a8:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	ddea      	ble.n	8001086 <calculate_optimal_path_from_explored_areas+0x1e>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80010b0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80010ba:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	dddd      	ble.n	800107e <calculate_optimal_path_from_explored_areas+0x16>
        }
    }

    // Set goal distances to 0 ONLY if they were visited
    bool goal_found = false;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827

    if (maze[goal_x1][goal_y1].visited) {
 80010c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	494c      	ldr	r1, [pc, #304]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	440b      	add	r3, r1
 80010da:	3304      	adds	r3, #4
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <calculate_optimal_path_from_explored_areas+0xa6>
        maze[goal_x1][goal_y1].distance = 0;
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b49      	ldr	r3, [pc, #292]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4946      	ldr	r1, [pc, #280]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y1);
 80010fe:	4b42      	ldr	r3, [pc, #264]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a42      	ldr	r2, [pc, #264]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4841      	ldr	r0, [pc, #260]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 800110a:	f000 fc0b 	bl	8001924 <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y1].visited) {
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	493b      	ldr	r1, [pc, #236]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	4413      	add	r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <calculate_optimal_path_from_explored_areas+0xec>
        maze[goal_x2][goal_y1].distance = 0;
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4934      	ldr	r1, [pc, #208]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	4413      	add	r3, r2
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
        goal_found = true;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y1);
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a30      	ldr	r2, [pc, #192]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4830      	ldr	r0, [pc, #192]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001150:	f000 fbe8 	bl	8001924 <send_bluetooth_printf>
    }

    if (maze[goal_x1][goal_y2].visited) {
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4929      	ldr	r1, [pc, #164]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	4413      	add	r3, r2
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <calculate_optimal_path_from_explored_areas+0x132>
        maze[goal_x1][goal_y2].distance = 0;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4923      	ldr	r1, [pc, #140]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
        goal_found = true;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y2);
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	481e      	ldr	r0, [pc, #120]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001196:	f000 fbc5 	bl	8001924 <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y2].visited) {
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4918      	ldr	r1, [pc, #96]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	3304      	adds	r3, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <calculate_optimal_path_from_explored_areas+0x178>
        maze[goal_x2][goal_y2].distance = 0;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4911      	ldr	r1, [pc, #68]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y2);
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 80011dc:	f000 fba2 	bl	8001924 <send_bluetooth_printf>
    }

    if (!goal_found) {
 80011e0:	f897 3827 	ldrb.w	r3, [r7, #2087]	@ 0x827
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d01a      	beq.n	8001224 <calculate_optimal_path_from_explored_areas+0x1bc>
        send_bluetooth_message("❌ ERROR: No goal cells were visited during exploration!\r\n");
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <calculate_optimal_path_from_explored_areas+0x1b4>)
 80011f0:	f000 fb82 	bl	80018f8 <send_bluetooth_message>
        theoretical_minimum = MAX_DISTANCE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <calculate_optimal_path_from_explored_areas+0x1b8>)
 80011f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e1a9      	b.n	8001552 <calculate_optimal_path_from_explored_areas+0x4ea>
 80011fe:	bf00      	nop
 8001200:	0800b3c0 	.word	0x0800b3c0
 8001204:	200003b0 	.word	0x200003b0
 8001208:	0800c924 	.word	0x0800c924
 800120c:	0800c928 	.word	0x0800c928
 8001210:	0800b3fc 	.word	0x0800b3fc
 8001214:	0800c92c 	.word	0x0800c92c
 8001218:	0800c930 	.word	0x0800c930
 800121c:	0800b418 	.word	0x0800b418
 8001220:	20001400 	.word	0x20001400
        return;
    }

    // Queue implementation for flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Add visited goal cells to queue
    if (maze[goal_x1][goal_y1].visited && maze[goal_x1][goal_y1].distance == 0) {
 8001230:	4b6f      	ldr	r3, [pc, #444]	@ (80013f0 <calculate_optimal_path_from_explored_areas+0x388>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b6f      	ldr	r3, [pc, #444]	@ (80013f4 <calculate_optimal_path_from_explored_areas+0x38c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	496f      	ldr	r1, [pc, #444]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	4413      	add	r3, r2
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d022      	beq.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
 800124a:	4b69      	ldr	r3, [pc, #420]	@ (80013f0 <calculate_optimal_path_from_explored_areas+0x388>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b69      	ldr	r3, [pc, #420]	@ (80013f4 <calculate_optimal_path_from_explored_areas+0x38c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4969      	ldr	r1, [pc, #420]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	4413      	add	r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	440b      	add	r3, r1
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8001262:	4b63      	ldr	r3, [pc, #396]	@ (80013f0 <calculate_optimal_path_from_explored_areas+0x388>)
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800126a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800126e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001276:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001280:	4a5c      	ldr	r2, [pc, #368]	@ (80013f4 <calculate_optimal_path_from_explored_areas+0x38c>)
 8001282:	6811      	ldr	r1, [r2, #0]
 8001284:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001288:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y1].visited && maze[goal_x2][goal_y1].distance == 0) {
 8001290:	4b5a      	ldr	r3, [pc, #360]	@ (80013fc <calculate_optimal_path_from_explored_areas+0x394>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b57      	ldr	r3, [pc, #348]	@ (80013f4 <calculate_optimal_path_from_explored_areas+0x38c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4957      	ldr	r1, [pc, #348]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	4413      	add	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	440b      	add	r3, r1
 80012a2:	3304      	adds	r3, #4
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d022      	beq.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
 80012aa:	4b54      	ldr	r3, [pc, #336]	@ (80013fc <calculate_optimal_path_from_explored_areas+0x394>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <calculate_optimal_path_from_explored_areas+0x38c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4951      	ldr	r1, [pc, #324]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 80012c2:	4b4e      	ldr	r3, [pc, #312]	@ (80013fc <calculate_optimal_path_from_explored_areas+0x394>)
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80012ca:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80012ce:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012d6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80012e0:	4a44      	ldr	r2, [pc, #272]	@ (80013f4 <calculate_optimal_path_from_explored_areas+0x38c>)
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80012e8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80012ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x1][goal_y2].visited && maze[goal_x1][goal_y2].distance == 0) {
 80012f0:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <calculate_optimal_path_from_explored_areas+0x388>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b42      	ldr	r3, [pc, #264]	@ (8001400 <calculate_optimal_path_from_explored_areas+0x398>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	493f      	ldr	r1, [pc, #252]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d022      	beq.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
 800130a:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <calculate_optimal_path_from_explored_areas+0x388>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <calculate_optimal_path_from_explored_areas+0x398>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4939      	ldr	r1, [pc, #228]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	4413      	add	r3, r2
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8001322:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <calculate_optimal_path_from_explored_areas+0x388>)
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800132a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800132e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001336:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001340:	4a2f      	ldr	r2, [pc, #188]	@ (8001400 <calculate_optimal_path_from_explored_areas+0x398>)
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001348:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800134c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y2].visited && maze[goal_x2][goal_y2].distance == 0) {
 8001350:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <calculate_optimal_path_from_explored_areas+0x394>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <calculate_optimal_path_from_explored_areas+0x398>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4927      	ldr	r1, [pc, #156]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	4413      	add	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	3304      	adds	r3, #4
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d022      	beq.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <calculate_optimal_path_from_explored_areas+0x394>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <calculate_optimal_path_from_explored_areas+0x398>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4921      	ldr	r1, [pc, #132]	@ (80013f8 <calculate_optimal_path_from_explored_areas+0x390>)
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	440b      	add	r3, r1
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <calculate_optimal_path_from_explored_areas+0x394>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800138a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800138e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001396:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80013a0:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <calculate_optimal_path_from_explored_areas+0x398>)
 80013a2:	6811      	ldr	r1, [r2, #0]
 80013a4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013a8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    // Run flood fill ONLY through explored areas
    while (queue_head < queue_tail) {
 80013b6:	e0b6      	b.n	8001526 <calculate_optimal_path_from_explored_areas+0x4be>
        int x = queue_x[queue_head];
 80013b8:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80013bc:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013c0:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
        int y = queue_y[queue_head++];
 80013cc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80013d6:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013da:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c

        for (int dir = 0; dir < 4; dir++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 80013ec:	e096      	b.n	800151c <calculate_optimal_path_from_explored_areas+0x4b4>
 80013ee:	bf00      	nop
 80013f0:	0800c924 	.word	0x0800c924
 80013f4:	0800c928 	.word	0x0800c928
 80013f8:	200003b0 	.word	0x200003b0
 80013fc:	0800c92c 	.word	0x0800c92c
 8001400:	0800c930 	.word	0x0800c930
            int nx = x + dx[dir];
 8001404:	4a55      	ldr	r2, [pc, #340]	@ (800155c <calculate_optimal_path_from_explored_areas+0x4f4>)
 8001406:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8001412:	4413      	add	r3, r2
 8001414:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
            int ny = y + dy[dir];
 8001418:	4a51      	ldr	r2, [pc, #324]	@ (8001560 <calculate_optimal_path_from_explored_areas+0x4f8>)
 800141a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800141e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001422:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8001426:	4413      	add	r3, r2
 8001428:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

            // CRITICAL: Only process VISITED cells with no walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800142c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001430:	2b00      	cmp	r3, #0
 8001432:	db6e      	blt.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>
 8001434:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001438:	2b0f      	cmp	r3, #15
 800143a:	dc6a      	bgt.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>
 800143c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001440:	2b00      	cmp	r3, #0
 8001442:	db66      	blt.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>
 8001444:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001448:	2b0f      	cmp	r3, #15
 800144a:	dc62      	bgt.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>
                maze[nx][ny].visited &&  // Must be visited/explored
 800144c:	4945      	ldr	r1, [pc, #276]	@ (8001564 <calculate_optimal_path_from_explored_areas+0x4fc>)
 800144e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001452:	011a      	lsls	r2, r3, #4
 8001454:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001458:	4413      	add	r3, r2
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	440b      	add	r3, r1
 800145e:	3304      	adds	r3, #4
 8001460:	781b      	ldrb	r3, [r3, #0]
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001462:	2b00      	cmp	r3, #0
 8001464:	d055      	beq.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>
                !maze[x][y].walls[dir]) { // No wall between cells
 8001466:	493f      	ldr	r1, [pc, #252]	@ (8001564 <calculate_optimal_path_from_explored_areas+0x4fc>)
 8001468:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800146c:	011a      	lsls	r2, r3, #4
 800146e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001472:	4413      	add	r3, r2
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	18ca      	adds	r2, r1, r3
 8001478:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800147c:	4413      	add	r3, r2
 800147e:	3305      	adds	r3, #5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
                maze[nx][ny].visited &&  // Must be visited/explored
 8001488:	2b00      	cmp	r3, #0
 800148a:	d042      	beq.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>

                int new_dist = maze[x][y].distance + 1;
 800148c:	4935      	ldr	r1, [pc, #212]	@ (8001564 <calculate_optimal_path_from_explored_areas+0x4fc>)
 800148e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001492:	011a      	lsls	r2, r3, #4
 8001494:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001498:	4413      	add	r3, r2
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	440b      	add	r3, r1
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
                if (new_dist < maze[nx][ny].distance) {
 80014a6:	492f      	ldr	r1, [pc, #188]	@ (8001564 <calculate_optimal_path_from_explored_areas+0x4fc>)
 80014a8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014ac:	011a      	lsls	r2, r3, #4
 80014ae:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014b2:	4413      	add	r3, r2
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	440b      	add	r3, r1
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014be:	429a      	cmp	r2, r3
 80014c0:	da27      	bge.n	8001512 <calculate_optimal_path_from_explored_areas+0x4aa>
                    maze[nx][ny].distance = new_dist;
 80014c2:	4928      	ldr	r1, [pc, #160]	@ (8001564 <calculate_optimal_path_from_explored_areas+0x4fc>)
 80014c4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014c8:	011a      	lsls	r2, r3, #4
 80014ca:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014ce:	4413      	add	r3, r2
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	440b      	add	r3, r1
 80014d4:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014d8:	601a      	str	r2, [r3, #0]
                    queue_x[queue_tail] = nx;
 80014da:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80014de:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80014e2:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80014e6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80014ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    queue_y[queue_tail++] = ny;
 80014ee:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80014f8:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80014fc:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 8001500:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 8001504:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    updates++;
 8001508:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800150c:	3301      	adds	r3, #1
 800150e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
        for (int dir = 0; dir < 4; dir++) {
 8001512:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001516:	3301      	adds	r3, #1
 8001518:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800151c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001520:	2b03      	cmp	r3, #3
 8001522:	f77f af6f 	ble.w	8001404 <calculate_optimal_path_from_explored_areas+0x39c>
    while (queue_head < queue_tail) {
 8001526:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 800152a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800152e:	429a      	cmp	r2, r3
 8001530:	f6ff af42 	blt.w	80013b8 <calculate_optimal_path_from_explored_areas+0x350>
            }
        }
    }

    // Get theoretical minimum from explored path
    theoretical_minimum = maze[0][0].distance;
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <calculate_optimal_path_from_explored_areas+0x4fc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <calculate_optimal_path_from_explored_areas+0x500>)
 800153a:	6013      	str	r3, [r2, #0]

    send_bluetooth_printf("[PATH ANALYSIS] Optimal path through explored areas: %d steps\r\n", theoretical_minimum);
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <calculate_optimal_path_from_explored_areas+0x500>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	480a      	ldr	r0, [pc, #40]	@ (800156c <calculate_optimal_path_from_explored_areas+0x504>)
 8001544:	f000 f9ee 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf("[PATH ANALYSIS] Flood fill updates: %d\r\n", updates);
 8001548:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <calculate_optimal_path_from_explored_areas+0x508>)
 800154e:	f000 f9e9 	bl	8001924 <send_bluetooth_printf>
}
 8001552:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	0800c904 	.word	0x0800c904
 8001560:	0800c914 	.word	0x0800c914
 8001564:	200003b0 	.word	0x200003b0
 8001568:	20001400 	.word	0x20001400
 800156c:	0800b454 	.word	0x0800b454
 8001570:	0800b494 	.word	0x0800b494

08001574 <analyze_championship_maze_performance>:

/**
 * @brief Comprehensive championship maze performance analysis (MMS style)
 */
void analyze_championship_maze_performance(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PERFORMANCE ANALYSIS ===\r\n");
 800157a:	4872      	ldr	r0, [pc, #456]	@ (8001744 <analyze_championship_maze_performance+0x1d0>)
 800157c:	f000 f9bc 	bl	80018f8 <send_bluetooth_message>

    // Calculate exploration efficiency
    int cells_visited = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    int total_cells = MAZE_SIZE * MAZE_SIZE;
 8001584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001588:	60bb      	str	r3, [r7, #8]

    for (int x = 0; x < MAZE_SIZE; x++) {
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e019      	b.n	80015c4 <analyze_championship_maze_performance+0x50>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e010      	b.n	80015b8 <analyze_championship_maze_performance+0x44>
            if (maze[x][y].visited) {
 8001596:	496c      	ldr	r1, [pc, #432]	@ (8001748 <analyze_championship_maze_performance+0x1d4>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	011a      	lsls	r2, r3, #4
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	440b      	add	r3, r1
 80015a4:	3304      	adds	r3, #4
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <analyze_championship_maze_performance+0x3e>
                cells_visited++;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	ddeb      	ble.n	8001596 <analyze_championship_maze_performance+0x22>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	3301      	adds	r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	dde2      	ble.n	8001590 <analyze_championship_maze_performance+0x1c>
            }
        }
    }

    float exploration_efficiency = (float)cells_visited / total_cells * 100.0f;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e2:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800174c <analyze_championship_maze_performance+0x1d8>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_message("📊 EXPLORATION METRICS:\r\n");
 80015ee:	4858      	ldr	r0, [pc, #352]	@ (8001750 <analyze_championship_maze_performance+0x1dc>)
 80015f0:	f000 f982 	bl	80018f8 <send_bluetooth_message>
    send_bluetooth_printf(" Exploration Efficiency: %.1f%%\r\n", exploration_efficiency);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe ffaf 	bl	8000558 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4855      	ldr	r0, [pc, #340]	@ (8001754 <analyze_championship_maze_performance+0x1e0>)
 8001600:	f000 f990 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf(" Cells Visited: %d/%d\r\n", cells_visited, total_cells);
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	4853      	ldr	r0, [pc, #332]	@ (8001758 <analyze_championship_maze_performance+0x1e4>)
 800160a:	f000 f98b 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf(" Total Exploration Steps: %d moves\r\n", exploration_steps);
 800160e:	4b53      	ldr	r3, [pc, #332]	@ (800175c <analyze_championship_maze_performance+0x1e8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4852      	ldr	r0, [pc, #328]	@ (8001760 <analyze_championship_maze_performance+0x1ec>)
 8001616:	f000 f985 	bl	8001924 <send_bluetooth_printf>

    send_bluetooth_message("\r\n🎯 OPTIMAL PATH ANALYSIS:\r\n");
 800161a:	4852      	ldr	r0, [pc, #328]	@ (8001764 <analyze_championship_maze_performance+0x1f0>)
 800161c:	f000 f96c 	bl	80018f8 <send_bluetooth_message>
    if (theoretical_minimum < MAX_DISTANCE) {
 8001620:	4b51      	ldr	r3, [pc, #324]	@ (8001768 <analyze_championship_maze_performance+0x1f4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001628:	4293      	cmp	r3, r2
 800162a:	dc0c      	bgt.n	8001646 <analyze_championship_maze_performance+0xd2>
        send_bluetooth_printf(" Best Path Through Explored Areas: %d steps\r\n", theoretical_minimum);
 800162c:	4b4e      	ldr	r3, [pc, #312]	@ (8001768 <analyze_championship_maze_performance+0x1f4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	484e      	ldr	r0, [pc, #312]	@ (800176c <analyze_championship_maze_performance+0x1f8>)
 8001634:	f000 f976 	bl	8001924 <send_bluetooth_printf>
        send_bluetooth_message(" Path Knowledge: ✅ COMPLETE for explored regions\r\n");
 8001638:	484d      	ldr	r0, [pc, #308]	@ (8001770 <analyze_championship_maze_performance+0x1fc>)
 800163a:	f000 f95d 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" Algorithm Efficiency: ✅ CHAMPIONSHIP LEVEL\r\n");
 800163e:	484d      	ldr	r0, [pc, #308]	@ (8001774 <analyze_championship_maze_performance+0x200>)
 8001640:	f000 f95a 	bl	80018f8 <send_bluetooth_message>
 8001644:	e005      	b.n	8001652 <analyze_championship_maze_performance+0xde>
    } else {
        send_bluetooth_message(" ❌ No path found through explored areas!\r\n");
 8001646:	484c      	ldr	r0, [pc, #304]	@ (8001778 <analyze_championship_maze_performance+0x204>)
 8001648:	f000 f956 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" Check if center was reached and start is accessible\r\n");
 800164c:	484b      	ldr	r0, [pc, #300]	@ (800177c <analyze_championship_maze_performance+0x208>)
 800164e:	f000 f953 	bl	80018f8 <send_bluetooth_message>
    }

    // Performance rating based on exploration efficiency
    send_bluetooth_message("\r\n🏆 PERFORMANCE RATING:\r\n");
 8001652:	484b      	ldr	r0, [pc, #300]	@ (8001780 <analyze_championship_maze_performance+0x20c>)
 8001654:	f000 f950 	bl	80018f8 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 8001658:	edd7 7a01 	vldr	s15, [r7, #4]
 800165c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001784 <analyze_championship_maze_performance+0x210>
 8001660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d80c      	bhi.n	8001684 <analyze_championship_maze_performance+0x110>
 800166a:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <analyze_championship_maze_performance+0x1f4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001672:	4293      	cmp	r3, r2
 8001674:	dc06      	bgt.n	8001684 <analyze_championship_maze_performance+0x110>
        send_bluetooth_message(" ⭐⭐⭐⭐⭐ CHAMPIONSHIP LEVEL\r\n");
 8001676:	4844      	ldr	r0, [pc, #272]	@ (8001788 <analyze_championship_maze_performance+0x214>)
 8001678:	f000 f93e 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" 🥇 Efficient exploration with optimal path knowledge!\r\n");
 800167c:	4843      	ldr	r0, [pc, #268]	@ (800178c <analyze_championship_maze_performance+0x218>)
 800167e:	f000 f93b 	bl	80018f8 <send_bluetooth_message>
 8001682:	e025      	b.n	80016d0 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 65.0f) {
 8001684:	edd7 7a01 	vldr	s15, [r7, #4]
 8001688:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001790 <analyze_championship_maze_performance+0x21c>
 800168c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d806      	bhi.n	80016a4 <analyze_championship_maze_performance+0x130>
        send_bluetooth_message(" ⭐⭐⭐⭐ COMPETITION READY\r\n");
 8001696:	483f      	ldr	r0, [pc, #252]	@ (8001794 <analyze_championship_maze_performance+0x220>)
 8001698:	f000 f92e 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" 🥈 Good exploration efficiency with complete maze knowledge\r\n");
 800169c:	483e      	ldr	r0, [pc, #248]	@ (8001798 <analyze_championship_maze_performance+0x224>)
 800169e:	f000 f92b 	bl	80018f8 <send_bluetooth_message>
 80016a2:	e015      	b.n	80016d0 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 80.0f) {
 80016a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a8:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800179c <analyze_championship_maze_performance+0x228>
 80016ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d806      	bhi.n	80016c4 <analyze_championship_maze_performance+0x150>
        send_bluetooth_message(" ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80016b6:	483a      	ldr	r0, [pc, #232]	@ (80017a0 <analyze_championship_maze_performance+0x22c>)
 80016b8:	f000 f91e 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" 🥉 Solid exploration, room for optimization\r\n");
 80016bc:	4839      	ldr	r0, [pc, #228]	@ (80017a4 <analyze_championship_maze_performance+0x230>)
 80016be:	f000 f91b 	bl	80018f8 <send_bluetooth_message>
 80016c2:	e005      	b.n	80016d0 <analyze_championship_maze_performance+0x15c>
    } else {
        send_bluetooth_message(" ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80016c4:	4838      	ldr	r0, [pc, #224]	@ (80017a8 <analyze_championship_maze_performance+0x234>)
 80016c6:	f000 f917 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Over-exploration detected, improve search termination\r\n");
 80016ca:	4838      	ldr	r0, [pc, #224]	@ (80017ac <analyze_championship_maze_performance+0x238>)
 80016cc:	f000 f914 	bl	80018f8 <send_bluetooth_message>
    }

    // Championship recommendations
    send_bluetooth_message("\r\n💡 CHAMPIONSHIP RECOMMENDATIONS:\r\n");
 80016d0:	4837      	ldr	r0, [pc, #220]	@ (80017b0 <analyze_championship_maze_performance+0x23c>)
 80016d2:	f000 f911 	bl	80018f8 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001784 <analyze_championship_maze_performance+0x210>
 80016de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	d80f      	bhi.n	8001708 <analyze_championship_maze_performance+0x194>
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <analyze_championship_maze_performance+0x1f4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f242 720e 	movw	r2, #9998	@ 0x270e
 80016f0:	4293      	cmp	r3, r2
 80016f2:	dc09      	bgt.n	8001708 <analyze_championship_maze_performance+0x194>
        send_bluetooth_message(" ✅ Excellent exploration efficiency! Championship ready!\r\n");
 80016f4:	482f      	ldr	r0, [pc, #188]	@ (80017b4 <analyze_championship_maze_performance+0x240>)
 80016f6:	f000 f8ff 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Optimal path knowledge complete!\r\n");
 80016fa:	482f      	ldr	r0, [pc, #188]	@ (80017b8 <analyze_championship_maze_performance+0x244>)
 80016fc:	f000 f8fc 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" 🏆 Ready for IEEE Micromouse competition!\r\n");
 8001700:	482e      	ldr	r0, [pc, #184]	@ (80017bc <analyze_championship_maze_performance+0x248>)
 8001702:	f000 f8f9 	bl	80018f8 <send_bluetooth_message>
 8001706:	e015      	b.n	8001734 <analyze_championship_maze_performance+0x1c0>
    } else if (exploration_efficiency > 75.0f) {
 8001708:	edd7 7a01 	vldr	s15, [r7, #4]
 800170c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80017c0 <analyze_championship_maze_performance+0x24c>
 8001710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	dd06      	ble.n	8001728 <analyze_championship_maze_performance+0x1b4>
        send_bluetooth_message(" 🔄 Consider smarter search termination\r\n");
 800171a:	482a      	ldr	r0, [pc, #168]	@ (80017c4 <analyze_championship_maze_performance+0x250>)
 800171c:	f000 f8ec 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Implement early stopping when center is fully explored\r\n");
 8001720:	4829      	ldr	r0, [pc, #164]	@ (80017c8 <analyze_championship_maze_performance+0x254>)
 8001722:	f000 f8e9 	bl	80018f8 <send_bluetooth_message>
 8001726:	e005      	b.n	8001734 <analyze_championship_maze_performance+0x1c0>
    } else {
        send_bluetooth_message(" ✅ Good balance of exploration and efficiency\r\n");
 8001728:	4828      	ldr	r0, [pc, #160]	@ (80017cc <analyze_championship_maze_performance+0x258>)
 800172a:	f000 f8e5 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Path knowledge is complete for explored areas\r\n");
 800172e:	4828      	ldr	r0, [pc, #160]	@ (80017d0 <analyze_championship_maze_performance+0x25c>)
 8001730:	f000 f8e2 	bl	80018f8 <send_bluetooth_message>
    }

    send_bluetooth_message("========================================\r\n");
 8001734:	4827      	ldr	r0, [pc, #156]	@ (80017d4 <analyze_championship_maze_performance+0x260>)
 8001736:	f000 f8df 	bl	80018f8 <send_bluetooth_message>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	0800b4c0 	.word	0x0800b4c0
 8001748:	200003b0 	.word	0x200003b0
 800174c:	42c80000 	.word	0x42c80000
 8001750:	0800b4f0 	.word	0x0800b4f0
 8001754:	0800b50c 	.word	0x0800b50c
 8001758:	0800b530 	.word	0x0800b530
 800175c:	200013fc 	.word	0x200013fc
 8001760:	0800b548 	.word	0x0800b548
 8001764:	0800b570 	.word	0x0800b570
 8001768:	20001400 	.word	0x20001400
 800176c:	0800b590 	.word	0x0800b590
 8001770:	0800b5c0 	.word	0x0800b5c0
 8001774:	0800b5f8 	.word	0x0800b5f8
 8001778:	0800b628 	.word	0x0800b628
 800177c:	0800b658 	.word	0x0800b658
 8001780:	0800b690 	.word	0x0800b690
 8001784:	42480000 	.word	0x42480000
 8001788:	0800b6b0 	.word	0x0800b6b0
 800178c:	0800b6d8 	.word	0x0800b6d8
 8001790:	42820000 	.word	0x42820000
 8001794:	0800b714 	.word	0x0800b714
 8001798:	0800b738 	.word	0x0800b738
 800179c:	42a00000 	.word	0x42a00000
 80017a0:	0800b77c 	.word	0x0800b77c
 80017a4:	0800b79c 	.word	0x0800b79c
 80017a8:	0800b7d0 	.word	0x0800b7d0
 80017ac:	0800b7f0 	.word	0x0800b7f0
 80017b0:	0800b830 	.word	0x0800b830
 80017b4:	0800b858 	.word	0x0800b858
 80017b8:	0800b898 	.word	0x0800b898
 80017bc:	0800b8c0 	.word	0x0800b8c0
 80017c0:	42960000 	.word	0x42960000
 80017c4:	0800b8f0 	.word	0x0800b8f0
 80017c8:	0800b91c 	.word	0x0800b91c
 80017cc:	0800b95c 	.word	0x0800b95c
 80017d0:	0800b990 	.word	0x0800b990
 80017d4:	0800b9c8 	.word	0x0800b9c8

080017d8 <print_championship_distance_map>:

/**
 * @brief Print detailed distance map for EXPLORED areas only (MMS style)
 */
void print_championship_distance_map(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n📍 OPTIMAL DISTANCE MAP (explored areas only):\r\n");
 80017de:	483a      	ldr	r0, [pc, #232]	@ (80018c8 <print_championship_distance_map+0xf0>)
 80017e0:	f000 f88a 	bl	80018f8 <send_bluetooth_message>
    send_bluetooth_message("   ");
 80017e4:	4839      	ldr	r0, [pc, #228]	@ (80018cc <print_championship_distance_map+0xf4>)
 80017e6:	f000 f887 	bl	80018f8 <send_bluetooth_message>

    // Print column headers
    for (int x = 0; x < MAZE_SIZE; x++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e006      	b.n	80017fe <print_championship_distance_map+0x26>
        send_bluetooth_printf("%3d", x);
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	4837      	ldr	r0, [pc, #220]	@ (80018d0 <print_championship_distance_map+0xf8>)
 80017f4:	f000 f896 	bl	8001924 <send_bluetooth_printf>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	ddf5      	ble.n	80017f0 <print_championship_distance_map+0x18>
    }
    send_bluetooth_message("\r\n");
 8001804:	4833      	ldr	r0, [pc, #204]	@ (80018d4 <print_championship_distance_map+0xfc>)
 8001806:	f000 f877 	bl	80018f8 <send_bluetooth_message>

    // Print maze from top to bottom (MMS style)
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 800180a:	230f      	movs	r3, #15
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	e040      	b.n	8001892 <print_championship_distance_map+0xba>
        send_bluetooth_printf("%2d ", y);
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	4831      	ldr	r0, [pc, #196]	@ (80018d8 <print_championship_distance_map+0x100>)
 8001814:	f000 f886 	bl	8001924 <send_bluetooth_printf>

        for (int x = 0; x < MAZE_SIZE; x++) {
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	e030      	b.n	8001880 <print_championship_distance_map+0xa8>
            if (!maze[x][y].visited) {
 800181e:	492f      	ldr	r1, [pc, #188]	@ (80018dc <print_championship_distance_map+0x104>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	011a      	lsls	r2, r3, #4
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	440b      	add	r3, r1
 800182c:	3304      	adds	r3, #4
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <print_championship_distance_map+0x6a>
                send_bluetooth_message(" - "); // Not explored
 800183a:	4829      	ldr	r0, [pc, #164]	@ (80018e0 <print_championship_distance_map+0x108>)
 800183c:	f000 f85c 	bl	80018f8 <send_bluetooth_message>
 8001840:	e01b      	b.n	800187a <print_championship_distance_map+0xa2>
            } else if (maze[x][y].distance == MAX_DISTANCE) {
 8001842:	4926      	ldr	r1, [pc, #152]	@ (80018dc <print_championship_distance_map+0x104>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	011a      	lsls	r2, r3, #4
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	440b      	add	r3, r1
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001856:	4293      	cmp	r3, r2
 8001858:	d103      	bne.n	8001862 <print_championship_distance_map+0x8a>
                send_bluetooth_message(" ∞ "); // Explored but unreachable
 800185a:	4822      	ldr	r0, [pc, #136]	@ (80018e4 <print_championship_distance_map+0x10c>)
 800185c:	f000 f84c 	bl	80018f8 <send_bluetooth_message>
 8001860:	e00b      	b.n	800187a <print_championship_distance_map+0xa2>
            } else {
                send_bluetooth_printf("%3d", maze[x][y].distance);
 8001862:	491e      	ldr	r1, [pc, #120]	@ (80018dc <print_championship_distance_map+0x104>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	011a      	lsls	r2, r3, #4
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4413      	add	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	440b      	add	r3, r1
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4816      	ldr	r0, [pc, #88]	@ (80018d0 <print_championship_distance_map+0xf8>)
 8001876:	f000 f855 	bl	8001924 <send_bluetooth_printf>
        for (int x = 0; x < MAZE_SIZE; x++) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	ddcb      	ble.n	800181e <print_championship_distance_map+0x46>
            }
        }
        send_bluetooth_message("\r\n");
 8001886:	4813      	ldr	r0, [pc, #76]	@ (80018d4 <print_championship_distance_map+0xfc>)
 8001888:	f000 f836 	bl	80018f8 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3b01      	subs	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	dabb      	bge.n	8001810 <print_championship_distance_map+0x38>
    }

    if (theoretical_minimum < MAX_DISTANCE) {
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <print_championship_distance_map+0x110>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f242 720e 	movw	r2, #9998	@ 0x270e
 80018a0:	4293      	cmp	r3, r2
 80018a2:	dc06      	bgt.n	80018b2 <print_championship_distance_map+0xda>
        send_bluetooth_printf("\r\nOptimal path through explored areas: %d steps\r\n", theoretical_minimum);
 80018a4:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <print_championship_distance_map+0x110>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	@ (80018ec <print_championship_distance_map+0x114>)
 80018ac:	f000 f83a 	bl	8001924 <send_bluetooth_printf>
 80018b0:	e002      	b.n	80018b8 <print_championship_distance_map+0xe0>
    } else {
        send_bluetooth_message("\r\n❌ No path found through explored areas\r\n");
 80018b2:	480f      	ldr	r0, [pc, #60]	@ (80018f0 <print_championship_distance_map+0x118>)
 80018b4:	f000 f820 	bl	80018f8 <send_bluetooth_message>
    }

    send_bluetooth_message("Legend: - = not explored, ∞ = explored but unreachable\r\n");
 80018b8:	480e      	ldr	r0, [pc, #56]	@ (80018f4 <print_championship_distance_map+0x11c>)
 80018ba:	f000 f81d 	bl	80018f8 <send_bluetooth_message>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	0800b9f4 	.word	0x0800b9f4
 80018cc:	0800ba2c 	.word	0x0800ba2c
 80018d0:	0800ba30 	.word	0x0800ba30
 80018d4:	0800ba34 	.word	0x0800ba34
 80018d8:	0800ba38 	.word	0x0800ba38
 80018dc:	200003b0 	.word	0x200003b0
 80018e0:	0800ba40 	.word	0x0800ba40
 80018e4:	0800ba44 	.word	0x0800ba44
 80018e8:	20001400 	.word	0x20001400
 80018ec:	0800ba4c 	.word	0x0800ba4c
 80018f0:	0800ba80 	.word	0x0800ba80
 80018f4:	0800bab0 	.word	0x0800bab0

080018f8 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fcbd 	bl	8000280 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	b29a      	uxth	r2, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4803      	ldr	r0, [pc, #12]	@ (8001920 <send_bluetooth_message+0x28>)
 8001912:	f005 ff1d 	bl	8007750 <HAL_UART_Transmit>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000368 	.word	0x20000368

08001924 <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 8001924:	b40f      	push	{r0, r1, r2, r3}
 8001926:	b580      	push	{r7, lr}
 8001928:	b0c2      	sub	sp, #264	@ 0x108
 800192a:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 800192c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001938:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800193a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800193e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001942:	f107 0008 	add.w	r0, r7, #8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800194c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001950:	f007 fc50 	bl	80091f4 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ffcd 	bl	80018f8 <send_bluetooth_message>
}
 800195e:	bf00      	nop
 8001960:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001964:	46bd      	mov	sp, r7
 8001966:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800196a:	b004      	add	sp, #16
 800196c:	4770      	bx	lr
	...

08001970 <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 8001976:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <send_battery_status+0x60>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019d4 <send_battery_status+0x64>
 8001986:	ee27 7a87 	vmul.f32	s14, s15, s14
 800198a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019d8 <send_battery_status+0x68>
 800198e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001992:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fdde 	bl	8000558 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	490b      	ldr	r1, [pc, #44]	@ (80019d0 <send_battery_status+0x60>)
 80019a2:	8809      	ldrh	r1, [r1, #0]
 80019a4:	9100      	str	r1, [sp, #0]
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <send_battery_status+0x6c>)
 80019a8:	f7ff ffbc 	bl	8001924 <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80019ac:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <send_battery_status+0x60>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d803      	bhi.n	80019c0 <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 80019b8:	4809      	ldr	r0, [pc, #36]	@ (80019e0 <send_battery_status+0x70>)
 80019ba:	f7ff ff9d 	bl	80018f8 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 80019be:	e002      	b.n	80019c6 <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 80019c0:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <send_battery_status+0x74>)
 80019c2:	f7ff ff99 	bl	80018f8 <send_bluetooth_message>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200013c4 	.word	0x200013c4
 80019d4:	40533333 	.word	0x40533333
 80019d8:	45800000 	.word	0x45800000
 80019dc:	0800c090 	.word	0x0800c090
 80019e0:	0800c0a8 	.word	0x0800c0a8
 80019e4:	0800c0c4 	.word	0x0800c0c4

080019e8 <send_championship_stats>:

/**
 * @brief Send championship statistics
 */
void send_championship_stats(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🏆 CHAMPIONSHIP STATISTICS 🏆\r\n");
 80019ec:	480b      	ldr	r0, [pc, #44]	@ (8001a1c <send_championship_stats+0x34>)
 80019ee:	f7ff ff83 	bl	80018f8 <send_bluetooth_message>
    send_bluetooth_printf("Algorithm: Flood Fill + Championship Heuristics\r\n");
 80019f2:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <send_championship_stats+0x38>)
 80019f4:	f7ff ff96 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf("MCU: STM32F411CEU6 @ 84MHz\r\n");
 80019f8:	480a      	ldr	r0, [pc, #40]	@ (8001a24 <send_championship_stats+0x3c>)
 80019fa:	f7ff ff93 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf("Sensors: 4x TEFT4300 IR + MPU9250 Gyro\r\n");
 80019fe:	480a      	ldr	r0, [pc, #40]	@ (8001a28 <send_championship_stats+0x40>)
 8001a00:	f7ff ff90 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf("Motors: DRV8833 H-Bridge with Encoders\r\n");
 8001a04:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <send_championship_stats+0x44>)
 8001a06:	f7ff ff8d 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_printf("International Standard: IEEE Micromouse Compliant\r\n");
 8001a0a:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <send_championship_stats+0x48>)
 8001a0c:	f7ff ff8a 	bl	8001924 <send_bluetooth_printf>
    send_bluetooth_message("====================================\r\n");
 8001a10:	4808      	ldr	r0, [pc, #32]	@ (8001a34 <send_championship_stats+0x4c>)
 8001a12:	f7ff ff71 	bl	80018f8 <send_bluetooth_message>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0800c0cc 	.word	0x0800c0cc
 8001a20:	0800c0f4 	.word	0x0800c0f4
 8001a24:	0800c128 	.word	0x0800c128
 8001a28:	0800c148 	.word	0x0800c148
 8001a2c:	0800c174 	.word	0x0800c174
 8001a30:	0800c1a0 	.word	0x0800c1a0
 8001a34:	0800c1d4 	.word	0x0800c1d4

08001a38 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	73fb      	strb	r3, [r7, #15]
    uint8_t rx_data = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2104      	movs	r1, #4
 8001a54:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <mpu9250_read_register+0x54>)
 8001a56:	f003 fa67 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001a5a:	f107 010f 	add.w	r1, r7, #15
 8001a5e:	2364      	movs	r3, #100	@ 0x64
 8001a60:	2201      	movs	r2, #1
 8001a62:	480b      	ldr	r0, [pc, #44]	@ (8001a90 <mpu9250_read_register+0x58>)
 8001a64:	f003 ff99 	bl	800599a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8001a68:	f107 010e 	add.w	r1, r7, #14
 8001a6c:	2364      	movs	r3, #100	@ 0x64
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <mpu9250_read_register+0x58>)
 8001a72:	f004 f8d6 	bl	8005c22 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4804      	ldr	r0, [pc, #16]	@ (8001a8c <mpu9250_read_register+0x54>)
 8001a7c:	f003 fa54 	bl	8004f28 <HAL_GPIO_WritePin>

    return rx_data;
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	20000238 	.word	0x20000238

08001a94 <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	733b      	strb	r3, [r7, #12]
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2104      	movs	r1, #4
 8001ab0:	480a      	ldr	r0, [pc, #40]	@ (8001adc <mpu9250_write_register+0x48>)
 8001ab2:	f003 fa39 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001ab6:	f107 010c 	add.w	r1, r7, #12
 8001aba:	2364      	movs	r3, #100	@ 0x64
 8001abc:	2202      	movs	r2, #2
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <mpu9250_write_register+0x4c>)
 8001ac0:	f003 ff6b 	bl	800599a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	4804      	ldr	r0, [pc, #16]	@ (8001adc <mpu9250_write_register+0x48>)
 8001aca:	f003 fa2d 	bl	8004f28 <HAL_GPIO_WritePin>

    HAL_Delay(1); // Small delay for register write
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f002 faec 	bl	80040ac <HAL_Delay>
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	20000238 	.word	0x20000238

08001ae4 <mpu9250_init>:

/**
 * @brief Initialize MPU9250
 */
void mpu9250_init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
    // Check WHO_AM_I register
    uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001aea:	2075      	movs	r0, #117	@ 0x75
 8001aec:	f7ff ffa4 	bl	8001a38 <mpu9250_read_register>
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]

    if (who_am_i == MPU9250_WHO_AM_I_RESPONSE) {
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b71      	cmp	r3, #113	@ 0x71
 8001af8:	d12c      	bne.n	8001b54 <mpu9250_init+0x70>
        send_bluetooth_message("MPU9250 detected successfully\r\n");
 8001afa:	481b      	ldr	r0, [pc, #108]	@ (8001b68 <mpu9250_init+0x84>)
 8001afc:	f7ff fefc 	bl	80018f8 <send_bluetooth_message>
                             who_am_i, MPU9250_WHO_AM_I_RESPONSE);
        return;
    }

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80);
 8001b00:	2180      	movs	r1, #128	@ 0x80
 8001b02:	206b      	movs	r0, #107	@ 0x6b
 8001b04:	f7ff ffc6 	bl	8001a94 <mpu9250_write_register>
    HAL_Delay(100);
 8001b08:	2064      	movs	r0, #100	@ 0x64
 8001b0a:	f002 facf 	bl	80040ac <HAL_Delay>

    // Configure power management
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01); // Use PLL with X-axis gyro
 8001b0e:	2101      	movs	r1, #1
 8001b10:	206b      	movs	r0, #107	@ 0x6b
 8001b12:	f7ff ffbf 	bl	8001a94 <mpu9250_write_register>
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00); // Enable all axes
 8001b16:	2100      	movs	r1, #0
 8001b18:	206c      	movs	r0, #108	@ 0x6c
 8001b1a:	f7ff ffbb 	bl	8001a94 <mpu9250_write_register>

    // Configure sample rate (1kHz / (1 + SMPLRT_DIV))
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x07); // 125Hz sample rate
 8001b1e:	2107      	movs	r1, #7
 8001b20:	2019      	movs	r0, #25
 8001b22:	f7ff ffb7 	bl	8001a94 <mpu9250_write_register>

    // Configure low-pass filter
    mpu9250_write_register(MPU9250_CONFIG, 0x03); // 41Hz bandwidth
 8001b26:	2103      	movs	r1, #3
 8001b28:	201a      	movs	r0, #26
 8001b2a:	f7ff ffb3 	bl	8001a94 <mpu9250_write_register>

    // Configure gyroscope (±500 dps)
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);
 8001b2e:	2108      	movs	r1, #8
 8001b30:	201b      	movs	r0, #27
 8001b32:	f7ff ffaf 	bl	8001a94 <mpu9250_write_register>

    // Configure accelerometer (±4g)
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08);
 8001b36:	2108      	movs	r1, #8
 8001b38:	201c      	movs	r0, #28
 8001b3a:	f7ff ffab 	bl	8001a94 <mpu9250_write_register>

    // Configure accelerometer low-pass filter
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x03);
 8001b3e:	2103      	movs	r1, #3
 8001b40:	201d      	movs	r0, #29
 8001b42:	f7ff ffa7 	bl	8001a94 <mpu9250_write_register>

    HAL_Delay(10);
 8001b46:	200a      	movs	r0, #10
 8001b48:	f002 fab0 	bl	80040ac <HAL_Delay>
    send_bluetooth_message("MPU9250 initialized successfully\r\n");
 8001b4c:	4807      	ldr	r0, [pc, #28]	@ (8001b6c <mpu9250_init+0x88>)
 8001b4e:	f7ff fed3 	bl	80018f8 <send_bluetooth_message>
 8001b52:	e006      	b.n	8001b62 <mpu9250_init+0x7e>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X, expected 0x%02X\r\n",
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	2271      	movs	r2, #113	@ 0x71
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <mpu9250_init+0x8c>)
 8001b5c:	f7ff fee2 	bl	8001924 <send_bluetooth_printf>
        return;
 8001b60:	bf00      	nop
}
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	0800c1fc 	.word	0x0800c1fc
 8001b6c:	0800c254 	.word	0x0800c254
 8001b70:	0800c21c 	.word	0x0800c21c

08001b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b78:	f002 fa26 	bl	8003fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7c:	f000 f8be 	bl	8001cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b80:	f000 fb56 	bl	8002230 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b84:	f000 f922 	bl	8001dcc <MX_ADC1_Init>
  MX_SPI2_Init();
 8001b88:	f000 f9aa 	bl	8001ee0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b8c:	f000 f9de 	bl	8001f4c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b90:	f000 fa7c 	bl	800208c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b94:	f000 face 	bl	8002134 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8001b98:	f000 fb20 	bl	80021dc <MX_USART6_UART_Init>
  
  /* USER CODE BEGIN 2 */


  /* Initialize micromouse system */
  championship_micromouse_init();
 8001b9c:	f000 fc08 	bl	80023b0 <championship_micromouse_init>

  /* Play startup tone */
  play_startup_tone();
 8001ba0:	f7ff f9ee 	bl	8000f80 <play_startup_tone>

  /* Status LEDs test */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4849      	ldr	r0, [pc, #292]	@ (8001cd0 <main+0x15c>)
 8001baa:	f003 f9bd 	bl	8004f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4847      	ldr	r0, [pc, #284]	@ (8001cd0 <main+0x15c>)
 8001bb4:	f003 f9b8 	bl	8004f28 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001bb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bbc:	f002 fa76 	bl	80040ac <HAL_Delay>
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	4842      	ldr	r0, [pc, #264]	@ (8001cd0 <main+0x15c>)
 8001bc6:	f003 f9af 	bl	8004f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2120      	movs	r1, #32
 8001bce:	4840      	ldr	r0, [pc, #256]	@ (8001cd0 <main+0x15c>)
 8001bd0:	f003 f9aa 	bl	8004f28 <HAL_GPIO_WritePin>

  /* Send startup message via Bluetooth */
  send_bluetooth_message("Championship Micromouse Ready!\r\n");
 8001bd4:	483f      	ldr	r0, [pc, #252]	@ (8001cd4 <main+0x160>)
 8001bd6:	f7ff fe8f 	bl	80018f8 <send_bluetooth_message>

  send_championship_stats();
 8001bda:	f7ff ff05 	bl	80019e8 <send_championship_stats>

  /* Wait for start button */
  send_bluetooth_message("Press button to start exploration...\r\n");
 8001bde:	483e      	ldr	r0, [pc, #248]	@ (8001cd8 <main+0x164>)
 8001be0:	f7ff fe8a 	bl	80018f8 <send_bluetooth_message>
  while (!start_flag) {
 8001be4:	e006      	b.n	8001bf4 <main+0x80>
      HAL_Delay(10);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f002 fa60 	bl	80040ac <HAL_Delay>
      // Blink LED to show ready state
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001bec:	2110      	movs	r1, #16
 8001bee:	4838      	ldr	r0, [pc, #224]	@ (8001cd0 <main+0x15c>)
 8001bf0:	f003 f9b3 	bl	8004f5a <HAL_GPIO_TogglePin>
  while (!start_flag) {
 8001bf4:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <main+0x168>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f3      	beq.n	8001be6 <main+0x72>
  }

  /* Reset LEDs */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2110      	movs	r1, #16
 8001c02:	4833      	ldr	r0, [pc, #204]	@ (8001cd0 <main+0x15c>)
 8001c04:	f003 f990 	bl	8004f28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	4830      	ldr	r0, [pc, #192]	@ (8001cd0 <main+0x15c>)
 8001c0e:	f003 f98b 	bl	8004f28 <HAL_GPIO_WritePin>

  /* Start exploration after delay */
  play_confirmation_tone();
 8001c12:	f7ff f9d1 	bl	8000fb8 <play_confirmation_tone>
  HAL_Delay(2000);
 8001c16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c1a:	f002 fa47 	bl	80040ac <HAL_Delay>

  /* Main micromouse algorithm */
  send_bluetooth_message("Starting maze exploration...\r\n");
 8001c1e:	4830      	ldr	r0, [pc, #192]	@ (8001ce0 <main+0x16c>)
 8001c20:	f7ff fe6a 	bl	80018f8 <send_bluetooth_message>

  /* Initialize movement system */
  start_encoders();
 8001c24:	f001 fbaa 	bl	800337c <start_encoders>
  calibrate_sensors();
 8001c28:	f001 fe28 	bl	800387c <calibrate_sensors>

  /* Execute championship exploration */
  championship_exploration_with_analysis();
 8001c2c:	f001 f92a 	bl	8002e84 <championship_exploration_with_analysis>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  update_sensors();
 8001c30:	f001 fda6 	bl	8003780 <update_sensors>

	  if (button_pressed == 1) {
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <main+0x170>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d114      	bne.n	8001c68 <main+0xf4>
		  button_pressed = 0;
 8001c3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <main+0x170>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
		  // Left button - start speed run or new exploration
		  if (robot.center_reached && robot.returned_to_start) {
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <main+0x174>)
 8001c46:	7b1b      	ldrb	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <main+0xe6>
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <main+0x174>)
 8001c4e:	7b5b      	ldrb	r3, [r3, #13]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <main+0xe6>
			  championship_speed_run(); // Championship speed run with MMS path
 8001c54:	f001 fa94 	bl	8003180 <championship_speed_run>
 8001c58:	e006      	b.n	8001c68 <main+0xf4>
		  } else {
			  send_bluetooth_message("Starting new championship exploration...\r\n");
 8001c5a:	4824      	ldr	r0, [pc, #144]	@ (8001cec <main+0x178>)
 8001c5c:	f7ff fe4c 	bl	80018f8 <send_bluetooth_message>
			  reset_championship_micromouse();
 8001c60:	f001 fa62 	bl	8003128 <reset_championship_micromouse>
			  championship_exploration_with_analysis();
 8001c64:	f001 f90e 	bl	8002e84 <championship_exploration_with_analysis>
		  }
	  }

	  if (button_pressed == 2) {
 8001c68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <main+0x170>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <main+0x10e>
		  button_pressed = 0;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <main+0x170>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
		  // Right button - reset system
		  reset_championship_micromouse();
 8001c78:	f001 fa56 	bl	8003128 <reset_championship_micromouse>
		  send_bluetooth_message("Championship system reset\r\n");
 8001c7c:	481c      	ldr	r0, [pc, #112]	@ (8001cf0 <main+0x17c>)
 8001c7e:	f7ff fe3b 	bl	80018f8 <send_bluetooth_message>
	  }

	  // Send periodic status updates
	  static uint32_t last_status = 0;
	  if (HAL_GetTick() - last_status > 5000) {
 8001c82:	f002 fa07 	bl	8004094 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <main+0x180>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d906      	bls.n	8001ca4 <main+0x130>
		  send_battery_status();
 8001c96:	f7ff fe6b 	bl	8001970 <send_battery_status>
		  last_status = HAL_GetTick();
 8001c9a:	f002 f9fb 	bl	8004094 <HAL_GetTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a14      	ldr	r2, [pc, #80]	@ (8001cf4 <main+0x180>)
 8001ca2:	6013      	str	r3, [r2, #0]
	  }

	  // Blink LED to show system is alive
	  static uint32_t last_blink = 0;
	  if (HAL_GetTick() - last_blink > 2000) {
 8001ca4:	f002 f9f6 	bl	8004094 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <main+0x184>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cb4:	d908      	bls.n	8001cc8 <main+0x154>
		  HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <main+0x15c>)
 8001cba:	f003 f94e 	bl	8004f5a <HAL_GPIO_TogglePin>
		  last_blink = HAL_GetTick();
 8001cbe:	f002 f9e9 	bl	8004094 <HAL_GetTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <main+0x184>)
 8001cc6:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(100);
 8001cc8:	2064      	movs	r0, #100	@ 0x64
 8001cca:	f002 f9ef 	bl	80040ac <HAL_Delay>
  {
 8001cce:	e7af      	b.n	8001c30 <main+0xbc>
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	0800c278 	.word	0x0800c278
 8001cd8:	0800c29c 	.word	0x0800c29c
 8001cdc:	200013f9 	.word	0x200013f9
 8001ce0:	0800c2c4 	.word	0x0800c2c4
 8001ce4:	200013f8 	.word	0x200013f8
 8001ce8:	200013b0 	.word	0x200013b0
 8001cec:	0800c2e4 	.word	0x0800c2e4
 8001cf0:	0800c310 	.word	0x0800c310
 8001cf4:	20001404 	.word	0x20001404
 8001cf8:	20001408 	.word	0x20001408

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	@ 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	@ 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f007 fa80 	bl	8009210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <SystemClock_Config+0xc8>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a26      	ldr	r2, [pc, #152]	@ (8001dc4 <SystemClock_Config+0xc8>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <SystemClock_Config+0xc8>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <SystemClock_Config+0xcc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <SystemClock_Config+0xcc>)
 8001d46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <SystemClock_Config+0xcc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d60:	2310      	movs	r3, #16
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d70:	23a8      	movs	r3, #168	@ 0xa8
 8001d72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 f929 	bl	8004fd8 <HAL_RCC_OscConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d8c:	f000 fafc 	bl	8002388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2302      	movs	r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2102      	movs	r1, #2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fb8b 	bl	80054c8 <HAL_RCC_ClockConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001db8:	f000 fae6 	bl	8002388 <Error_Handler>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3750      	adds	r7, #80	@ 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000

08001dcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001de0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed8 <MX_ADC1_Init+0x10c>)
 8001de2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001de4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001de6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001df2:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dfe:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e06:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e0e:	4a33      	ldr	r2, [pc, #204]	@ (8001edc <MX_ADC1_Init+0x110>)
 8001e10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e12:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001e18:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e2c:	4829      	ldr	r0, [pc, #164]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e2e:	f002 f961 	bl	80040f4 <HAL_ADC_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e38:	f000 faa6 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4821      	ldr	r0, [pc, #132]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e4e:	f002 fb15 	bl	800447c <HAL_ADC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e58:	f000 fa96 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4619      	mov	r1, r3
 8001e68:	481a      	ldr	r0, [pc, #104]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e6a:	f002 fb07 	bl	800447c <HAL_ADC_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001e74:	f000 fa88 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e80:	463b      	mov	r3, r7
 8001e82:	4619      	mov	r1, r3
 8001e84:	4813      	ldr	r0, [pc, #76]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001e86:	f002 faf9 	bl	800447c <HAL_ADC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001e90:	f000 fa7a 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001ea2:	f002 faeb 	bl	800447c <HAL_ADC_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001eac:	f000 fa6c 	bl	8002388 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_ADC1_Init+0x108>)
 8001ebe:	f002 fadd 	bl	800447c <HAL_ADC_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ec8:	f000 fa5e 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200001f0 	.word	0x200001f0
 8001ed8:	40012000 	.word	0x40012000
 8001edc:	0f000001 	.word	0x0f000001

08001ee0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001ee6:	4a18      	ldr	r2, [pc, #96]	@ (8001f48 <MX_SPI2_Init+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001eec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ef0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efe:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f14:	2228      	movs	r2, #40	@ 0x28
 8001f16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f1e:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f24:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f30:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <MX_SPI2_Init+0x64>)
 8001f32:	f003 fca9 	bl	8005888 <HAL_SPI_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f3c:	f000 fa24 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000238 	.word	0x20000238
 8001f48:	40003800 	.word	0x40003800

08001f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b096      	sub	sp, #88	@ 0x58
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2220      	movs	r2, #32
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f007 f943 	bl	8009210 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001f8c:	4a3e      	ldr	r2, [pc, #248]	@ (8002088 <MX_TIM1_Init+0x13c>)
 8001f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001f90:	4b3c      	ldr	r3, [pc, #240]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001f92:	2214      	movs	r2, #20
 8001f94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001f9c:	4b39      	ldr	r3, [pc, #228]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001f9e:	22c8      	movs	r2, #200	@ 0xc8
 8001fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa2:	4b38      	ldr	r3, [pc, #224]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fa8:	4b36      	ldr	r3, [pc, #216]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fae:	4b35      	ldr	r3, [pc, #212]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fb4:	4833      	ldr	r0, [pc, #204]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001fb6:	f004 fa39 	bl	800642c <HAL_TIM_Base_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001fc0:	f000 f9e2 	bl	8002388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001fce:	4619      	mov	r1, r3
 8001fd0:	482c      	ldr	r0, [pc, #176]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001fd2:	f004 fecd 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001fdc:	f000 f9d4 	bl	8002388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe0:	4828      	ldr	r0, [pc, #160]	@ (8002084 <MX_TIM1_Init+0x138>)
 8001fe2:	f004 fa72 	bl	80064ca <HAL_TIM_PWM_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001fec:	f000 f9cc 	bl	8002388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4821      	ldr	r0, [pc, #132]	@ (8002084 <MX_TIM1_Init+0x138>)
 8002000:	f005 fa82 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800200a:	f000 f9bd 	bl	8002388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800200e:	2360      	movs	r3, #96	@ 0x60
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 500;
 8002012:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002016:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800202c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002030:	2208      	movs	r2, #8
 8002032:	4619      	mov	r1, r3
 8002034:	4813      	ldr	r0, [pc, #76]	@ (8002084 <MX_TIM1_Init+0x138>)
 8002036:	f004 fdd9 	bl	8006bec <HAL_TIM_PWM_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002040:	f000 f9a2 	bl	8002388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4807      	ldr	r0, [pc, #28]	@ (8002084 <MX_TIM1_Init+0x138>)
 8002068:	f005 fabc 	bl	80075e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002072:	f000 f989 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002076:	4803      	ldr	r0, [pc, #12]	@ (8002084 <MX_TIM1_Init+0x138>)
 8002078:	f001 fd96 	bl	8003ba8 <HAL_TIM_MspPostInit>

}
 800207c:	bf00      	nop
 800207e:	3758      	adds	r7, #88	@ 0x58
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000290 	.word	0x20000290
 8002088:	40010000 	.word	0x40010000

0800208c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	@ 0x30
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	2224      	movs	r2, #36	@ 0x24
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f007 f8b8 	bl	8009210 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a8:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020d0:	2303      	movs	r3, #3
 80020d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020d8:	2301      	movs	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020e8:	2301      	movs	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	4619      	mov	r1, r3
 80020fa:	480d      	ldr	r0, [pc, #52]	@ (8002130 <MX_TIM2_Init+0xa4>)
 80020fc:	f004 fb52 	bl	80067a4 <HAL_TIM_Encoder_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002106:	f000 f93f 	bl	8002388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	@ (8002130 <MX_TIM2_Init+0xa4>)
 8002118:	f005 f9f6 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002122:	f000 f931 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3730      	adds	r7, #48	@ 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200002d8 	.word	0x200002d8

08002134 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f007 f864 	bl	8009210 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002150:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 8002152:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <MX_TIM4_Init+0xa4>)
 8002154:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002156:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 8002164:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002168:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002170:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 8002172:	2280      	movs	r2, #128	@ 0x80
 8002174:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002176:	2303      	movs	r3, #3
 8002178:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800217e:	2301      	movs	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800218e:	2301      	movs	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	4619      	mov	r1, r3
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 80021a2:	f004 faff 	bl	80067a4 <HAL_TIM_Encoder_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80021ac:	f000 f8ec 	bl	8002388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <MX_TIM4_Init+0xa0>)
 80021be:	f005 f9a3 	bl	8007508 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80021c8:	f000 f8de 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	3730      	adds	r7, #48	@ 0x30
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000320 	.word	0x20000320
 80021d8:	40000800 	.word	0x40000800

080021dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <MX_USART6_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <MX_USART6_UART_Init+0x4c>)
 8002214:	f005 fa4c 	bl	80076b0 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f000 f8b3 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000368 	.word	0x20000368
 800222c:	40011400 	.word	0x40011400

08002230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <MX_GPIO_Init+0x148>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a4a      	ldr	r2, [pc, #296]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	4b44      	ldr	r3, [pc, #272]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a43      	ldr	r2, [pc, #268]	@ (8002378 <MX_GPIO_Init+0x148>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4b3d      	ldr	r3, [pc, #244]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a3c      	ldr	r2, [pc, #240]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b3a      	ldr	r3, [pc, #232]	@ (8002378 <MX_GPIO_Init+0x148>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buildin_LED_GPIO_Port, Buildin_LED_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022a0:	4836      	ldr	r0, [pc, #216]	@ (800237c <MX_GPIO_Init+0x14c>)
 80022a2:	f002 fe41 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_IN1_Pin|MOTOR_IN2_Pin|EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80022ac:	4834      	ldr	r0, [pc, #208]	@ (8002380 <MX_GPIO_Init+0x150>)
 80022ae:	f002 fe3b 	bl	8004f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN3_Pin|MOTOR_IN4_Pin|Chip_Select_Pin|LED_LEFT_Pin
 80022b2:	2200      	movs	r2, #0
 80022b4:	f241 3133 	movw	r1, #4915	@ 0x1333
 80022b8:	4832      	ldr	r0, [pc, #200]	@ (8002384 <MX_GPIO_Init+0x154>)
 80022ba:	f002 fe35 	bl	8004f28 <HAL_GPIO_WritePin>
                          |LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin|EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Buildin_LED_Pin */
  GPIO_InitStruct.Pin = Buildin_LED_Pin;
 80022be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buildin_LED_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	4829      	ldr	r0, [pc, #164]	@ (800237c <MX_GPIO_Init+0x14c>)
 80022d8:	f002 fca2 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 80022dc:	2302      	movs	r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	4619      	mov	r1, r3
 80022f0:	4823      	ldr	r0, [pc, #140]	@ (8002380 <MX_GPIO_Init+0x150>)
 80022f2:	f002 fc95 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN1_Pin MOTOR_IN2_Pin EMIT_FRONT_LEFT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin|EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin;
 80022f6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80022fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4619      	mov	r1, r3
 800230e:	481c      	ldr	r0, [pc, #112]	@ (8002380 <MX_GPIO_Init+0x150>)
 8002310:	f002 fc86 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN3_Pin MOTOR_IN4_Pin Chip_Select_Pin LED_LEFT_Pin
                           LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin EMIT_FRONT_RIGHT_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin|Chip_Select_Pin|LED_LEFT_Pin
 8002314:	f241 3333 	movw	r3, #4915	@ 0x1333
 8002318:	60fb      	str	r3, [r7, #12]
                          |LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin|EMIT_FRONT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	2301      	movs	r3, #1
 800231c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 030c 	add.w	r3, r7, #12
 800232a:	4619      	mov	r1, r3
 800232c:	4815      	ldr	r0, [pc, #84]	@ (8002384 <MX_GPIO_Init+0x154>)
 800232e:	f002 fc77 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002338:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800233c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 030c 	add.w	r3, r7, #12
 8002346:	4619      	mov	r1, r3
 8002348:	480e      	ldr	r0, [pc, #56]	@ (8002384 <MX_GPIO_Init+0x154>)
 800234a:	f002 fc69 	bl	8004c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2105      	movs	r1, #5
 8002352:	2007      	movs	r0, #7
 8002354:	f002 fb9b 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002358:	2007      	movs	r0, #7
 800235a:	f002 fbb4 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2105      	movs	r1, #5
 8002362:	2028      	movs	r0, #40	@ 0x28
 8002364:	f002 fb93 	bl	8004a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002368:	2028      	movs	r0, #40	@ 0x28
 800236a:	f002 fbac 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400

08002388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002390:	2110      	movs	r1, #16
 8002392:	4806      	ldr	r0, [pc, #24]	@ (80023ac <Error_Handler+0x24>)
 8002394:	f002 fde1 	bl	8004f5a <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002398:	2120      	movs	r1, #32
 800239a:	4804      	ldr	r0, [pc, #16]	@ (80023ac <Error_Handler+0x24>)
 800239c:	f002 fddd 	bl	8004f5a <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80023a0:	2064      	movs	r0, #100	@ 0x64
 80023a2:	f001 fe83 	bl	80040ac <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80023a6:	bf00      	nop
 80023a8:	e7f2      	b.n	8002390 <Error_Handler+0x8>
 80023aa:	bf00      	nop
 80023ac:	40020400 	.word	0x40020400

080023b0 <championship_micromouse_init>:

/**
 * @brief Initialize championship micromouse system with MMS integration
 */
void championship_micromouse_init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
    // Initialize championship maze
    initialize_championship_maze();
 80023b4:	f000 f842 	bl	800243c <initialize_championship_maze>

    // Initialize robot state
    robot.x = 0;
 80023b8:	4b18      	ldr	r3, [pc, #96]	@ (800241c <championship_micromouse_init+0x6c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80023be:	4b17      	ldr	r3, [pc, #92]	@ (800241c <championship_micromouse_init+0x6c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80023c4:	4b15      	ldr	r3, [pc, #84]	@ (800241c <championship_micromouse_init+0x6c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80023ca:	4b14      	ldr	r3, [pc, #80]	@ (800241c <championship_micromouse_init+0x6c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <championship_micromouse_init+0x6c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <championship_micromouse_init+0x6c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]

    // Initialize sensors
    memset(&sensors, 0, sizeof(sensors));
 80023dc:	220e      	movs	r2, #14
 80023de:	2100      	movs	r1, #0
 80023e0:	480f      	ldr	r0, [pc, #60]	@ (8002420 <championship_micromouse_init+0x70>)
 80023e2:	f006 ff15 	bl	8009210 <memset>
    memset(&gyro, 0, sizeof(gyro));
 80023e6:	2212      	movs	r2, #18
 80023e8:	2100      	movs	r1, #0
 80023ea:	480e      	ldr	r0, [pc, #56]	@ (8002424 <championship_micromouse_init+0x74>)
 80023ec:	f006 ff10 	bl	8009210 <memset>
    memset(&encoders, 0, sizeof(encoders));
 80023f0:	2210      	movs	r2, #16
 80023f2:	2100      	movs	r1, #0
 80023f4:	480c      	ldr	r0, [pc, #48]	@ (8002428 <championship_micromouse_init+0x78>)
 80023f6:	f006 ff0b 	bl	8009210 <memset>

    // Initialize championship path analysis
    exploration_steps = 0;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <championship_micromouse_init+0x7c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <championship_micromouse_init+0x80>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

    // Initialize gyroscope
    mpu9250_init();
 8002406:	f7ff fb6d 	bl	8001ae4 <mpu9250_init>

    send_bluetooth_message("Championship micromouse system initialized\r\n");
 800240a:	480a      	ldr	r0, [pc, #40]	@ (8002434 <championship_micromouse_init+0x84>)
 800240c:	f7ff fa74 	bl	80018f8 <send_bluetooth_message>
    send_bluetooth_message("Based on MMS championship algorithms\r\n");
 8002410:	4809      	ldr	r0, [pc, #36]	@ (8002438 <championship_micromouse_init+0x88>)
 8002412:	f7ff fa71 	bl	80018f8 <send_bluetooth_message>
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200013b0 	.word	0x200013b0
 8002420:	200013c4 	.word	0x200013c4
 8002424:	200013d4 	.word	0x200013d4
 8002428:	200013e8 	.word	0x200013e8
 800242c:	200013fc 	.word	0x200013fc
 8002430:	20001400 	.word	0x20001400
 8002434:	0800c32c 	.word	0x0800c32c
 8002438:	0800c35c 	.word	0x0800c35c

0800243c <initialize_championship_maze>:

/**
 * @brief Initialize maze with championship settings (MMS style)
 */
void initialize_championship_maze(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
    // Initialize all cells
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e03e      	b.n	80024c6 <initialize_championship_maze+0x8a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	e035      	b.n	80024ba <initialize_championship_maze+0x7e>
            maze[x][y].distance = MAX_DISTANCE;
 800244e:	4939      	ldr	r1, [pc, #228]	@ (8002534 <initialize_championship_maze+0xf8>)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	011a      	lsls	r2, r3, #4
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4413      	add	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	440b      	add	r3, r1
 800245c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002460:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8002462:	4934      	ldr	r1, [pc, #208]	@ (8002534 <initialize_championship_maze+0xf8>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	011a      	lsls	r2, r3, #4
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4413      	add	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	440b      	add	r3, r1
 8002470:	3304      	adds	r3, #4
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 8002476:	492f      	ldr	r1, [pc, #188]	@ (8002534 <initialize_championship_maze+0xf8>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	011a      	lsls	r2, r3, #4
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4413      	add	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	440b      	add	r3, r1
 8002484:	330c      	adds	r3, #12
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	e00e      	b.n	80024ae <initialize_championship_maze+0x72>
                maze[x][y].walls[i] = false;
 8002490:	4928      	ldr	r1, [pc, #160]	@ (8002534 <initialize_championship_maze+0xf8>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	011a      	lsls	r2, r3, #4
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4413      	add	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	18ca      	adds	r2, r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3305      	adds	r3, #5
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3301      	adds	r3, #1
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	dded      	ble.n	8002490 <initialize_championship_maze+0x54>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3301      	adds	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	ddc6      	ble.n	800244e <initialize_championship_maze+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3301      	adds	r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	ddbd      	ble.n	8002448 <initialize_championship_maze+0xc>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	e01f      	b.n	8002512 <initialize_championship_maze+0xd6>
        maze[i][0].walls[SOUTH] = true;           // South boundary
 80024d2:	4a18      	ldr	r2, [pc, #96]	@ (8002534 <initialize_championship_maze+0xf8>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	4413      	add	r3, r2
 80024da:	3307      	adds	r3, #7
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true; // North boundary
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <initialize_championship_maze+0xf8>)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	4413      	add	r3, r2
 80024e8:	33f5      	adds	r3, #245	@ 0xf5
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;            // West boundary
 80024ee:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <initialize_championship_maze+0xf8>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4413      	add	r3, r2
 80024f6:	3308      	adds	r3, #8
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;  // East boundary
 80024fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <initialize_championship_maze+0xf8>)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	dddc      	ble.n	80024d2 <initialize_championship_maze+0x96>
    }

    // Mark start position as visited
    maze[0][0].visited = true;
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <initialize_championship_maze+0xf8>)
 800251a:	2201      	movs	r2, #1
 800251c:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <initialize_championship_maze+0xf8>)
 8002520:	2201      	movs	r2, #1
 8002522:	60da      	str	r2, [r3, #12]

    send_bluetooth_message("Championship maze initialized with boundary walls\r\n");
 8002524:	4804      	ldr	r0, [pc, #16]	@ (8002538 <initialize_championship_maze+0xfc>)
 8002526:	f7ff f9e7 	bl	80018f8 <send_bluetooth_message>
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200003b0 	.word	0x200003b0
 8002538:	0800c384 	.word	0x0800c384

0800253c <championship_flood_fill>:
/**
 * @brief Championship flood fill from GOAL position (MMS algorithm)
 * This is the key difference - we flood from destination, not robot
 */
void championship_flood_fill(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 8002542:	af00      	add	r7, sp, #0
    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800254a:	e01d      	b.n	8002588 <championship_flood_fill+0x4c>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002552:	e010      	b.n	8002576 <championship_flood_fill+0x3a>
            maze[x][y].distance = MAX_DISTANCE;
 8002554:	49c3      	ldr	r1, [pc, #780]	@ (8002864 <championship_flood_fill+0x328>)
 8002556:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800255a:	011a      	lsls	r2, r3, #4
 800255c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002560:	4413      	add	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	440b      	add	r3, r1
 8002566:	f242 720f 	movw	r2, #9999	@ 0x270f
 800256a:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 800256c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002570:	3301      	adds	r3, #1
 8002572:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002576:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 800257a:	2b0f      	cmp	r3, #15
 800257c:	ddea      	ble.n	8002554 <championship_flood_fill+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 800257e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8002588:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800258c:	2b0f      	cmp	r3, #15
 800258e:	dddd      	ble.n	800254c <championship_flood_fill+0x10>
        }
    }

    // Set goal distances to 0
    if (!robot.center_reached) {
 8002590:	4bb5      	ldr	r3, [pc, #724]	@ (8002868 <championship_flood_fill+0x32c>)
 8002592:	7b1b      	ldrb	r3, [r3, #12]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d02c      	beq.n	80025f8 <championship_flood_fill+0xbc>
        // Exploring to center - flood from center
        maze[goal_x1][goal_y1].distance = 0;
 800259e:	4bb3      	ldr	r3, [pc, #716]	@ (800286c <championship_flood_fill+0x330>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	4bb3      	ldr	r3, [pc, #716]	@ (8002870 <championship_flood_fill+0x334>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	49af      	ldr	r1, [pc, #700]	@ (8002864 <championship_flood_fill+0x328>)
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	440b      	add	r3, r1
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y1].distance = 0;
 80025b4:	4baf      	ldr	r3, [pc, #700]	@ (8002874 <championship_flood_fill+0x338>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4bad      	ldr	r3, [pc, #692]	@ (8002870 <championship_flood_fill+0x334>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	49a9      	ldr	r1, [pc, #676]	@ (8002864 <championship_flood_fill+0x328>)
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	440b      	add	r3, r1
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
        maze[goal_x1][goal_y2].distance = 0;
 80025ca:	4ba8      	ldr	r3, [pc, #672]	@ (800286c <championship_flood_fill+0x330>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4baa      	ldr	r3, [pc, #680]	@ (8002878 <championship_flood_fill+0x33c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	49a4      	ldr	r1, [pc, #656]	@ (8002864 <championship_flood_fill+0x328>)
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	4413      	add	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	440b      	add	r3, r1
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y2].distance = 0;
 80025e0:	4ba4      	ldr	r3, [pc, #656]	@ (8002874 <championship_flood_fill+0x338>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4ba4      	ldr	r3, [pc, #656]	@ (8002878 <championship_flood_fill+0x33c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	499e      	ldr	r1, [pc, #632]	@ (8002864 <championship_flood_fill+0x328>)
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	4413      	add	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	440b      	add	r3, r1
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e002      	b.n	80025fe <championship_flood_fill+0xc2>
    } else {
        // Returning to start - flood from start
        maze[0][0].distance = 0;
 80025f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002864 <championship_flood_fill+0x328>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    }

    // Queue implementation for BFS flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820

    if (!robot.center_reached) {
 800260a:	4b97      	ldr	r3, [pc, #604]	@ (8002868 <championship_flood_fill+0x32c>)
 800260c:	7b1b      	ldrb	r3, [r3, #12]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05c      	beq.n	80026d2 <championship_flood_fill+0x196>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8002618:	4b94      	ldr	r3, [pc, #592]	@ (800286c <championship_flood_fill+0x330>)
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002620:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002624:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800262c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002636:	4a8e      	ldr	r2, [pc, #568]	@ (8002870 <championship_flood_fill+0x334>)
 8002638:	6811      	ldr	r1, [r2, #0]
 800263a:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 800263e:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 8002646:	4b8b      	ldr	r3, [pc, #556]	@ (8002874 <championship_flood_fill+0x338>)
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800264e:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002652:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800265a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002664:	4a82      	ldr	r2, [pc, #520]	@ (8002870 <championship_flood_fill+0x334>)
 8002666:	6811      	ldr	r1, [r2, #0]
 8002668:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 800266c:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8002674:	4b7d      	ldr	r3, [pc, #500]	@ (800286c <championship_flood_fill+0x330>)
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800267c:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002680:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002688:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002692:	4a79      	ldr	r2, [pc, #484]	@ (8002878 <championship_flood_fill+0x33c>)
 8002694:	6811      	ldr	r1, [r2, #0]
 8002696:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 800269a:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 800269e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 80026a2:	4b74      	ldr	r3, [pc, #464]	@ (8002874 <championship_flood_fill+0x338>)
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80026aa:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80026ae:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80026b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80026b6:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80026c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002878 <championship_flood_fill+0x33c>)
 80026c2:	6811      	ldr	r1, [r2, #0]
 80026c4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80026c8:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 80026cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80026d0:	e014      	b.n	80026fc <championship_flood_fill+0x1c0>
    } else {
        queue_x[queue_tail] = 0; queue_y[queue_tail++] = 0;
 80026d2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80026d6:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80026da:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80026de:	2100      	movs	r1, #0
 80026e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80026e4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80026ee:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80026f2:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 80026f6:	2100      	movs	r1, #0
 80026f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Championship flood fill algorithm
    while (queue_head < queue_tail) {
 8002702:	e09e      	b.n	8002842 <championship_flood_fill+0x306>
        int x = queue_x[queue_head];
 8002704:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002708:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800270c:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8002710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002714:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
        int y = queue_y[queue_head++];
 8002718:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	f8c7 2824 	str.w	r2, [r7, #2084]	@ 0x824
 8002722:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002726:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8002738:	e07e      	b.n	8002838 <championship_flood_fill+0x2fc>
            int nx = x + dx[dir];
 800273a:	4a50      	ldr	r2, [pc, #320]	@ (800287c <championship_flood_fill+0x340>)
 800273c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8002748:	4413      	add	r3, r2
 800274a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
            int ny = y + dy[dir];
 800274e:	4a4c      	ldr	r2, [pc, #304]	@ (8002880 <championship_flood_fill+0x344>)
 8002750:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 800275c:	4413      	add	r3, r2
 800275e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

            // Check bounds and walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002762:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002766:	2b00      	cmp	r3, #0
 8002768:	db61      	blt.n	800282e <championship_flood_fill+0x2f2>
 800276a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800276e:	2b0f      	cmp	r3, #15
 8002770:	dc5d      	bgt.n	800282e <championship_flood_fill+0x2f2>
 8002772:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002776:	2b00      	cmp	r3, #0
 8002778:	db59      	blt.n	800282e <championship_flood_fill+0x2f2>
 800277a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800277e:	2b0f      	cmp	r3, #15
 8002780:	dc55      	bgt.n	800282e <championship_flood_fill+0x2f2>
                !maze[x][y].walls[dir]) {
 8002782:	4938      	ldr	r1, [pc, #224]	@ (8002864 <championship_flood_fill+0x328>)
 8002784:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002788:	011a      	lsls	r2, r3, #4
 800278a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800278e:	4413      	add	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	18ca      	adds	r2, r1, r3
 8002794:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002798:	4413      	add	r3, r2
 800279a:	3305      	adds	r3, #5
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	f083 0301 	eor.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d042      	beq.n	800282e <championship_flood_fill+0x2f2>

                int new_dist = maze[x][y].distance + 1;
 80027a8:	492e      	ldr	r1, [pc, #184]	@ (8002864 <championship_flood_fill+0x328>)
 80027aa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80027ae:	011a      	lsls	r2, r3, #4
 80027b0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 80027b4:	4413      	add	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	440b      	add	r3, r1
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

                // Update if we found a shorter path
                if (new_dist < maze[nx][ny].distance) {
 80027c2:	4928      	ldr	r1, [pc, #160]	@ (8002864 <championship_flood_fill+0x328>)
 80027c4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80027c8:	011a      	lsls	r2, r3, #4
 80027ca:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80027ce:	4413      	add	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	440b      	add	r3, r1
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 80027da:	429a      	cmp	r2, r3
 80027dc:	da27      	bge.n	800282e <championship_flood_fill+0x2f2>
                    maze[nx][ny].distance = new_dist;
 80027de:	4921      	ldr	r1, [pc, #132]	@ (8002864 <championship_flood_fill+0x328>)
 80027e0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80027e4:	011a      	lsls	r2, r3, #4
 80027e6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80027ea:	4413      	add	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	440b      	add	r3, r1
 80027f0:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 80027f4:	601a      	str	r2, [r3, #0]
                    queue_x[queue_tail] = nx;
 80027f6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80027fa:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80027fe:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002802:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8002806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    queue_y[queue_tail++] = ny;
 800280a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002814:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002818:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 800281c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8002820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    updates++;
 8002824:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8002828:	3301      	adds	r3, #1
 800282a:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
        for (int dir = 0; dir < 4; dir++) {
 800282e:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002832:	3301      	adds	r3, #1
 8002834:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8002838:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800283c:	2b03      	cmp	r3, #3
 800283e:	f77f af7c 	ble.w	800273a <championship_flood_fill+0x1fe>
    while (queue_head < queue_tail) {
 8002842:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8002846:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800284a:	429a      	cmp	r2, r3
 800284c:	f6ff af5a 	blt.w	8002704 <championship_flood_fill+0x1c8>
            }
        }
    }

    // Debug output via Bluetooth
    send_bluetooth_printf("Championship flood fill: %d updates\r\n", updates);
 8002850:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 8002854:	480b      	ldr	r0, [pc, #44]	@ (8002884 <championship_flood_fill+0x348>)
 8002856:	f7ff f865 	bl	8001924 <send_bluetooth_printf>
}
 800285a:	bf00      	nop
 800285c:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200003b0 	.word	0x200003b0
 8002868:	200013b0 	.word	0x200013b0
 800286c:	0800c924 	.word	0x0800c924
 8002870:	0800c928 	.word	0x0800c928
 8002874:	0800c92c 	.word	0x0800c92c
 8002878:	0800c930 	.word	0x0800c930
 800287c:	0800c904 	.word	0x0800c904
 8002880:	0800c914 	.word	0x0800c914
 8002884:	0800c3b8 	.word	0x0800c3b8

08002888 <get_championship_direction>:

/**
 * @brief Championship direction selection - NEVER gets stuck (MMS algorithm)
 */
int get_championship_direction(void)
{
 8002888:	b480      	push	{r7}
 800288a:	b093      	sub	sp, #76	@ 0x4c
 800288c:	af00      	add	r7, sp, #0
    int best_dir = robot.direction; // Default to current direction
 800288e:	4b88      	ldr	r3, [pc, #544]	@ (8002ab0 <get_championship_direction+0x228>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8002894:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 800289a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Priority order: straight, right, left, back
    int priority_dirs[4];
    priority_dirs[0] = robot.direction;
 80028a6:	4b82      	ldr	r3, [pc, #520]	@ (8002ab0 <get_championship_direction+0x228>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	603b      	str	r3, [r7, #0]
    priority_dirs[1] = (robot.direction + 1) % 4;
 80028ac:	4b80      	ldr	r3, [pc, #512]	@ (8002ab0 <get_championship_direction+0x228>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	3301      	adds	r3, #1
 80028b2:	425a      	negs	r2, r3
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	f002 0203 	and.w	r2, r2, #3
 80028bc:	bf58      	it	pl
 80028be:	4253      	negpl	r3, r2
 80028c0:	607b      	str	r3, [r7, #4]
    priority_dirs[2] = (robot.direction + 3) % 4;
 80028c2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <get_championship_direction+0x228>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	3303      	adds	r3, #3
 80028c8:	425a      	negs	r2, r3
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	bf58      	it	pl
 80028d4:	4253      	negpl	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
    priority_dirs[3] = (robot.direction + 2) % 4;
 80028d8:	4b75      	ldr	r3, [pc, #468]	@ (8002ab0 <get_championship_direction+0x228>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	3302      	adds	r3, #2
 80028de:	425a      	negs	r2, r3
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	bf58      	it	pl
 80028ea:	4253      	negpl	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

    // First pass: look for unvisited cells
    for (int p = 0; p < 4; p++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f2:	e05b      	b.n	80029ac <get_championship_direction+0x124>
        int dir = priority_dirs[p];
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	3348      	adds	r3, #72	@ 0x48
 80028fa:	443b      	add	r3, r7
 80028fc:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8002900:	61bb      	str	r3, [r7, #24]
        int nx = robot.x + dx[dir];
 8002902:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <get_championship_direction+0x228>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	496b      	ldr	r1, [pc, #428]	@ (8002ab4 <get_championship_direction+0x22c>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8002912:	4b67      	ldr	r3, [pc, #412]	@ (8002ab0 <get_championship_direction+0x228>)
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4968      	ldr	r1, [pc, #416]	@ (8002ab8 <get_championship_direction+0x230>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800291e:	4413      	add	r3, r2
 8002920:	613b      	str	r3, [r7, #16]

        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db3e      	blt.n	80029a6 <get_championship_direction+0x11e>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	dc3b      	bgt.n	80029a6 <get_championship_direction+0x11e>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db38      	blt.n	80029a6 <get_championship_direction+0x11e>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	dc35      	bgt.n	80029a6 <get_championship_direction+0x11e>
            !maze[robot.x][robot.y].walls[dir]) {
 800293a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab0 <get_championship_direction+0x228>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab0 <get_championship_direction+0x228>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	495e      	ldr	r1, [pc, #376]	@ (8002abc <get_championship_direction+0x234>)
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	4413      	add	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	18ca      	adds	r2, r1, r3
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	3305      	adds	r3, #5
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d023      	beq.n	80029a6 <get_championship_direction+0x11e>

            // Prefer unvisited cells
            if (maze[nx][ny].visit_count == 0) {
 800295e:	4957      	ldr	r1, [pc, #348]	@ (8002abc <get_championship_direction+0x234>)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	011a      	lsls	r2, r3, #4
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	440b      	add	r3, r1
 800296c:	330c      	adds	r3, #12
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <get_championship_direction+0x11e>
                found_unvisited = true;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if (maze[nx][ny].distance < min_distance) {
 800297a:	4950      	ldr	r1, [pc, #320]	@ (8002abc <get_championship_direction+0x234>)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	440b      	add	r3, r1
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800298c:	429a      	cmp	r2, r3
 800298e:	dd0a      	ble.n	80029a6 <get_championship_direction+0x11e>
                    min_distance = maze[nx][ny].distance;
 8002990:	494a      	ldr	r1, [pc, #296]	@ (8002abc <get_championship_direction+0x234>)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	011a      	lsls	r2, r3, #4
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	643b      	str	r3, [r7, #64]	@ 0x40
                    best_dir = dir;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	647b      	str	r3, [r7, #68]	@ 0x44
    for (int p = 0; p < 4; p++) {
 80029a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a8:	3301      	adds	r3, #1
 80029aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	dda0      	ble.n	80028f4 <get_championship_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited, find least visited with lowest distance
    if (!found_unvisited) {
 80029b2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80029b6:	f083 0301 	eor.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d06f      	beq.n	8002aa0 <get_championship_direction+0x218>
        for (int p = 0; p < 4; p++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80029c4:	e069      	b.n	8002a9a <get_championship_direction+0x212>
            int dir = priority_dirs[p];
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	3348      	adds	r3, #72	@ 0x48
 80029cc:	443b      	add	r3, r7
 80029ce:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int nx = robot.x + dx[dir];
 80029d4:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <get_championship_direction+0x228>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4936      	ldr	r1, [pc, #216]	@ (8002ab4 <get_championship_direction+0x22c>)
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029e0:	4413      	add	r3, r2
 80029e2:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 80029e4:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <get_championship_direction+0x228>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4933      	ldr	r1, [pc, #204]	@ (8002ab8 <get_championship_direction+0x230>)
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029f0:	4413      	add	r3, r2
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80029f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db4c      	blt.n	8002a94 <get_championship_direction+0x20c>
 80029fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	dc49      	bgt.n	8002a94 <get_championship_direction+0x20c>
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	db46      	blt.n	8002a94 <get_championship_direction+0x20c>
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	dc43      	bgt.n	8002a94 <get_championship_direction+0x20c>
                !maze[robot.x][robot.y].walls[dir]) {
 8002a0c:	4b28      	ldr	r3, [pc, #160]	@ (8002ab0 <get_championship_direction+0x228>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b27      	ldr	r3, [pc, #156]	@ (8002ab0 <get_championship_direction+0x228>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4929      	ldr	r1, [pc, #164]	@ (8002abc <get_championship_direction+0x234>)
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	18ca      	adds	r2, r1, r3
 8002a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a20:	4413      	add	r3, r2
 8002a22:	3305      	adds	r3, #5
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f083 0301 	eor.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d031      	beq.n	8002a94 <get_championship_direction+0x20c>

                int neighbor_dist = maze[nx][ny].distance;
 8002a30:	4922      	ldr	r1, [pc, #136]	@ (8002abc <get_championship_direction+0x234>)
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	011a      	lsls	r2, r3, #4
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	4413      	add	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	623b      	str	r3, [r7, #32]
                int neighbor_visits = maze[nx][ny].visit_count;
 8002a42:	491e      	ldr	r1, [pc, #120]	@ (8002abc <get_championship_direction+0x234>)
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a46:	011a      	lsls	r2, r3, #4
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	4413      	add	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	440b      	add	r3, r1
 8002a50:	330c      	adds	r3, #12
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61fb      	str	r3, [r7, #28]

                // Choose based on distance first, then visit count
                if (neighbor_dist < min_distance ||
 8002a56:	6a3a      	ldr	r2, [r7, #32]
 8002a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	db14      	blt.n	8002a88 <get_championship_direction+0x200>
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d103      	bne.n	8002a6e <get_championship_direction+0x1e6>
                    (neighbor_dist == min_distance && neighbor_visits < min_visits) ||
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	db0c      	blt.n	8002a88 <get_championship_direction+0x200>
 8002a6e:	6a3a      	ldr	r2, [r7, #32]
 8002a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10e      	bne.n	8002a94 <get_championship_direction+0x20c>
                    (neighbor_dist == min_distance && neighbor_visits == min_visits && dir == robot.direction)) {
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10a      	bne.n	8002a94 <get_championship_direction+0x20c>
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <get_championship_direction+0x228>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d105      	bne.n	8002a94 <get_championship_direction+0x20c>
                    min_distance = neighbor_dist;
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	643b      	str	r3, [r7, #64]	@ 0x40
                    min_visits = neighbor_visits;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    best_dir = dir;
 8002a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a92:	647b      	str	r3, [r7, #68]	@ 0x44
        for (int p = 0; p < 4; p++) {
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	3301      	adds	r3, #1
 8002a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	dd92      	ble.n	80029c6 <get_championship_direction+0x13e>
                }
            }
        }
    }

    return best_dir;
 8002aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	374c      	adds	r7, #76	@ 0x4c
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	200013b0 	.word	0x200013b0
 8002ab4:	0800c904 	.word	0x0800c904
 8002ab8:	0800c914 	.word	0x0800c914
 8002abc:	200003b0 	.word	0x200003b0

08002ac0 <championship_update_walls>:

/**
 * @brief Update walls based on sensor readings (MMS style)
 */
void championship_update_walls(void)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b08b      	sub	sp, #44	@ 0x2c
 8002ac4:	af02      	add	r7, sp, #8
    // Update sensors first
    update_sensors();
 8002ac6:	f000 fe5b 	bl	8003780 <update_sensors>

    // Update walls based on current direction
    if (sensors.wall_front) {
 8002aca:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf4 <championship_update_walls+0x234>)
 8002acc:	7a9b      	ldrb	r3, [r3, #10]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d041      	beq.n	8002b56 <championship_update_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 8002ad2:	4b89      	ldr	r3, [pc, #548]	@ (8002cf8 <championship_update_walls+0x238>)
 8002ad4:	6819      	ldr	r1, [r3, #0]
 8002ad6:	4b88      	ldr	r3, [pc, #544]	@ (8002cf8 <championship_update_walls+0x238>)
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	4b87      	ldr	r3, [pc, #540]	@ (8002cf8 <championship_update_walls+0x238>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4887      	ldr	r0, [pc, #540]	@ (8002cfc <championship_update_walls+0x23c>)
 8002ae0:	0109      	lsls	r1, r1, #4
 8002ae2:	440a      	add	r2, r1
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	4402      	add	r2, r0
 8002ae8:	4413      	add	r3, r2
 8002aea:	3305      	adds	r3, #5
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 8002af0:	4b81      	ldr	r3, [pc, #516]	@ (8002cf8 <championship_update_walls+0x238>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b80      	ldr	r3, [pc, #512]	@ (8002cf8 <championship_update_walls+0x238>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4981      	ldr	r1, [pc, #516]	@ (8002d00 <championship_update_walls+0x240>)
 8002afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002afe:	4413      	add	r3, r2
 8002b00:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 8002b02:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	497e      	ldr	r1, [pc, #504]	@ (8002d04 <championship_update_walls+0x244>)
 8002b0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b10:	4413      	add	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db1d      	blt.n	8002b56 <championship_update_walls+0x96>
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	2b0f      	cmp	r3, #15
 8002b1e:	dc1a      	bgt.n	8002b56 <championship_update_walls+0x96>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db17      	blt.n	8002b56 <championship_update_walls+0x96>
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b0f      	cmp	r3, #15
 8002b2a:	dc14      	bgt.n	8002b56 <championship_update_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 8002b2c:	4b72      	ldr	r3, [pc, #456]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	3302      	adds	r3, #2
 8002b32:	425a      	negs	r2, r3
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	f002 0203 	and.w	r2, r2, #3
 8002b3c:	bf58      	it	pl
 8002b3e:	4253      	negpl	r3, r2
 8002b40:	486e      	ldr	r0, [pc, #440]	@ (8002cfc <championship_update_walls+0x23c>)
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	0111      	lsls	r1, r2, #4
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	440a      	add	r2, r1
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	4402      	add	r2, r0
 8002b4e:	4413      	add	r3, r2
 8002b50:	3305      	adds	r3, #5
 8002b52:	2201      	movs	r2, #1
 8002b54:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 8002b56:	4b67      	ldr	r3, [pc, #412]	@ (8002cf4 <championship_update_walls+0x234>)
 8002b58:	7adb      	ldrb	r3, [r3, #11]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d048      	beq.n	8002bf0 <championship_update_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 8002b5e:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	3303      	adds	r3, #3
 8002b64:	425a      	negs	r2, r3
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	bf58      	it	pl
 8002b70:	4253      	negpl	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 8002b74:	4b60      	ldr	r3, [pc, #384]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	495f      	ldr	r1, [pc, #380]	@ (8002cfc <championship_update_walls+0x23c>)
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	18ca      	adds	r2, r1, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3305      	adds	r3, #5
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[left_dir];
 8002b90:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <championship_update_walls+0x238>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	495a      	ldr	r1, [pc, #360]	@ (8002d00 <championship_update_walls+0x240>)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8002ba0:	4b55      	ldr	r3, [pc, #340]	@ (8002cf8 <championship_update_walls+0x238>)
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	4957      	ldr	r1, [pc, #348]	@ (8002d04 <championship_update_walls+0x244>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bac:	4413      	add	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db1c      	blt.n	8002bf0 <championship_update_walls+0x130>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	dc19      	bgt.n	8002bf0 <championship_update_walls+0x130>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db16      	blt.n	8002bf0 <championship_update_walls+0x130>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	dc13      	bgt.n	8002bf0 <championship_update_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	425a      	negs	r2, r3
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	f002 0203 	and.w	r2, r2, #3
 8002bd6:	bf58      	it	pl
 8002bd8:	4253      	negpl	r3, r2
 8002bda:	4848      	ldr	r0, [pc, #288]	@ (8002cfc <championship_update_walls+0x23c>)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	0111      	lsls	r1, r2, #4
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	440a      	add	r2, r1
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	4402      	add	r2, r0
 8002be8:	4413      	add	r3, r2
 8002bea:	3305      	adds	r3, #5
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 8002bf0:	4b40      	ldr	r3, [pc, #256]	@ (8002cf4 <championship_update_walls+0x234>)
 8002bf2:	7b1b      	ldrb	r3, [r3, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d048      	beq.n	8002c8a <championship_update_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <championship_update_walls+0x238>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	425a      	negs	r2, r3
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	bf58      	it	pl
 8002c0a:	4253      	negpl	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <championship_update_walls+0x238>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <championship_update_walls+0x238>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4939      	ldr	r1, [pc, #228]	@ (8002cfc <championship_update_walls+0x23c>)
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	18ca      	adds	r2, r1, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4413      	add	r3, r2
 8002c24:	3305      	adds	r3, #5
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[right_dir];
 8002c2a:	4b33      	ldr	r3, [pc, #204]	@ (8002cf8 <championship_update_walls+0x238>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4934      	ldr	r1, [pc, #208]	@ (8002d00 <championship_update_walls+0x240>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c36:	4413      	add	r3, r2
 8002c38:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf8 <championship_update_walls+0x238>)
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4931      	ldr	r1, [pc, #196]	@ (8002d04 <championship_update_walls+0x244>)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c46:	4413      	add	r3, r2
 8002c48:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db1c      	blt.n	8002c8a <championship_update_walls+0x1ca>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	dc19      	bgt.n	8002c8a <championship_update_walls+0x1ca>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db16      	blt.n	8002c8a <championship_update_walls+0x1ca>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	dc13      	bgt.n	8002c8a <championship_update_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3302      	adds	r3, #2
 8002c66:	425a      	negs	r2, r3
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	f002 0203 	and.w	r2, r2, #3
 8002c70:	bf58      	it	pl
 8002c72:	4253      	negpl	r3, r2
 8002c74:	4821      	ldr	r0, [pc, #132]	@ (8002cfc <championship_update_walls+0x23c>)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	0111      	lsls	r1, r2, #4
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	440a      	add	r2, r1
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	4402      	add	r2, r0
 8002c82:	4413      	add	r3, r2
 8002c84:	3305      	adds	r3, #5
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
        }
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <championship_update_walls+0x238>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <championship_update_walls+0x238>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	491a      	ldr	r1, [pc, #104]	@ (8002cfc <championship_update_walls+0x23c>)
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	4413      	add	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <championship_update_walls+0x238>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <championship_update_walls+0x238>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4814      	ldr	r0, [pc, #80]	@ (8002cfc <championship_update_walls+0x23c>)
 8002cac:	0111      	lsls	r1, r2, #4
 8002cae:	4419      	add	r1, r3
 8002cb0:	0109      	lsls	r1, r1, #4
 8002cb2:	4401      	add	r1, r0
 8002cb4:	310c      	adds	r1, #12
 8002cb6:	6809      	ldr	r1, [r1, #0]
 8002cb8:	3101      	adds	r1, #1
 8002cba:	4810      	ldr	r0, [pc, #64]	@ (8002cfc <championship_update_walls+0x23c>)
 8002cbc:	0112      	lsls	r2, r2, #4
 8002cbe:	4413      	add	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	4403      	add	r3, r0
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	6019      	str	r1, [r3, #0]

    // Debug output
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <championship_update_walls+0x238>)
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <championship_update_walls+0x238>)
 8002cce:	685a      	ldr	r2, [r3, #4]
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8002cd0:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <championship_update_walls+0x234>)
 8002cd2:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8002cd4:	461c      	mov	r4, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <championship_update_walls+0x234>)
 8002cd8:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8002cda:	4618      	mov	r0, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <championship_update_walls+0x234>)
 8002cde:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	9000      	str	r0, [sp, #0]
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	4808      	ldr	r0, [pc, #32]	@ (8002d08 <championship_update_walls+0x248>)
 8002ce8:	f7fe fe1c 	bl	8001924 <send_bluetooth_printf>
}
 8002cec:	bf00      	nop
 8002cee:	3724      	adds	r7, #36	@ 0x24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	200013c4 	.word	0x200013c4
 8002cf8:	200013b0 	.word	0x200013b0
 8002cfc:	200003b0 	.word	0x200003b0
 8002d00:	0800c904 	.word	0x0800c904
 8002d04:	0800c914 	.word	0x0800c914
 8002d08:	0800c3e0 	.word	0x0800c3e0

08002d0c <turn_to_direction>:

/**
 * @brief Turn robot to face target direction (MMS style)
 */
void turn_to_direction(int target_dir)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    while (robot.direction != target_dir) {
 8002d14:	e041      	b.n	8002d9a <turn_to_direction+0x8e>
        int turn_diff = (target_dir - robot.direction + 4) % 4;
 8002d16:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	3304      	adds	r3, #4
 8002d20:	425a      	negs	r2, r3
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	bf58      	it	pl
 8002d2c:	4253      	negpl	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

        if (turn_diff == 1) {
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10e      	bne.n	8002d54 <turn_to_direction+0x48>
            turn_right();
 8002d36:	f000 fc31 	bl	800359c <turn_right>
            robot.direction = (robot.direction + 1) % 4;
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	425a      	negs	r2, r3
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	f002 0203 	and.w	r2, r2, #3
 8002d4a:	bf58      	it	pl
 8002d4c:	4253      	negpl	r3, r2
 8002d4e:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d50:	6093      	str	r3, [r2, #8]
 8002d52:	e022      	b.n	8002d9a <turn_to_direction+0x8e>
        } else if (turn_diff == 3) {
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d10e      	bne.n	8002d78 <turn_to_direction+0x6c>
            turn_left();
 8002d5a:	f000 fbc3 	bl	80034e4 <turn_left>
            robot.direction = (robot.direction + 3) % 4;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	3303      	adds	r3, #3
 8002d64:	425a      	negs	r2, r3
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	f002 0203 	and.w	r2, r2, #3
 8002d6e:	bf58      	it	pl
 8002d70:	4253      	negpl	r3, r2
 8002d72:	4a0f      	ldr	r2, [pc, #60]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d74:	6093      	str	r3, [r2, #8]
 8002d76:	e010      	b.n	8002d9a <turn_to_direction+0x8e>
        } else if (turn_diff == 2) {
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d10d      	bne.n	8002d9a <turn_to_direction+0x8e>
            turn_around();
 8002d7e:	f000 fc69 	bl	8003654 <turn_around>
            robot.direction = (robot.direction + 2) % 4;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	3302      	adds	r3, #2
 8002d88:	425a      	negs	r2, r3
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	bf58      	it	pl
 8002d94:	4253      	negpl	r3, r2
 8002d96:	4a06      	ldr	r2, [pc, #24]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d98:	6093      	str	r3, [r2, #8]
    while (robot.direction != target_dir) {
 8002d9a:	4b05      	ldr	r3, [pc, #20]	@ (8002db0 <turn_to_direction+0xa4>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1b8      	bne.n	8002d16 <turn_to_direction+0xa>
        }
    }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200013b0 	.word	0x200013b0

08002db4 <championship_move_forward>:

/**
 * @brief Move robot forward one cell (MMS style)
 */
bool championship_move_forward(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
    // Check for wall before moving
    if (sensors.wall_front) {
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <championship_move_forward+0x34>)
 8002dba:	7a9b      	ldrb	r3, [r3, #10]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <championship_move_forward+0x16>
        send_bluetooth_message("Front wall detected, cannot move\r\n");
 8002dc0:	480a      	ldr	r0, [pc, #40]	@ (8002dec <championship_move_forward+0x38>)
 8002dc2:	f7fe fd99 	bl	80018f8 <send_bluetooth_message>
        return false;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e00c      	b.n	8002de4 <championship_move_forward+0x30>
    }

    move_forward();
 8002dca:	f000 faf9 	bl	80033c0 <move_forward>
    robot.exploration_steps++;
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <championship_move_forward+0x3c>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a06      	ldr	r2, [pc, #24]	@ (8002df0 <championship_move_forward+0x3c>)
 8002dd6:	6113      	str	r3, [r2, #16]
    exploration_steps++;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <championship_move_forward+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a05      	ldr	r2, [pc, #20]	@ (8002df4 <championship_move_forward+0x40>)
 8002de0:	6013      	str	r3, [r2, #0]

    return true;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200013c4 	.word	0x200013c4
 8002dec:	0800c40c 	.word	0x0800c40c
 8002df0:	200013b0 	.word	0x200013b0
 8002df4:	200013fc 	.word	0x200013fc

08002df8 <is_at_goal>:

/**
 * @brief Check if robot is at goal (MMS style)
 */
bool is_at_goal(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <is_at_goal+0x78>)
 8002dfe:	7b1b      	ldrb	r3, [r3, #12]
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01e      	beq.n	8002e48 <is_at_goal+0x50>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8002e0a:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <is_at_goal+0x78>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <is_at_goal+0x7c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d005      	beq.n	8002e22 <is_at_goal+0x2a>
 8002e16:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <is_at_goal+0x78>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <is_at_goal+0x80>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d10d      	bne.n	8002e3e <is_at_goal+0x46>
               (robot.y == goal_y1 || robot.y == goal_y2);
 8002e22:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <is_at_goal+0x78>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <is_at_goal+0x84>)
 8002e28:	681b      	ldr	r3, [r3, #0]
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d005      	beq.n	8002e3a <is_at_goal+0x42>
               (robot.y == goal_y1 || robot.y == goal_y2);
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <is_at_goal+0x78>)
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <is_at_goal+0x88>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d101      	bne.n	8002e3e <is_at_goal+0x46>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <is_at_goal+0x48>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e00d      	b.n	8002e64 <is_at_goal+0x6c>
    } else {
        return robot.x == 0 && robot.y == 0;
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <is_at_goal+0x78>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <is_at_goal+0x64>
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <is_at_goal+0x78>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <is_at_goal+0x64>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <is_at_goal+0x66>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
    }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	200013b0 	.word	0x200013b0
 8002e74:	0800c924 	.word	0x0800c924
 8002e78:	0800c92c 	.word	0x0800c92c
 8002e7c:	0800c928 	.word	0x0800c928
 8002e80:	0800c930 	.word	0x0800c930

08002e84 <championship_exploration_with_analysis>:

/**
 * @brief Main championship exploration algorithm with MMS integration
 */
void championship_exploration_with_analysis(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
    send_bluetooth_message("Starting championship exploration\r\n");
 8002e8a:	4881      	ldr	r0, [pc, #516]	@ (8003090 <championship_exploration_with_analysis+0x20c>)
 8002e8c:	f7fe fd34 	bl	80018f8 <send_bluetooth_message>

    int step_count = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
    const int max_steps = 1000;
 8002e94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e98:	613b      	str	r3, [r7, #16]

    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 8002e9a:	e0c0      	b.n	800301e <championship_exploration_with_analysis+0x19a>
        send_bluetooth_printf("Step %d: Robot at (%d,%d)\r\n", step_count, robot.x, robot.y);
 8002e9c:	4b7d      	ldr	r3, [pc, #500]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ea6:	487c      	ldr	r0, [pc, #496]	@ (8003098 <championship_exploration_with_analysis+0x214>)
 8002ea8:	f7fe fd3c 	bl	8001924 <send_bluetooth_printf>

        // Update walls and run championship flood fill
        championship_update_walls();
 8002eac:	f7ff fe08 	bl	8002ac0 <championship_update_walls>
        championship_flood_fill();
 8002eb0:	f7ff fb44 	bl	800253c <championship_flood_fill>

        // Check if goal reached
        if (is_at_goal()) {
 8002eb4:	f7ff ffa0 	bl	8002df8 <is_at_goal>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d032      	beq.n	8002f24 <championship_exploration_with_analysis+0xa0>
            if (!robot.center_reached) {
 8002ebe:	4b75      	ldr	r3, [pc, #468]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002ec0:	7b1b      	ldrb	r3, [r3, #12]
 8002ec2:	f083 0301 	eor.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d024      	beq.n	8002f16 <championship_exploration_with_analysis+0x92>
                send_bluetooth_message("CENTER REACHED! Switching to return mode\r\n");
 8002ecc:	4873      	ldr	r0, [pc, #460]	@ (800309c <championship_exploration_with_analysis+0x218>)
 8002ece:	f7fe fd13 	bl	80018f8 <send_bluetooth_message>
                robot.center_reached = true;
 8002ed2:	4b70      	ldr	r3, [pc, #448]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	731a      	strb	r2, [r3, #12]
                play_confirmation_tone();
 8002ed8:	f7fe f86e 	bl	8000fb8 <play_confirmation_tone>

                // Reset visit counts for return journey
                for (int x = 0; x < MAZE_SIZE; x++) {
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	e015      	b.n	8002f0e <championship_exploration_with_analysis+0x8a>
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e00c      	b.n	8002f02 <championship_exploration_with_analysis+0x7e>
                        maze[x][y].visit_count = 0;
 8002ee8:	496d      	ldr	r1, [pc, #436]	@ (80030a0 <championship_exploration_with_analysis+0x21c>)
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	011a      	lsls	r2, r3, #4
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	440b      	add	r3, r1
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	ddef      	ble.n	8002ee8 <championship_exploration_with_analysis+0x64>
                for (int x = 0; x < MAZE_SIZE; x++) {
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	dde6      	ble.n	8002ee2 <championship_exploration_with_analysis+0x5e>
 8002f14:	e006      	b.n	8002f24 <championship_exploration_with_analysis+0xa0>
                    }
                }
            } else {
                send_bluetooth_message("RETURNED TO START! Exploration complete!\r\n");
 8002f16:	4863      	ldr	r0, [pc, #396]	@ (80030a4 <championship_exploration_with_analysis+0x220>)
 8002f18:	f7fe fcee 	bl	80018f8 <send_bluetooth_message>
                robot.returned_to_start = true;
 8002f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	735a      	strb	r2, [r3, #13]
                break;
 8002f22:	e090      	b.n	8003046 <championship_exploration_with_analysis+0x1c2>
            }
        }

        // Get championship direction
        int next_dir = get_championship_direction();
 8002f24:	f7ff fcb0 	bl	8002888 <get_championship_direction>
 8002f28:	60f8      	str	r0, [r7, #12]
        send_bluetooth_printf("Championship direction: %d\r\n", next_dir);
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	485e      	ldr	r0, [pc, #376]	@ (80030a8 <championship_exploration_with_analysis+0x224>)
 8002f2e:	f7fe fcf9 	bl	8001924 <send_bluetooth_printf>

        // Turn and move
        turn_to_direction(next_dir);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff feea 	bl	8002d0c <turn_to_direction>

        if (championship_move_forward()) {
 8002f38:	f7ff ff3c 	bl	8002db4 <championship_move_forward>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <championship_exploration_with_analysis+0xda>
            // Update LED status
            if (robot.center_reached) {
 8002f42:	4b54      	ldr	r3, [pc, #336]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002f44:	7b1b      	ldrb	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <championship_exploration_with_analysis+0xd0>
                led_status(0, 1); // Right LED for return journey
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f000 ffed 	bl	8003f2c <led_status>
 8002f52:	e05e      	b.n	8003012 <championship_exploration_with_analysis+0x18e>
            } else {
                led_status(1, 0); // Left LED for exploration
 8002f54:	2100      	movs	r1, #0
 8002f56:	2001      	movs	r0, #1
 8002f58:	f000 ffe8 	bl	8003f2c <led_status>
 8002f5c:	e059      	b.n	8003012 <championship_exploration_with_analysis+0x18e>
            }
        } else {
            send_bluetooth_message("Movement blocked - trying alternatives\r\n");
 8002f5e:	4853      	ldr	r0, [pc, #332]	@ (80030ac <championship_exploration_with_analysis+0x228>)
 8002f60:	f7fe fcca 	bl	80018f8 <send_bluetooth_message>
            // Try other directions if blocked
            bool moved = false;
 8002f64:	2300      	movs	r3, #0
 8002f66:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e03e      	b.n	8002fec <championship_exploration_with_analysis+0x168>
                if (alt_dir != next_dir) {
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d037      	beq.n	8002fe6 <championship_exploration_with_analysis+0x162>
                    int nx = robot.x + dx[alt_dir];
 8002f76:	4b47      	ldr	r3, [pc, #284]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	494d      	ldr	r1, [pc, #308]	@ (80030b0 <championship_exploration_with_analysis+0x22c>)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f82:	4413      	add	r3, r2
 8002f84:	60bb      	str	r3, [r7, #8]
                    int ny = robot.y + dy[alt_dir];
 8002f86:	4b43      	ldr	r3, [pc, #268]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	494a      	ldr	r1, [pc, #296]	@ (80030b4 <championship_exploration_with_analysis+0x230>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f92:	4413      	add	r3, r2
 8002f94:	607b      	str	r3, [r7, #4]
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db24      	blt.n	8002fe6 <championship_exploration_with_analysis+0x162>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	dc21      	bgt.n	8002fe6 <championship_exploration_with_analysis+0x162>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db1e      	blt.n	8002fe6 <championship_exploration_with_analysis+0x162>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	dc1b      	bgt.n	8002fe6 <championship_exploration_with_analysis+0x162>
                        !maze[robot.x][robot.y].walls[alt_dir]) {
 8002fae:	4b39      	ldr	r3, [pc, #228]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	493a      	ldr	r1, [pc, #232]	@ (80030a0 <championship_exploration_with_analysis+0x21c>)
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	18ca      	adds	r2, r1, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3305      	adds	r3, #5
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f083 0301 	eor.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <championship_exploration_with_analysis+0x162>
                        turn_to_direction(alt_dir);
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7ff fe9a 	bl	8002d0c <turn_to_direction>
                        if (championship_move_forward()) {
 8002fd8:	f7ff feec 	bl	8002db4 <championship_move_forward>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <championship_exploration_with_analysis+0x162>
                            moved = true;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	dc05      	bgt.n	8002ffe <championship_exploration_with_analysis+0x17a>
 8002ff2:	7efb      	ldrb	r3, [r7, #27]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1b7      	bne.n	8002f6e <championship_exploration_with_analysis+0xea>
                        }
                    }
                }
            }

            if (!moved) {
 8002ffe:	7efb      	ldrb	r3, [r7, #27]
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <championship_exploration_with_analysis+0x18e>
                send_bluetooth_message("All directions blocked!\r\n");
 800300a:	482b      	ldr	r0, [pc, #172]	@ (80030b8 <championship_exploration_with_analysis+0x234>)
 800300c:	f7fe fc74 	bl	80018f8 <send_bluetooth_message>
                break;
 8003010:	e019      	b.n	8003046 <championship_exploration_with_analysis+0x1c2>
            }
        }

        step_count++;
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	3301      	adds	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_Delay(10); // Small delay for stability
 8003018:	200a      	movs	r0, #10
 800301a:	f001 f847 	bl	80040ac <HAL_Delay>
    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 800301e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	429a      	cmp	r2, r3
 8003024:	da0f      	bge.n	8003046 <championship_exploration_with_analysis+0x1c2>
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8003028:	7b1b      	ldrb	r3, [r3, #12]
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	f47f af33 	bne.w	8002e9c <championship_exploration_with_analysis+0x18>
 8003036:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8003038:	7b5b      	ldrb	r3, [r3, #13]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f af2b 	bne.w	8002e9c <championship_exploration_with_analysis+0x18>
    }

    // Final status
    led_status(0, 0);
 8003046:	2100      	movs	r1, #0
 8003048:	2000      	movs	r0, #0
 800304a:	f000 ff6f 	bl	8003f2c <led_status>
    send_bluetooth_printf("Exploration completed in %d moves\r\n", robot.exploration_steps);
 800304e:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	4619      	mov	r1, r3
 8003054:	4819      	ldr	r0, [pc, #100]	@ (80030bc <championship_exploration_with_analysis+0x238>)
 8003056:	f7fe fc65 	bl	8001924 <send_bluetooth_printf>

    // Execute perfect path analysis if exploration successful
    if (robot.center_reached && robot.returned_to_start) {
 800305a:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 800305c:	7b1b      	ldrb	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <championship_exploration_with_analysis+0x1f6>
 8003062:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <championship_exploration_with_analysis+0x210>)
 8003064:	7b5b      	ldrb	r3, [r3, #13]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <championship_exploration_with_analysis+0x1f6>
        send_bluetooth_message("\r\nExploration successful! Starting path analysis...\r\n");
 800306a:	4815      	ldr	r0, [pc, #84]	@ (80030c0 <championship_exploration_with_analysis+0x23c>)
 800306c:	f7fe fc44 	bl	80018f8 <send_bluetooth_message>
        execute_championship_path_analysis();
 8003070:	f000 f82a 	bl	80030c8 <execute_championship_path_analysis>
        play_success_tone();
 8003074:	f7fd ffb2 	bl	8000fdc <play_success_tone>
 8003078:	e005      	b.n	8003086 <championship_exploration_with_analysis+0x202>
    } else {
        send_bluetooth_message("Exploration incomplete - path analysis not available\r\n");
 800307a:	4812      	ldr	r0, [pc, #72]	@ (80030c4 <championship_exploration_with_analysis+0x240>)
 800307c:	f7fe fc3c 	bl	80018f8 <send_bluetooth_message>
        play_error_tone();
 8003080:	f7fd ffd8 	bl	8001034 <play_error_tone>
    }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	@ 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	0800c430 	.word	0x0800c430
 8003094:	200013b0 	.word	0x200013b0
 8003098:	0800c454 	.word	0x0800c454
 800309c:	0800c470 	.word	0x0800c470
 80030a0:	200003b0 	.word	0x200003b0
 80030a4:	0800c49c 	.word	0x0800c49c
 80030a8:	0800c4c8 	.word	0x0800c4c8
 80030ac:	0800c4e8 	.word	0x0800c4e8
 80030b0:	0800c904 	.word	0x0800c904
 80030b4:	0800c914 	.word	0x0800c914
 80030b8:	0800c514 	.word	0x0800c514
 80030bc:	0800c530 	.word	0x0800c530
 80030c0:	0800c554 	.word	0x0800c554
 80030c4:	0800c58c 	.word	0x0800c58c

080030c8 <execute_championship_path_analysis>:

/**
 * @brief Execute championship path analysis (MMS style)
 */
void execute_championship_path_analysis(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PATH ANALYSIS ===\r\n");
 80030cc:	4810      	ldr	r0, [pc, #64]	@ (8003110 <execute_championship_path_analysis+0x48>)
 80030ce:	f7fe fc13 	bl	80018f8 <send_bluetooth_message>

    // Calculate optimal path from explored areas
    calculate_optimal_path_from_explored_areas();
 80030d2:	f7fd ffc9 	bl	8001068 <calculate_optimal_path_from_explored_areas>

    // Comprehensive maze performance analysis
    analyze_championship_maze_performance();
 80030d6:	f7fe fa4d 	bl	8001574 <analyze_championship_maze_performance>

    // Print optimal distance map
    print_championship_distance_map();
 80030da:	f7fe fb7d 	bl	80017d8 <print_championship_distance_map>

    // Visualize optimal path (would work with MMS visualization)
    send_bluetooth_message("\r\n🎯 CHAMPIONSHIP ANALYSIS COMPLETE!\r\n");
 80030de:	480d      	ldr	r0, [pc, #52]	@ (8003114 <execute_championship_path_analysis+0x4c>)
 80030e0:	f7fe fc0a 	bl	80018f8 <send_bluetooth_message>

    if (theoretical_minimum < MAX_DISTANCE) {
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <execute_championship_path_analysis+0x50>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f242 720e 	movw	r2, #9998	@ 0x270e
 80030ec:	4293      	cmp	r3, r2
 80030ee:	dc09      	bgt.n	8003104 <execute_championship_path_analysis+0x3c>
        send_bluetooth_printf("Optimal path through explored areas: %d steps!\r\n", theoretical_minimum);
 80030f0:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <execute_championship_path_analysis+0x50>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	4809      	ldr	r0, [pc, #36]	@ (800311c <execute_championship_path_analysis+0x54>)
 80030f8:	f7fe fc14 	bl	8001924 <send_bluetooth_printf>
        send_bluetooth_message("✅ Ready for IEEE Micromouse competition!\r\n");
 80030fc:	4808      	ldr	r0, [pc, #32]	@ (8003120 <execute_championship_path_analysis+0x58>)
 80030fe:	f7fe fbfb 	bl	80018f8 <send_bluetooth_message>
    } else {
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
    }
}
 8003102:	e002      	b.n	800310a <execute_championship_path_analysis+0x42>
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
 8003104:	4807      	ldr	r0, [pc, #28]	@ (8003124 <execute_championship_path_analysis+0x5c>)
 8003106:	f7fe fbf7 	bl	80018f8 <send_bluetooth_message>
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	0800c5c4 	.word	0x0800c5c4
 8003114:	0800c5ec 	.word	0x0800c5ec
 8003118:	20001400 	.word	0x20001400
 800311c:	0800c618 	.word	0x0800c618
 8003120:	0800c64c 	.word	0x0800c64c
 8003124:	0800c67c 	.word	0x0800c67c

08003128 <reset_championship_micromouse>:

/**
 * @brief Reset championship micromouse to initial state
 */
void reset_championship_micromouse(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
    robot.x = 0;
 800312c:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <reset_championship_micromouse+0x48>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <reset_championship_micromouse+0x48>)
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <reset_championship_micromouse+0x48>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 800313e:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <reset_championship_micromouse+0x48>)
 8003140:	2200      	movs	r2, #0
 8003142:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 8003144:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <reset_championship_micromouse+0x48>)
 8003146:	2200      	movs	r2, #0
 8003148:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <reset_championship_micromouse+0x48>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]

    exploration_steps = 0;
 8003150:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <reset_championship_micromouse+0x4c>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 8003156:	4b08      	ldr	r3, [pc, #32]	@ (8003178 <reset_championship_micromouse+0x50>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

    initialize_championship_maze();
 800315c:	f7ff f96e 	bl	800243c <initialize_championship_maze>
    send_bluetooth_message("Championship micromouse reset to initial state\r\n");
 8003160:	4806      	ldr	r0, [pc, #24]	@ (800317c <reset_championship_micromouse+0x54>)
 8003162:	f7fe fbc9 	bl	80018f8 <send_bluetooth_message>
    play_startup_tone();
 8003166:	f7fd ff0b 	bl	8000f80 <play_startup_tone>
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200013b0 	.word	0x200013b0
 8003174:	200013fc 	.word	0x200013fc
 8003178:	20001400 	.word	0x20001400
 800317c:	0800c6b0 	.word	0x0800c6b0

08003180 <championship_speed_run>:

/**
 * @brief Championship speed run with MMS path analysis
 */
void championship_speed_run(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 CHAMPIONSHIP SPEED RUN MODE!\r\n");
 8003184:	4804      	ldr	r0, [pc, #16]	@ (8003198 <championship_speed_run+0x18>)
 8003186:	f7fe fbb7 	bl	80018f8 <send_bluetooth_message>
    send_bluetooth_message("Using MMS optimal path analysis\r\n");
 800318a:	4804      	ldr	r0, [pc, #16]	@ (800319c <championship_speed_run+0x1c>)
 800318c:	f7fe fbb4 	bl	80018f8 <send_bluetooth_message>

    // Use the advanced speed run implementation
    speed_run();
 8003190:	f000 f806 	bl	80031a0 <speed_run>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	0800c6e4 	.word	0x0800c6e4
 800319c:	0800c70c 	.word	0x0800c70c

080031a0 <speed_run>:

/**
 * @brief Simple speed run implementation
 */
void speed_run(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 SPEED RUN MODE ACTIVATED!\r\n");
 80031a6:	4864      	ldr	r0, [pc, #400]	@ (8003338 <speed_run+0x198>)
 80031a8:	f7fe fba6 	bl	80018f8 <send_bluetooth_message>

    // Check if exploration was completed
    if (!robot.center_reached || !robot.returned_to_start) {
 80031ac:	4b63      	ldr	r3, [pc, #396]	@ (800333c <speed_run+0x19c>)
 80031ae:	7b1b      	ldrb	r3, [r3, #12]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <speed_run+0x28>
 80031ba:	4b60      	ldr	r3, [pc, #384]	@ (800333c <speed_run+0x19c>)
 80031bc:	7b5b      	ldrb	r3, [r3, #13]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <speed_run+0x30>
        send_bluetooth_message("❌ Speed run not available - exploration not complete\r\n");
 80031c8:	485d      	ldr	r0, [pc, #372]	@ (8003340 <speed_run+0x1a0>)
 80031ca:	f7fe fb95 	bl	80018f8 <send_bluetooth_message>
        return;
 80031ce:	e0b0      	b.n	8003332 <speed_run+0x192>
    }

    send_bluetooth_message("Using championship algorithms for optimal speed run\r\n");
 80031d0:	485c      	ldr	r0, [pc, #368]	@ (8003344 <speed_run+0x1a4>)
 80031d2:	f7fe fb91 	bl	80018f8 <send_bluetooth_message>

    // Reset robot position
    robot.x = 0;
 80031d6:	4b59      	ldr	r3, [pc, #356]	@ (800333c <speed_run+0x19c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80031dc:	4b57      	ldr	r3, [pc, #348]	@ (800333c <speed_run+0x19c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80031e2:	4b56      	ldr	r3, [pc, #344]	@ (800333c <speed_run+0x19c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]

    // Status indication
    led_status(1, 1); // Both LEDs on
 80031e8:	2101      	movs	r1, #1
 80031ea:	2001      	movs	r0, #1
 80031ec:	f000 fe9e 	bl	8003f2c <led_status>
    play_confirmation_tone();
 80031f0:	f7fd fee2 	bl	8000fb8 <play_confirmation_tone>

    // Wait for confirmation
    send_bluetooth_message("Press RIGHT button to execute speed run...\r\n");
 80031f4:	4854      	ldr	r0, [pc, #336]	@ (8003348 <speed_run+0x1a8>)
 80031f6:	f7fe fb7f 	bl	80018f8 <send_bluetooth_message>

    uint32_t start_time = HAL_GetTick();
 80031fa:	f000 ff4b 	bl	8004094 <HAL_GetTick>
 80031fe:	60f8      	str	r0, [r7, #12]
    bool execute_run = false;
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]

    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 8003204:	e00d      	b.n	8003222 <speed_run+0x82>
        if (button_pressed == 2) { // Right button
 8003206:	4b51      	ldr	r3, [pc, #324]	@ (800334c <speed_run+0x1ac>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d105      	bne.n	800321c <speed_run+0x7c>
            button_pressed = 0;
 8003210:	4b4e      	ldr	r3, [pc, #312]	@ (800334c <speed_run+0x1ac>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
            execute_run = true;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
            break;
 800321a:	e00b      	b.n	8003234 <speed_run+0x94>
        }
        HAL_Delay(100);
 800321c:	2064      	movs	r0, #100	@ 0x64
 800321e:	f000 ff45 	bl	80040ac <HAL_Delay>
    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 8003222:	f000 ff37 	bl	8004094 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003230:	4293      	cmp	r3, r2
 8003232:	d9e8      	bls.n	8003206 <speed_run+0x66>
    }

    if (!execute_run) {
 8003234:	7dfb      	ldrb	r3, [r7, #23]
 8003236:	f083 0301 	eor.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <speed_run+0xb0>
        send_bluetooth_message("⏰ Speed run cancelled - timeout\r\n");
 8003240:	4843      	ldr	r0, [pc, #268]	@ (8003350 <speed_run+0x1b0>)
 8003242:	f7fe fb59 	bl	80018f8 <send_bluetooth_message>
        led_status(0, 0);
 8003246:	2100      	movs	r1, #0
 8003248:	2000      	movs	r0, #0
 800324a:	f000 fe6f 	bl	8003f2c <led_status>
        return;
 800324e:	e070      	b.n	8003332 <speed_run+0x192>
    }

    send_bluetooth_message("🏁 EXECUTING SPEED RUN!\r\n");
 8003250:	4840      	ldr	r0, [pc, #256]	@ (8003354 <speed_run+0x1b4>)
 8003252:	f7fe fb51 	bl	80018f8 <send_bluetooth_message>

    // Simple speed run - follow the shortest known path to center
    int moves = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
    const int max_moves = 50;
 800325a:	2332      	movs	r3, #50	@ 0x32
 800325c:	60bb      	str	r3, [r7, #8]

    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 800325e:	e021      	b.n	80032a4 <speed_run+0x104>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
           moves < max_moves) {

        // Update sensor data
        update_sensors();
 8003260:	f000 fa8e 	bl	8003780 <update_sensors>

        // Use championship flood fill to get direction
        championship_flood_fill();
 8003264:	f7ff f96a 	bl	800253c <championship_flood_fill>
        int next_dir = get_championship_direction();
 8003268:	f7ff fb0e 	bl	8002888 <get_championship_direction>
 800326c:	6078      	str	r0, [r7, #4]

        // Turn to target direction
        turn_to_direction(next_dir);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fd4c 	bl	8002d0c <turn_to_direction>

        // Move forward
        if (championship_move_forward()) {
 8003274:	f7ff fd9e 	bl	8002db4 <championship_move_forward>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <speed_run+0xf6>
            moves++;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3301      	adds	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
            send_bluetooth_printf("Speed run move %d to (%d,%d)\r\n", moves, robot.x, robot.y);
 8003284:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <speed_run+0x19c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b2c      	ldr	r3, [pc, #176]	@ (800333c <speed_run+0x19c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	6939      	ldr	r1, [r7, #16]
 800328e:	4832      	ldr	r0, [pc, #200]	@ (8003358 <speed_run+0x1b8>)
 8003290:	f7fe fb48 	bl	8001924 <send_bluetooth_printf>
 8003294:	e003      	b.n	800329e <speed_run+0xfe>
        } else {
            send_bluetooth_message("❌ Speed run blocked!\r\n");
 8003296:	4831      	ldr	r0, [pc, #196]	@ (800335c <speed_run+0x1bc>)
 8003298:	f7fe fb2e 	bl	80018f8 <send_bluetooth_message>
            break;
 800329c:	e01e      	b.n	80032dc <speed_run+0x13c>
        }

        // Brief delay for stability
        HAL_Delay(50);
 800329e:	2032      	movs	r0, #50	@ 0x32
 80032a0:	f000 ff04 	bl	80040ac <HAL_Delay>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 80032a4:	4b25      	ldr	r3, [pc, #148]	@ (800333c <speed_run+0x19c>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003360 <speed_run+0x1c0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d005      	beq.n	80032bc <speed_run+0x11c>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 80032b0:	4b22      	ldr	r3, [pc, #136]	@ (800333c <speed_run+0x19c>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003364 <speed_run+0x1c4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d10b      	bne.n	80032d4 <speed_run+0x134>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 80032bc:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <speed_run+0x19c>)
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4b29      	ldr	r3, [pc, #164]	@ (8003368 <speed_run+0x1c8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d009      	beq.n	80032dc <speed_run+0x13c>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 80032c8:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <speed_run+0x19c>)
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4b27      	ldr	r3, [pc, #156]	@ (800336c <speed_run+0x1cc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d003      	beq.n	80032dc <speed_run+0x13c>
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	dbc1      	blt.n	8003260 <speed_run+0xc0>
    }

    // Speed run complete
    led_status(0, 0);
 80032dc:	2100      	movs	r1, #0
 80032de:	2000      	movs	r0, #0
 80032e0:	f000 fe24 	bl	8003f2c <led_status>

    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 80032e4:	4b15      	ldr	r3, [pc, #84]	@ (800333c <speed_run+0x19c>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <speed_run+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d005      	beq.n	80032fc <speed_run+0x15c>
 80032f0:	4b12      	ldr	r3, [pc, #72]	@ (800333c <speed_run+0x19c>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <speed_run+0x1c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d115      	bne.n	8003328 <speed_run+0x188>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 80032fc:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <speed_run+0x19c>)
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <speed_run+0x1c8>)
 8003302:	681b      	ldr	r3, [r3, #0]
    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <speed_run+0x174>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <speed_run+0x19c>)
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	4b17      	ldr	r3, [pc, #92]	@ (800336c <speed_run+0x1cc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d109      	bne.n	8003328 <speed_run+0x188>
        send_bluetooth_message("🏁 SPEED RUN SUCCESS!\r\n");
 8003314:	4816      	ldr	r0, [pc, #88]	@ (8003370 <speed_run+0x1d0>)
 8003316:	f7fe faef 	bl	80018f8 <send_bluetooth_message>
        send_bluetooth_printf("Completed in %d moves\r\n", moves);
 800331a:	6939      	ldr	r1, [r7, #16]
 800331c:	4815      	ldr	r0, [pc, #84]	@ (8003374 <speed_run+0x1d4>)
 800331e:	f7fe fb01 	bl	8001924 <send_bluetooth_printf>
        play_success_tone();
 8003322:	f7fd fe5b 	bl	8000fdc <play_success_tone>
 8003326:	e004      	b.n	8003332 <speed_run+0x192>
    } else {
        send_bluetooth_message("⚠️ Speed run incomplete\r\n");
 8003328:	4813      	ldr	r0, [pc, #76]	@ (8003378 <speed_run+0x1d8>)
 800332a:	f7fe fae5 	bl	80018f8 <send_bluetooth_message>
        play_error_tone();
 800332e:	f7fd fe81 	bl	8001034 <play_error_tone>
    }
}
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	0800c730 	.word	0x0800c730
 800333c:	200013b0 	.word	0x200013b0
 8003340:	0800c754 	.word	0x0800c754
 8003344:	0800c790 	.word	0x0800c790
 8003348:	0800c7c8 	.word	0x0800c7c8
 800334c:	200013f8 	.word	0x200013f8
 8003350:	0800c7f8 	.word	0x0800c7f8
 8003354:	0800c81c 	.word	0x0800c81c
 8003358:	0800c838 	.word	0x0800c838
 800335c:	0800c858 	.word	0x0800c858
 8003360:	0800c924 	.word	0x0800c924
 8003364:	0800c92c 	.word	0x0800c92c
 8003368:	0800c928 	.word	0x0800c928
 800336c:	0800c930 	.word	0x0800c930
 8003370:	0800c874 	.word	0x0800c874
 8003374:	0800c890 	.word	0x0800c890
 8003378:	0800c8a8 	.word	0x0800c8a8

0800337c <start_encoders>:

/**
 * @brief Start encoder timers
 */
void start_encoders(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003380:	213c      	movs	r1, #60	@ 0x3c
 8003382:	480c      	ldr	r0, [pc, #48]	@ (80033b4 <start_encoders+0x38>)
 8003384:	f003 fab4 	bl	80068f0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003388:	213c      	movs	r1, #60	@ 0x3c
 800338a:	480b      	ldr	r0, [pc, #44]	@ (80033b8 <start_encoders+0x3c>)
 800338c:	f003 fab0 	bl	80068f0 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003390:	4b08      	ldr	r3, [pc, #32]	@ (80033b4 <start_encoders+0x38>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <start_encoders+0x3c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

    encoders.left_total = 0;
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <start_encoders+0x40>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 80033aa:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <start_encoders+0x40>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	60da      	str	r2, [r3, #12]
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000320 	.word	0x20000320
 80033b8:	200002d8 	.word	0x200002d8
 80033bc:	200013e8 	.word	0x200013e8

080033c0 <move_forward>:

/**
 * @brief Move forward one cell
 */
void move_forward(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
    // Reset encoder counts for this movement
    int32_t start_left = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80033c6:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <move_forward+0x108>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80033d0:	61fb      	str	r3, [r7, #28]
    int32_t start_right = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80033d2:	4b3e      	ldr	r3, [pc, #248]	@ (80034cc <move_forward+0x10c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80033dc:	61bb      	str	r3, [r7, #24]

    // Set motors to move forward
    HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);   // Left forward
 80033de:	2201      	movs	r2, #1
 80033e0:	2140      	movs	r1, #64	@ 0x40
 80033e2:	483b      	ldr	r0, [pc, #236]	@ (80034d0 <move_forward+0x110>)
 80033e4:	f001 fda0 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 80033e8:	2200      	movs	r2, #0
 80033ea:	2180      	movs	r1, #128	@ 0x80
 80033ec:	4838      	ldr	r0, [pc, #224]	@ (80034d0 <move_forward+0x110>)
 80033ee:	f001 fd9b 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_SET);   // Right forward
 80033f2:	2201      	movs	r2, #1
 80033f4:	2101      	movs	r1, #1
 80033f6:	4837      	ldr	r0, [pc, #220]	@ (80034d4 <move_forward+0x114>)
 80033f8:	f001 fd96 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_RESET);
 80033fc:	2200      	movs	r2, #0
 80033fe:	2102      	movs	r1, #2
 8003400:	4834      	ldr	r0, [pc, #208]	@ (80034d4 <move_forward+0x114>)
 8003402:	f001 fd91 	bl	8004f28 <HAL_GPIO_WritePin>

    // Move until target distance reached
    int32_t target_counts = ENCODER_COUNTS_PER_CELL;
 8003406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800340a:	617b      	str	r3, [r7, #20]

    while (1) {
        int32_t current_left = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 800340c:	4b2e      	ldr	r3, [pc, #184]	@ (80034c8 <move_forward+0x108>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003416:	613b      	str	r3, [r7, #16]
        int32_t current_right = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 8003418:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <move_forward+0x10c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003422:	60fb      	str	r3, [r7, #12]

        int32_t left_traveled = current_left - start_left;
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	60bb      	str	r3, [r7, #8]
        int32_t right_traveled = current_right - start_right;
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	607b      	str	r3, [r7, #4]
        int32_t avg_traveled = (left_traveled + right_traveled) / 2;
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	0fda      	lsrs	r2, r3, #31
 800343c:	4413      	add	r3, r2
 800343e:	105b      	asrs	r3, r3, #1
 8003440:	603b      	str	r3, [r7, #0]

        if (avg_traveled >= target_counts) {
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	429a      	cmp	r2, r3
 8003448:	da03      	bge.n	8003452 <move_forward+0x92>
            break;
        }

        HAL_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f000 fe2e 	bl	80040ac <HAL_Delay>
    while (1) {
 8003450:	e7dc      	b.n	800340c <move_forward+0x4c>
            break;
 8003452:	bf00      	nop
    }

    // Stop motors
    stop_motors();
 8003454:	f000 f906 	bl	8003664 <stop_motors>

    // Update position
    robot.x += dx[robot.direction];
 8003458:	4b1f      	ldr	r3, [pc, #124]	@ (80034d8 <move_forward+0x118>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b1e      	ldr	r3, [pc, #120]	@ (80034d8 <move_forward+0x118>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	491e      	ldr	r1, [pc, #120]	@ (80034dc <move_forward+0x11c>)
 8003462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003466:	4413      	add	r3, r2
 8003468:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <move_forward+0x118>)
 800346a:	6013      	str	r3, [r2, #0]
    robot.y += dy[robot.direction];
 800346c:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <move_forward+0x118>)
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4b19      	ldr	r3, [pc, #100]	@ (80034d8 <move_forward+0x118>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	491a      	ldr	r1, [pc, #104]	@ (80034e0 <move_forward+0x120>)
 8003476:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800347a:	4413      	add	r3, r2
 800347c:	4a16      	ldr	r2, [pc, #88]	@ (80034d8 <move_forward+0x118>)
 800347e:	6053      	str	r3, [r2, #4]

    // Bounds checking
    if (robot.x < 0) robot.x = 0;
 8003480:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <move_forward+0x118>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	da02      	bge.n	800348e <move_forward+0xce>
 8003488:	4b13      	ldr	r3, [pc, #76]	@ (80034d8 <move_forward+0x118>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
    if (robot.x >= MAZE_SIZE) robot.x = MAZE_SIZE - 1;
 800348e:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <move_forward+0x118>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	dd02      	ble.n	800349c <move_forward+0xdc>
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <move_forward+0x118>)
 8003498:	220f      	movs	r2, #15
 800349a:	601a      	str	r2, [r3, #0]
    if (robot.y < 0) robot.y = 0;
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <move_forward+0x118>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da02      	bge.n	80034aa <move_forward+0xea>
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <move_forward+0x118>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
    if (robot.y >= MAZE_SIZE) robot.y = MAZE_SIZE - 1;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <move_forward+0x118>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	dd02      	ble.n	80034b8 <move_forward+0xf8>
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <move_forward+0x118>)
 80034b4:	220f      	movs	r2, #15
 80034b6:	605a      	str	r2, [r3, #4]

    HAL_Delay(100); // Settling time
 80034b8:	2064      	movs	r0, #100	@ 0x64
 80034ba:	f000 fdf7 	bl	80040ac <HAL_Delay>
}
 80034be:	bf00      	nop
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200002d8 	.word	0x200002d8
 80034cc:	20000320 	.word	0x20000320
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40020400 	.word	0x40020400
 80034d8:	200013b0 	.word	0x200013b0
 80034dc:	0800c904 	.word	0x0800c904
 80034e0:	0800c914 	.word	0x0800c914

080034e4 <turn_left>:

/**
 * @brief Turn left 90 degrees
 */
void turn_left(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
    int32_t start_left = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80034ea:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <turn_left+0xa4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80034f4:	617b      	str	r3, [r7, #20]
    int32_t start_right = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80034f6:	4b25      	ldr	r3, [pc, #148]	@ (800358c <turn_left+0xa8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003500:	613b      	str	r3, [r7, #16]

    // Left motor backward, right motor forward
    HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8003502:	2200      	movs	r2, #0
 8003504:	2140      	movs	r1, #64	@ 0x40
 8003506:	4822      	ldr	r0, [pc, #136]	@ (8003590 <turn_left+0xac>)
 8003508:	f001 fd0e 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 800350c:	2201      	movs	r2, #1
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	481f      	ldr	r0, [pc, #124]	@ (8003590 <turn_left+0xac>)
 8003512:	f001 fd09 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_SET);
 8003516:	2201      	movs	r2, #1
 8003518:	2101      	movs	r1, #1
 800351a:	481e      	ldr	r0, [pc, #120]	@ (8003594 <turn_left+0xb0>)
 800351c:	f001 fd04 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8003520:	2200      	movs	r2, #0
 8003522:	2102      	movs	r1, #2
 8003524:	481b      	ldr	r0, [pc, #108]	@ (8003594 <turn_left+0xb0>)
 8003526:	f001 fcff 	bl	8004f28 <HAL_GPIO_WritePin>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 800352a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800352e:	60fb      	str	r3, [r7, #12]

    while (1) {
        int32_t current_right = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 8003530:	4b16      	ldr	r3, [pc, #88]	@ (800358c <turn_left+0xa8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800353a:	60bb      	str	r3, [r7, #8]
        int32_t right_traveled = abs_int(current_right - start_right);
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fce4 	bl	8003f10 <abs_int>
 8003548:	6078      	str	r0, [r7, #4]

        if (right_traveled >= target_counts) {
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	429a      	cmp	r2, r3
 8003550:	da03      	bge.n	800355a <turn_left+0x76>
            break;
        }

        HAL_Delay(1);
 8003552:	2001      	movs	r0, #1
 8003554:	f000 fdaa 	bl	80040ac <HAL_Delay>
    while (1) {
 8003558:	e7ea      	b.n	8003530 <turn_left+0x4c>
            break;
 800355a:	bf00      	nop
    }

    stop_motors();
 800355c:	f000 f882 	bl	8003664 <stop_motors>
    robot.direction = (robot.direction + 3) % 4; // Turn left
 8003560:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <turn_left+0xb4>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	3303      	adds	r3, #3
 8003566:	425a      	negs	r2, r3
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	f002 0203 	and.w	r2, r2, #3
 8003570:	bf58      	it	pl
 8003572:	4253      	negpl	r3, r2
 8003574:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <turn_left+0xb4>)
 8003576:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8003578:	20c8      	movs	r0, #200	@ 0xc8
 800357a:	f000 fd97 	bl	80040ac <HAL_Delay>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200002d8 	.word	0x200002d8
 800358c:	20000320 	.word	0x20000320
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	200013b0 	.word	0x200013b0

0800359c <turn_right>:

/**
 * @brief Turn right 90 degrees
 */
void turn_right(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
    int32_t start_left = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80035a2:	4b27      	ldr	r3, [pc, #156]	@ (8003640 <turn_right+0xa4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80035ac:	617b      	str	r3, [r7, #20]
    int32_t start_right = (int32_t)__HAL_TIM_GET_COUNTER(&htim4) - 32768;
 80035ae:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <turn_right+0xa8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80035b8:	613b      	str	r3, [r7, #16]

    // Left motor forward, right motor backward
    HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 80035ba:	2201      	movs	r2, #1
 80035bc:	2140      	movs	r1, #64	@ 0x40
 80035be:	4822      	ldr	r0, [pc, #136]	@ (8003648 <turn_right+0xac>)
 80035c0:	f001 fcb2 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	@ 0x80
 80035c8:	481f      	ldr	r0, [pc, #124]	@ (8003648 <turn_right+0xac>)
 80035ca:	f001 fcad 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2101      	movs	r1, #1
 80035d2:	481e      	ldr	r0, [pc, #120]	@ (800364c <turn_right+0xb0>)
 80035d4:	f001 fca8 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_SET);
 80035d8:	2201      	movs	r2, #1
 80035da:	2102      	movs	r1, #2
 80035dc:	481b      	ldr	r0, [pc, #108]	@ (800364c <turn_right+0xb0>)
 80035de:	f001 fca3 	bl	8004f28 <HAL_GPIO_WritePin>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 80035e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035e6:	60fb      	str	r3, [r7, #12]

    while (1) {
        int32_t current_left = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 80035e8:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <turn_right+0xa4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80035f2:	60bb      	str	r3, [r7, #8]
        int32_t left_traveled = abs_int(current_left - start_left);
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fc88 	bl	8003f10 <abs_int>
 8003600:	6078      	str	r0, [r7, #4]

        if (left_traveled >= target_counts) {
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	429a      	cmp	r2, r3
 8003608:	da03      	bge.n	8003612 <turn_right+0x76>
            break;
        }

        HAL_Delay(1);
 800360a:	2001      	movs	r0, #1
 800360c:	f000 fd4e 	bl	80040ac <HAL_Delay>
    while (1) {
 8003610:	e7ea      	b.n	80035e8 <turn_right+0x4c>
            break;
 8003612:	bf00      	nop
    }

    stop_motors();
 8003614:	f000 f826 	bl	8003664 <stop_motors>
    robot.direction = (robot.direction + 1) % 4; // Turn right
 8003618:	4b0d      	ldr	r3, [pc, #52]	@ (8003650 <turn_right+0xb4>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	3301      	adds	r3, #1
 800361e:	425a      	negs	r2, r3
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	f002 0203 	and.w	r2, r2, #3
 8003628:	bf58      	it	pl
 800362a:	4253      	negpl	r3, r2
 800362c:	4a08      	ldr	r2, [pc, #32]	@ (8003650 <turn_right+0xb4>)
 800362e:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8003630:	20c8      	movs	r0, #200	@ 0xc8
 8003632:	f000 fd3b 	bl	80040ac <HAL_Delay>
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200002d8 	.word	0x200002d8
 8003644:	20000320 	.word	0x20000320
 8003648:	40020000 	.word	0x40020000
 800364c:	40020400 	.word	0x40020400
 8003650:	200013b0 	.word	0x200013b0

08003654 <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
    turn_right();
 8003658:	f7ff ffa0 	bl	800359c <turn_right>
    turn_right();
 800365c:	f7ff ff9e 	bl	800359c <turn_right>
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}

08003664 <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
    // Brake mode - both pins low
    HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8003668:	2200      	movs	r2, #0
 800366a:	2140      	movs	r1, #64	@ 0x40
 800366c:	4809      	ldr	r0, [pc, #36]	@ (8003694 <stop_motors+0x30>)
 800366e:	f001 fc5b 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8003672:	2200      	movs	r2, #0
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	4807      	ldr	r0, [pc, #28]	@ (8003694 <stop_motors+0x30>)
 8003678:	f001 fc56 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET);
 800367c:	2200      	movs	r2, #0
 800367e:	2101      	movs	r1, #1
 8003680:	4805      	ldr	r0, [pc, #20]	@ (8003698 <stop_motors+0x34>)
 8003682:	f001 fc51 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, GPIO_PIN_RESET);
 8003686:	2200      	movs	r2, #0
 8003688:	2102      	movs	r1, #2
 800368a:	4803      	ldr	r0, [pc, #12]	@ (8003698 <stop_motors+0x34>)
 800368c:	f001 fc4c 	bl	8004f28 <HAL_GPIO_WritePin>
}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40020000 	.word	0x40020000
 8003698:	40020400 	.word	0x40020400

0800369c <turn_on_emitters>:

/**
 * @brief Turn on IR emitters
 */
void turn_on_emitters(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_SET);
 80036a0:	2201      	movs	r2, #1
 80036a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a6:	480d      	ldr	r0, [pc, #52]	@ (80036dc <turn_on_emitters+0x40>)
 80036a8:	f001 fc3e 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_SET);
 80036ac:	2201      	movs	r2, #1
 80036ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036b2:	480a      	ldr	r0, [pc, #40]	@ (80036dc <turn_on_emitters+0x40>)
 80036b4:	f001 fc38 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_SET);
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036be:	4808      	ldr	r0, [pc, #32]	@ (80036e0 <turn_on_emitters+0x44>)
 80036c0:	f001 fc32 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_SET);
 80036c4:	2201      	movs	r2, #1
 80036c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036ca:	4805      	ldr	r0, [pc, #20]	@ (80036e0 <turn_on_emitters+0x44>)
 80036cc:	f001 fc2c 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_Delay(2); // Emitter stabilization time
 80036d0:	2002      	movs	r0, #2
 80036d2:	f000 fceb 	bl	80040ac <HAL_Delay>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400

080036e4 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 80036e8:	2200      	movs	r2, #0
 80036ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036ee:	480b      	ldr	r0, [pc, #44]	@ (800371c <turn_off_emitters+0x38>)
 80036f0:	f001 fc1a 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80036f4:	2200      	movs	r2, #0
 80036f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036fa:	4808      	ldr	r0, [pc, #32]	@ (800371c <turn_off_emitters+0x38>)
 80036fc:	f001 fc14 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 8003700:	2200      	movs	r2, #0
 8003702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003706:	4806      	ldr	r0, [pc, #24]	@ (8003720 <turn_off_emitters+0x3c>)
 8003708:	f001 fc0e 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003712:	4803      	ldr	r0, [pc, #12]	@ (8003720 <turn_off_emitters+0x3c>)
 8003714:	f001 fc08 	bl	8004f28 <HAL_GPIO_WritePin>
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40020000 	.word	0x40020000
 8003720:	40020400 	.word	0x40020400

08003724 <read_adc_channel>:

/**
 * @brief Read specific ADC channel
 */
uint16_t read_adc_channel(uint32_t channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]

    sConfig.Channel = channel;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003742:	2301      	movs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4619      	mov	r1, r3
 800374c:	480b      	ldr	r0, [pc, #44]	@ (800377c <read_adc_channel+0x58>)
 800374e:	f000 fe95 	bl	800447c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 8003752:	480a      	ldr	r0, [pc, #40]	@ (800377c <read_adc_channel+0x58>)
 8003754:	f000 fd12 	bl	800417c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8003758:	2164      	movs	r1, #100	@ 0x64
 800375a:	4808      	ldr	r0, [pc, #32]	@ (800377c <read_adc_channel+0x58>)
 800375c:	f000 fdf5 	bl	800434a <HAL_ADC_PollForConversion>
    uint16_t result = HAL_ADC_GetValue(&hadc1);
 8003760:	4806      	ldr	r0, [pc, #24]	@ (800377c <read_adc_channel+0x58>)
 8003762:	f000 fe7d 	bl	8004460 <HAL_ADC_GetValue>
 8003766:	4603      	mov	r3, r0
 8003768:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 800376a:	4804      	ldr	r0, [pc, #16]	@ (800377c <read_adc_channel+0x58>)
 800376c:	f000 fdba 	bl	80042e4 <HAL_ADC_Stop>

    return result;
 8003770:	8bfb      	ldrh	r3, [r7, #30]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	200001f0 	.word	0x200001f0

08003780 <update_sensors>:

/**
 * @brief Update all sensor readings
 */
void update_sensors(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
    // Read ambient light levels (emitters off)
    turn_off_emitters();
 8003786:	f7ff ffad 	bl	80036e4 <turn_off_emitters>
    HAL_Delay(1);
 800378a:	2001      	movs	r0, #1
 800378c:	f000 fc8e 	bl	80040ac <HAL_Delay>

    uint16_t ambient_front_right = read_adc_channel(ADC_CHANNEL_2);
 8003790:	2002      	movs	r0, #2
 8003792:	f7ff ffc7 	bl	8003724 <read_adc_channel>
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
    uint16_t ambient_side_right = read_adc_channel(ADC_CHANNEL_3);
 800379a:	2003      	movs	r0, #3
 800379c:	f7ff ffc2 	bl	8003724 <read_adc_channel>
 80037a0:	4603      	mov	r3, r0
 80037a2:	80bb      	strh	r3, [r7, #4]
    uint16_t ambient_side_left = read_adc_channel(ADC_CHANNEL_4);
 80037a4:	2004      	movs	r0, #4
 80037a6:	f7ff ffbd 	bl	8003724 <read_adc_channel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	807b      	strh	r3, [r7, #2]
    uint16_t ambient_front_left = read_adc_channel(ADC_CHANNEL_5);
 80037ae:	2005      	movs	r0, #5
 80037b0:	f7ff ffb8 	bl	8003724 <read_adc_channel>
 80037b4:	4603      	mov	r3, r0
 80037b6:	803b      	strh	r3, [r7, #0]

    // Read with emitters on
    turn_on_emitters();
 80037b8:	f7ff ff70 	bl	800369c <turn_on_emitters>

    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 80037bc:	2000      	movs	r0, #0
 80037be:	f7ff ffb1 	bl	8003724 <read_adc_channel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003878 <update_sensors+0xf8>)
 80037c8:	801a      	strh	r2, [r3, #0]
    sensors.front_right = read_adc_channel(ADC_CHANNEL_2) - ambient_front_right;
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7ff ffaa 	bl	8003724 <read_adc_channel>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	b29a      	uxth	r2, r3
 80037da:	4b27      	ldr	r3, [pc, #156]	@ (8003878 <update_sensors+0xf8>)
 80037dc:	805a      	strh	r2, [r3, #2]
    sensors.side_right = read_adc_channel(ADC_CHANNEL_3) - ambient_side_right;
 80037de:	2003      	movs	r0, #3
 80037e0:	f7ff ffa0 	bl	8003724 <read_adc_channel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	88bb      	ldrh	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <update_sensors+0xf8>)
 80037f0:	809a      	strh	r2, [r3, #4]
    sensors.side_left = read_adc_channel(ADC_CHANNEL_4) - ambient_side_left;
 80037f2:	2004      	movs	r0, #4
 80037f4:	f7ff ff96 	bl	8003724 <read_adc_channel>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461a      	mov	r2, r3
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b1d      	ldr	r3, [pc, #116]	@ (8003878 <update_sensors+0xf8>)
 8003804:	80da      	strh	r2, [r3, #6]
    sensors.front_left = read_adc_channel(ADC_CHANNEL_5) - ambient_front_left;
 8003806:	2005      	movs	r0, #5
 8003808:	f7ff ff8c 	bl	8003724 <read_adc_channel>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	883b      	ldrh	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b29a      	uxth	r2, r3
 8003816:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <update_sensors+0xf8>)
 8003818:	811a      	strh	r2, [r3, #8]

    // Turn off emitters to save power
    turn_off_emitters();
 800381a:	f7ff ff63 	bl	80036e4 <turn_off_emitters>

    // Process wall detection
    sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 800381e:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <update_sensors+0xf8>)
 8003820:	891b      	ldrh	r3, [r3, #8]
 8003822:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003826:	d804      	bhi.n	8003832 <update_sensors+0xb2>
                         (sensors.front_right > WALL_THRESHOLD_FRONT);
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <update_sensors+0xf8>)
 800382a:	885b      	ldrh	r3, [r3, #2]
    sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 800382c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003830:	d901      	bls.n	8003836 <update_sensors+0xb6>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <update_sensors+0xb8>
 8003836:	2300      	movs	r3, #0
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <update_sensors+0xf8>)
 8003840:	729a      	strb	r2, [r3, #10]
    sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 8003842:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <update_sensors+0xf8>)
 8003844:	88db      	ldrh	r3, [r3, #6]
 8003846:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800384a:	4293      	cmp	r3, r2
 800384c:	bf8c      	ite	hi
 800384e:	2301      	movhi	r3, #1
 8003850:	2300      	movls	r3, #0
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <update_sensors+0xf8>)
 8003856:	72da      	strb	r2, [r3, #11]
    sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 8003858:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <update_sensors+0xf8>)
 800385a:	889b      	ldrh	r3, [r3, #4]
 800385c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003860:	4293      	cmp	r3, r2
 8003862:	bf8c      	ite	hi
 8003864:	2301      	movhi	r3, #1
 8003866:	2300      	movls	r3, #0
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4b03      	ldr	r3, [pc, #12]	@ (8003878 <update_sensors+0xf8>)
 800386c:	731a      	strb	r2, [r3, #12]
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200013c4 	.word	0x200013c4

0800387c <calibrate_sensors>:

/**
 * @brief Calibrate sensors (placeholder for now)
 */
void calibrate_sensors(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
    send_bluetooth_message("Calibrating sensors...\r\n");
 8003882:	480c      	ldr	r0, [pc, #48]	@ (80038b4 <calibrate_sensors+0x38>)
 8003884:	f7fe f838 	bl	80018f8 <send_bluetooth_message>

    // Take baseline readings
    for (int i = 0; i < 10; i++) {
 8003888:	2300      	movs	r3, #0
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	e007      	b.n	800389e <calibrate_sensors+0x22>
        update_sensors();
 800388e:	f7ff ff77 	bl	8003780 <update_sensors>
        HAL_Delay(50);
 8003892:	2032      	movs	r0, #50	@ 0x32
 8003894:	f000 fc0a 	bl	80040ac <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3301      	adds	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b09      	cmp	r3, #9
 80038a2:	ddf4      	ble.n	800388e <calibrate_sensors+0x12>
    }

    send_bluetooth_message("Sensor calibration complete\r\n");
 80038a4:	4804      	ldr	r0, [pc, #16]	@ (80038b8 <calibrate_sensors+0x3c>)
 80038a6:	f7fe f827 	bl	80018f8 <send_bluetooth_message>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	0800c8c8 	.word	0x0800c8c8
 80038b8:	0800c8e4 	.word	0x0800c8e4

080038bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	4b10      	ldr	r3, [pc, #64]	@ (8003908 <HAL_MspInit+0x4c>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003908 <HAL_MspInit+0x4c>)
 80038cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_MspInit+0x4c>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <HAL_MspInit+0x4c>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <HAL_MspInit+0x4c>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_MspInit+0x4c>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800

0800390c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <HAL_ADC_MspInit+0x7c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d127      	bne.n	800397e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	4b16      	ldr	r3, [pc, #88]	@ (800398c <HAL_ADC_MspInit+0x80>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	4a15      	ldr	r2, [pc, #84]	@ (800398c <HAL_ADC_MspInit+0x80>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393c:	6453      	str	r3, [r2, #68]	@ 0x44
 800393e:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_ADC_MspInit+0x80>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b0f      	ldr	r3, [pc, #60]	@ (800398c <HAL_ADC_MspInit+0x80>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4a0e      	ldr	r2, [pc, #56]	@ (800398c <HAL_ADC_MspInit+0x80>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6313      	str	r3, [r2, #48]	@ 0x30
 800395a:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <HAL_ADC_MspInit+0x80>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 8003966:	233d      	movs	r3, #61	@ 0x3d
 8003968:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800396a:	2303      	movs	r3, #3
 800396c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	4619      	mov	r1, r3
 8003978:	4805      	ldr	r0, [pc, #20]	@ (8003990 <HAL_ADC_MspInit+0x84>)
 800397a:	f001 f951 	bl	8004c20 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800397e:	bf00      	nop
 8003980:	3728      	adds	r7, #40	@ 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40012000 	.word	0x40012000
 800398c:	40023800 	.word	0x40023800
 8003990:	40020000 	.word	0x40020000

08003994 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	@ 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	@ (8003a18 <HAL_SPI_MspInit+0x84>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d12c      	bne.n	8003a10 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	4b18      	ldr	r3, [pc, #96]	@ (8003a1c <HAL_SPI_MspInit+0x88>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <HAL_SPI_MspInit+0x88>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_SPI_MspInit+0x88>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b11      	ldr	r3, [pc, #68]	@ (8003a1c <HAL_SPI_MspInit+0x88>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	4a10      	ldr	r2, [pc, #64]	@ (8003a1c <HAL_SPI_MspInit+0x88>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e2:	4b0e      	ldr	r3, [pc, #56]	@ (8003a1c <HAL_SPI_MspInit+0x88>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 80039ee:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80039f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a00:	2305      	movs	r3, #5
 8003a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4805      	ldr	r0, [pc, #20]	@ (8003a20 <HAL_SPI_MspInit+0x8c>)
 8003a0c:	f001 f908 	bl	8004c20 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003a10:	bf00      	nop
 8003a12:	3728      	adds	r7, #40	@ 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40003800 	.word	0x40003800
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020400 	.word	0x40020400

08003a24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0e      	ldr	r2, [pc, #56]	@ (8003a6c <HAL_TIM_Base_MspInit+0x48>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d115      	bne.n	8003a62 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a70 <HAL_TIM_Base_MspInit+0x4c>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <HAL_TIM_Base_MspInit+0x4c>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <HAL_TIM_Base_MspInit+0x4c>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	2107      	movs	r1, #7
 8003a56:	2019      	movs	r0, #25
 8003a58:	f001 f819 	bl	8004a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a5c:	2019      	movs	r0, #25
 8003a5e:	f001 f832 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	@ 0x30
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 031c 	add.w	r3, r7, #28
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a94:	d14b      	bne.n	8003b2e <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4a37      	ldr	r2, [pc, #220]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac2:	4b35      	ldr	r3, [pc, #212]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	4a30      	ldr	r2, [pc, #192]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ad8:	f043 0302 	orr.w	r3, r3, #2
 8003adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ade:	4b2e      	ldr	r3, [pc, #184]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8003aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af0:	2302      	movs	r3, #2
 8003af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003afc:	2301      	movs	r3, #1
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8003b00:	f107 031c 	add.w	r3, r7, #28
 8003b04:	4619      	mov	r1, r3
 8003b06:	4825      	ldr	r0, [pc, #148]	@ (8003b9c <HAL_TIM_Encoder_MspInit+0x128>)
 8003b08:	f001 f88a 	bl	8004c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	481e      	ldr	r0, [pc, #120]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003b28:	f001 f87a 	bl	8004c20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b2c:	e030      	b.n	8003b90 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba4 <HAL_TIM_Encoder_MspInit+0x130>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d12b      	bne.n	8003b90 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4b16      	ldr	r3, [pc, #88]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b48:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b64:	4b0c      	ldr	r3, [pc, #48]	@ (8003b98 <HAL_TIM_Encoder_MspInit+0x124>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8003b70:	23c0      	movs	r3, #192	@ 0xc0
 8003b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b80:	2302      	movs	r3, #2
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003b8c:	f001 f848 	bl	8004c20 <HAL_GPIO_Init>
}
 8003b90:	bf00      	nop
 8003b92:	3730      	adds	r7, #48	@ 0x30
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40020000 	.word	0x40020000
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40000800 	.word	0x40000800

08003ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a12      	ldr	r2, [pc, #72]	@ (8003c10 <HAL_TIM_MspPostInit+0x68>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d11e      	bne.n	8003c08 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_TIM_MspPostInit+0x6c>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	4a10      	ldr	r2, [pc, #64]	@ (8003c14 <HAL_TIM_MspPostInit+0x6c>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bda:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <HAL_TIM_MspPostInit+0x6c>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8003be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8003bfc:	f107 030c 	add.w	r3, r7, #12
 8003c00:	4619      	mov	r1, r3
 8003c02:	4805      	ldr	r0, [pc, #20]	@ (8003c18 <HAL_TIM_MspPostInit+0x70>)
 8003c04:	f001 f80c 	bl	8004c20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003c08:	bf00      	nop
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40020000 	.word	0x40020000

08003c1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	@ 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb0 <HAL_UART_MspInit+0x94>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d134      	bne.n	8003ca8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb4 <HAL_UART_MspInit+0x98>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb4 <HAL_UART_MspInit+0x98>)
 8003c48:	f043 0320 	orr.w	r3, r3, #32
 8003c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c4e:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_UART_MspInit+0x98>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b15      	ldr	r3, [pc, #84]	@ (8003cb4 <HAL_UART_MspInit+0x98>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <HAL_UART_MspInit+0x98>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b12      	ldr	r3, [pc, #72]	@ (8003cb4 <HAL_UART_MspInit+0x98>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8003c76:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4619      	mov	r1, r3
 8003c92:	4809      	ldr	r0, [pc, #36]	@ (8003cb8 <HAL_UART_MspInit+0x9c>)
 8003c94:	f000 ffc4 	bl	8004c20 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2106      	movs	r1, #6
 8003c9c:	2047      	movs	r0, #71	@ 0x47
 8003c9e:	f000 fef6 	bl	8004a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ca2:	2047      	movs	r0, #71	@ 0x47
 8003ca4:	f000 ff0f 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8003ca8:	bf00      	nop
 8003caa:	3728      	adds	r7, #40	@ 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40020000 	.word	0x40020000

08003cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <NMI_Handler+0x4>

08003cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <HardFault_Handler+0x4>

08003ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <MemManage_Handler+0x4>

08003cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <BusFault_Handler+0x4>

08003cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <UsageFault_Handler+0x4>

08003ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d12:	f000 f9ab 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f001 f936 	bl	8004f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003d24:	bf00      	nop
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d2c:	4802      	ldr	r0, [pc, #8]	@ (8003d38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d2e:	f002 fe6d 	bl	8006a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000290 	.word	0x20000290

08003d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8003d40:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d44:	f001 f924 	bl	8004f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003d50:	4802      	ldr	r0, [pc, #8]	@ (8003d5c <USART6_IRQHandler+0x10>)
 8003d52:	f003 fd89 	bl	8007868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000368 	.word	0x20000368

08003d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return 1;
 8003d64:	2301      	movs	r3, #1
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_kill>:

int _kill(int pid, int sig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d7a:	f005 fa9b 	bl	80092b4 <__errno>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2216      	movs	r2, #22
 8003d82:	601a      	str	r2, [r3, #0]
  return -1;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_exit>:

void _exit (int status)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ffe7 	bl	8003d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003da2:	bf00      	nop
 8003da4:	e7fd      	b.n	8003da2 <_exit+0x12>

08003da6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	e00a      	b.n	8003dce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003db8:	f3af 8000 	nop.w
 8003dbc:	4601      	mov	r1, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	60ba      	str	r2, [r7, #8]
 8003dc4:	b2ca      	uxtb	r2, r1
 8003dc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	dbf0      	blt.n	8003db8 <_read+0x12>
  }

  return len;
 8003dd6:	687b      	ldr	r3, [r7, #4]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e009      	b.n	8003e06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	60ba      	str	r2, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	3301      	adds	r3, #1
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	dbf1      	blt.n	8003df2 <_write+0x12>
  }
  return len;
 8003e0e:	687b      	ldr	r3, [r7, #4]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_close>:

int _close(int file)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e40:	605a      	str	r2, [r3, #4]
  return 0;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_isatty>:

int _isatty(int file)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e58:	2301      	movs	r3, #1
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e88:	4a14      	ldr	r2, [pc, #80]	@ (8003edc <_sbrk+0x5c>)
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <_sbrk+0x60>)
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e94:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <_sbrk+0x64>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <_sbrk+0x64>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ee8 <_sbrk+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d207      	bcs.n	8003ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb0:	f005 fa00 	bl	80092b4 <__errno>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	e009      	b.n	8003ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec6:	4b07      	ldr	r3, [pc, #28]	@ (8003ee4 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	4a05      	ldr	r2, [pc, #20]	@ (8003ee4 <_sbrk+0x64>)
 8003ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3718      	adds	r7, #24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20020000 	.word	0x20020000
 8003ee0:	00000400 	.word	0x00000400
 8003ee4:	2000140c 	.word	0x2000140c
 8003ee8:	20001560 	.word	0x20001560

08003eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ef0:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <SystemInit+0x20>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef6:	4a05      	ldr	r2, [pc, #20]	@ (8003f0c <SystemInit+0x20>)
 8003ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000ed00 	.word	0xe000ed00

08003f10 <abs_int>:

/**
 * @brief Absolute value for integers
 */
int abs_int(int value)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    return (value < 0) ? -value : value;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bfb8      	it	lt
 8003f1e:	425b      	neglt	r3, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	460a      	mov	r2, r1
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2110      	movs	r1, #16
 8003f4c:	4808      	ldr	r0, [pc, #32]	@ (8003f70 <led_status+0x44>)
 8003f4e:	f000 ffeb 	bl	8004f28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003f52:	79bb      	ldrb	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf14      	ite	ne
 8003f58:	2301      	movne	r3, #1
 8003f5a:	2300      	moveq	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2120      	movs	r1, #32
 8003f62:	4803      	ldr	r0, [pc, #12]	@ (8003f70 <led_status+0x44>)
 8003f64:	f000 ffe0 	bl	8004f28 <HAL_GPIO_WritePin>
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40020400 	.word	0x40020400

08003f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f78:	f7ff ffb8 	bl	8003eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f7c:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f7e:	490d      	ldr	r1, [pc, #52]	@ (8003fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f80:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f84:	e002      	b.n	8003f8c <LoopCopyDataInit>

08003f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f8a:	3304      	adds	r3, #4

08003f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f90:	d3f9      	bcc.n	8003f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f92:	4a0a      	ldr	r2, [pc, #40]	@ (8003fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f94:	4c0a      	ldr	r4, [pc, #40]	@ (8003fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f98:	e001      	b.n	8003f9e <LoopFillZerobss>

08003f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f9c:	3204      	adds	r2, #4

08003f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fa0:	d3fb      	bcc.n	8003f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fa2:	f005 f98d 	bl	80092c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fa6:	f7fd fde5 	bl	8001b74 <main>
  bx  lr    
 8003faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fb4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003fb8:	0800ccd4 	.word	0x0800ccd4
  ldr r2, =_sbss
 8003fbc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003fc0:	20001560 	.word	0x20001560

08003fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fc4:	e7fe      	b.n	8003fc4 <ADC_IRQHandler>
	...

08003fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <HAL_Init+0x40>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8004008 <HAL_Init+0x40>)
 8003fd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_Init+0x40>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8004008 <HAL_Init+0x40>)
 8003fde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fe4:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <HAL_Init+0x40>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a07      	ldr	r2, [pc, #28]	@ (8004008 <HAL_Init+0x40>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	f000 fd41 	bl	8004a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ff6:	200f      	movs	r0, #15
 8003ff8:	f000 f808 	bl	800400c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ffc:	f7ff fc5e 	bl	80038bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00

0800400c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004014:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <HAL_InitTick+0x54>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b12      	ldr	r3, [pc, #72]	@ (8004064 <HAL_InitTick+0x58>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	4619      	mov	r1, r3
 800401e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004022:	fbb3 f3f1 	udiv	r3, r3, r1
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fd59 	bl	8004ae2 <HAL_SYSTICK_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e00e      	b.n	8004058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0f      	cmp	r3, #15
 800403e:	d80a      	bhi.n	8004056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004040:	2200      	movs	r2, #0
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	f000 fd21 	bl	8004a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800404c:	4a06      	ldr	r2, [pc, #24]	@ (8004068 <HAL_InitTick+0x5c>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000000 	.word	0x20000000
 8004064:	20000008 	.word	0x20000008
 8004068:	20000004 	.word	0x20000004

0800406c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_IncTick+0x20>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_IncTick+0x24>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4413      	add	r3, r2
 800407c:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <HAL_IncTick+0x24>)
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	bf00      	nop
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000008 	.word	0x20000008
 8004090:	20001410 	.word	0x20001410

08004094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return uwTick;
 8004098:	4b03      	ldr	r3, [pc, #12]	@ (80040a8 <HAL_GetTick+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20001410 	.word	0x20001410

080040ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff ffee 	bl	8004094 <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d005      	beq.n	80040d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <HAL_Delay+0x44>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040d2:	bf00      	nop
 80040d4:	f7ff ffde 	bl	8004094 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d8f7      	bhi.n	80040d4 <HAL_Delay+0x28>
  {
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000008 	.word	0x20000008

080040f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e033      	b.n	8004172 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff fbfa 	bl	800390c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d118      	bne.n	8004164 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800413a:	f023 0302 	bic.w	r3, r3, #2
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 faca 	bl	80046e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	f043 0201 	orr.w	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	@ 0x40
 8004162:	e001      	b.n	8004168 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Start+0x1a>
 8004192:	2302      	movs	r3, #2
 8004194:	e097      	b.n	80042c6 <HAL_ADC_Start+0x14a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d018      	beq.n	80041de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <HAL_ADC_Start+0x158>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a45      	ldr	r2, [pc, #276]	@ (80042d8 <HAL_ADC_Start+0x15c>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0c9a      	lsrs	r2, r3, #18
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80041d0:	e002      	b.n	80041d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f9      	bne.n	80041d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d15f      	bne.n	80042ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004216:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422a:	d106      	bne.n	800423a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004230:	f023 0206 	bic.w	r2, r3, #6
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	645a      	str	r2, [r3, #68]	@ 0x44
 8004238:	e002      	b.n	8004240 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004248:	4b24      	ldr	r3, [pc, #144]	@ (80042dc <HAL_ADC_Start+0x160>)
 800424a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004254:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d129      	bne.n	80042c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	e020      	b.n	80042c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a16      	ldr	r2, [pc, #88]	@ (80042e0 <HAL_ADC_Start+0x164>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d11b      	bne.n	80042c4 <HAL_ADC_Start+0x148>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d114      	bne.n	80042c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	e00b      	b.n	80042c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000
 80042d8:	431bde83 	.word	0x431bde83
 80042dc:	40012300 	.word	0x40012300
 80042e0:	40012000 	.word	0x40012000

080042e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_ADC_Stop+0x16>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e021      	b.n	800433e <HAL_ADC_Stop+0x5a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	d113      	bne.n	8004390 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004376:	d10b      	bne.n	8004390 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e063      	b.n	8004458 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004390:	f7ff fe80 	bl	8004094 <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004396:	e021      	b.n	80043dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d01d      	beq.n	80043dc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_ADC_PollForConversion+0x6c>
 80043a6:	f7ff fe75 	bl	8004094 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d212      	bcs.n	80043dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d00b      	beq.n	80043dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	f043 0204 	orr.w	r2, r3, #4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e03d      	b.n	8004458 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d1d6      	bne.n	8004398 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0212 	mvn.w	r2, #18
 80043f2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d123      	bne.n	8004456 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004412:	2b00      	cmp	r3, #0
 8004414:	d11f      	bne.n	8004456 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004420:	2b00      	cmp	r3, #0
 8004422:	d006      	beq.n	8004432 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800442e:	2b00      	cmp	r3, #0
 8004430:	d111      	bne.n	8004456 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x1c>
 8004494:	2302      	movs	r3, #2
 8004496:	e113      	b.n	80046c0 <HAL_ADC_ConfigChannel+0x244>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b09      	cmp	r3, #9
 80044a6:	d925      	bls.n	80044f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	4613      	mov	r3, r2
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4413      	add	r3, r2
 80044bc:	3b1e      	subs	r3, #30
 80044be:	2207      	movs	r2, #7
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43da      	mvns	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	400a      	ands	r2, r1
 80044cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68d9      	ldr	r1, [r3, #12]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	4618      	mov	r0, r3
 80044e0:	4603      	mov	r3, r0
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	4403      	add	r3, r0
 80044e6:	3b1e      	subs	r3, #30
 80044e8:	409a      	lsls	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	e022      	b.n	800453a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6919      	ldr	r1, [r3, #16]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	4613      	mov	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	4413      	add	r3, r2
 8004508:	2207      	movs	r2, #7
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43da      	mvns	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	400a      	ands	r2, r1
 8004516:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6919      	ldr	r1, [r3, #16]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	4618      	mov	r0, r3
 800452a:	4603      	mov	r3, r0
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4403      	add	r3, r0
 8004530:	409a      	lsls	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b06      	cmp	r3, #6
 8004540:	d824      	bhi.n	800458c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	3b05      	subs	r3, #5
 8004554:	221f      	movs	r2, #31
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43da      	mvns	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	400a      	ands	r2, r1
 8004562:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	4618      	mov	r0, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	3b05      	subs	r3, #5
 800457e:	fa00 f203 	lsl.w	r2, r0, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34
 800458a:	e04c      	b.n	8004626 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d824      	bhi.n	80045de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	3b23      	subs	r3, #35	@ 0x23
 80045a6:	221f      	movs	r2, #31
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43da      	mvns	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	400a      	ands	r2, r1
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4618      	mov	r0, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	3b23      	subs	r3, #35	@ 0x23
 80045d0:	fa00 f203 	lsl.w	r2, r0, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
 80045dc:	e023      	b.n	8004626 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	3b41      	subs	r3, #65	@ 0x41
 80045f0:	221f      	movs	r2, #31
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43da      	mvns	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	400a      	ands	r2, r1
 80045fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	4618      	mov	r0, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	3b41      	subs	r3, #65	@ 0x41
 800461a:	fa00 f203 	lsl.w	r2, r0, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004626:	4b29      	ldr	r3, [pc, #164]	@ (80046cc <HAL_ADC_ConfigChannel+0x250>)
 8004628:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a28      	ldr	r2, [pc, #160]	@ (80046d0 <HAL_ADC_ConfigChannel+0x254>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10f      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x1d8>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b12      	cmp	r3, #18
 800463a:	d10b      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_ADC_ConfigChannel+0x254>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d12b      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x23a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1c      	ldr	r2, [pc, #112]	@ (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <HAL_ADC_ConfigChannel+0x1f4>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b11      	cmp	r3, #17
 800466e:	d122      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a11      	ldr	r2, [pc, #68]	@ (80046d4 <HAL_ADC_ConfigChannel+0x258>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d111      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004692:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_ADC_ConfigChannel+0x25c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a11      	ldr	r2, [pc, #68]	@ (80046dc <HAL_ADC_ConfigChannel+0x260>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	0c9a      	lsrs	r2, r3, #18
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046a8:	e002      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f9      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	40012300 	.word	0x40012300
 80046d0:	40012000 	.word	0x40012000
 80046d4:	10000012 	.word	0x10000012
 80046d8:	20000000 	.word	0x20000000
 80046dc:	431bde83 	.word	0x431bde83

080046e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046e8:	4b79      	ldr	r3, [pc, #484]	@ (80048d0 <ADC_Init+0x1f0>)
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	021a      	lsls	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004738:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6859      	ldr	r1, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800475a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	4a58      	ldr	r2, [pc, #352]	@ (80048d4 <ADC_Init+0x1f4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004786:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6899      	ldr	r1, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80047a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6899      	ldr	r1, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	e00f      	b.n	80047de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0202 	bic.w	r2, r2, #2
 80047ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	7e1b      	ldrb	r3, [r3, #24]
 80047f8:	005a      	lsls	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800481a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800482a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	3b01      	subs	r3, #1
 8004838:	035a      	lsls	r2, r3, #13
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	e007      	b.n	8004854 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004852:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004862:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	3b01      	subs	r3, #1
 8004870:	051a      	lsls	r2, r3, #20
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6899      	ldr	r1, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004896:	025a      	lsls	r2, r3, #9
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6899      	ldr	r1, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	029a      	lsls	r2, r3, #10
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40012300 	.word	0x40012300
 80048d4:	0f000001 	.word	0x0f000001

080048d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e8:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <__NVIC_SetPriorityGrouping+0x44>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048f4:	4013      	ands	r3, r2
 80048f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800490a:	4a04      	ldr	r2, [pc, #16]	@ (800491c <__NVIC_SetPriorityGrouping+0x44>)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	60d3      	str	r3, [r2, #12]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004924:	4b04      	ldr	r3, [pc, #16]	@ (8004938 <__NVIC_GetPriorityGrouping+0x18>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 0307 	and.w	r3, r3, #7
}
 800492e:	4618      	mov	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494a:	2b00      	cmp	r3, #0
 800494c:	db0b      	blt.n	8004966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	4907      	ldr	r1, [pc, #28]	@ (8004974 <__NVIC_EnableIRQ+0x38>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2001      	movs	r0, #1
 800495e:	fa00 f202 	lsl.w	r2, r0, r2
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	e000e100 	.word	0xe000e100

08004978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	6039      	str	r1, [r7, #0]
 8004982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db0a      	blt.n	80049a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	490c      	ldr	r1, [pc, #48]	@ (80049c4 <__NVIC_SetPriority+0x4c>)
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	0112      	lsls	r2, r2, #4
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	440b      	add	r3, r1
 800499c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049a0:	e00a      	b.n	80049b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4908      	ldr	r1, [pc, #32]	@ (80049c8 <__NVIC_SetPriority+0x50>)
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3b04      	subs	r3, #4
 80049b0:	0112      	lsls	r2, r2, #4
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	440b      	add	r3, r1
 80049b6:	761a      	strb	r2, [r3, #24]
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000e100 	.word	0xe000e100
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	@ 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f1c3 0307 	rsb	r3, r3, #7
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	bf28      	it	cs
 80049ea:	2304      	movcs	r3, #4
 80049ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2b06      	cmp	r3, #6
 80049f4:	d902      	bls.n	80049fc <NVIC_EncodePriority+0x30>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3b03      	subs	r3, #3
 80049fa:	e000      	b.n	80049fe <NVIC_EncodePriority+0x32>
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	401a      	ands	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a14:	f04f 31ff 	mov.w	r1, #4294967295
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43d9      	mvns	r1, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a24:	4313      	orrs	r3, r2
         );
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3724      	adds	r7, #36	@ 0x24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a44:	d301      	bcc.n	8004a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00f      	b.n	8004a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a74 <SysTick_Config+0x40>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a52:	210f      	movs	r1, #15
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	f7ff ff8e 	bl	8004978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <SysTick_Config+0x40>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a62:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <SysTick_Config+0x40>)
 8004a64:	2207      	movs	r2, #7
 8004a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	e000e010 	.word	0xe000e010

08004a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff29 	bl	80048d8 <__NVIC_SetPriorityGrouping>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa0:	f7ff ff3e 	bl	8004920 <__NVIC_GetPriorityGrouping>
 8004aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff ff8e 	bl	80049cc <NVIC_EncodePriority>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff5d 	bl	8004978 <__NVIC_SetPriority>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff31 	bl	800493c <__NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffa2 	bl	8004a34 <SysTick_Config>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b084      	sub	sp, #16
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b08:	f7ff fac4 	bl	8004094 <HAL_GetTick>
 8004b0c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d008      	beq.n	8004b2c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2280      	movs	r2, #128	@ 0x80
 8004b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e052      	b.n	8004bd2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0216 	bic.w	r2, r2, #22
 8004b3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695a      	ldr	r2, [r3, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b4a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d103      	bne.n	8004b5c <HAL_DMA_Abort+0x62>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0208 	bic.w	r2, r2, #8
 8004b6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b7c:	e013      	b.n	8004ba6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b7e:	f7ff fa89 	bl	8004094 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d90c      	bls.n	8004ba6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2203      	movs	r2, #3
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e015      	b.n	8004bd2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e4      	bne.n	8004b7e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb8:	223f      	movs	r2, #63	@ 0x3f
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d004      	beq.n	8004bf8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2280      	movs	r2, #128	@ 0x80
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e00c      	b.n	8004c12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e159      	b.n	8004ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	f040 8148 	bne.w	8004eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d005      	beq.n	8004c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d130      	bne.n	8004cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 0201 	and.w	r2, r3, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d017      	beq.n	8004d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	2203      	movs	r2, #3
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d123      	bne.n	8004d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	08da      	lsrs	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3208      	adds	r2, #8
 8004d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	220f      	movs	r2, #15
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	08da      	lsrs	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3208      	adds	r2, #8
 8004d5e:	69b9      	ldr	r1, [r7, #24]
 8004d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a2 	beq.w	8004eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	4b57      	ldr	r3, [pc, #348]	@ (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	4a56      	ldr	r2, [pc, #344]	@ (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004db6:	4b54      	ldr	r3, [pc, #336]	@ (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dc2:	4a52      	ldr	r2, [pc, #328]	@ (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a49      	ldr	r2, [pc, #292]	@ (8004f10 <HAL_GPIO_Init+0x2f0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d019      	beq.n	8004e22 <HAL_GPIO_Init+0x202>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a48      	ldr	r2, [pc, #288]	@ (8004f14 <HAL_GPIO_Init+0x2f4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_GPIO_Init+0x1fe>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a47      	ldr	r2, [pc, #284]	@ (8004f18 <HAL_GPIO_Init+0x2f8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00d      	beq.n	8004e1a <HAL_GPIO_Init+0x1fa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a46      	ldr	r2, [pc, #280]	@ (8004f1c <HAL_GPIO_Init+0x2fc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <HAL_GPIO_Init+0x1f6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a45      	ldr	r2, [pc, #276]	@ (8004f20 <HAL_GPIO_Init+0x300>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_GPIO_Init+0x1f2>
 8004e0e:	2304      	movs	r3, #4
 8004e10:	e008      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e12:	2307      	movs	r3, #7
 8004e14:	e006      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e16:	2303      	movs	r3, #3
 8004e18:	e004      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e002      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e22:	2300      	movs	r3, #0
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	f002 0203 	and.w	r2, r2, #3
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	4093      	lsls	r3, r2
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e34:	4935      	ldr	r1, [pc, #212]	@ (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	089b      	lsrs	r3, r3, #2
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e42:	4b38      	ldr	r3, [pc, #224]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e66:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e90:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e96:	4b23      	ldr	r3, [pc, #140]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eba:	4a1a      	ldr	r2, [pc, #104]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec0:	4b18      	ldr	r3, [pc, #96]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	f67f aea2 	bls.w	8004c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	3724      	adds	r7, #36	@ 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40013800 	.word	0x40013800
 8004f10:	40020000 	.word	0x40020000
 8004f14:	40020400 	.word	0x40020400
 8004f18:	40020800 	.word	0x40020800
 8004f1c:	40020c00 	.word	0x40020c00
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40013c00 	.word	0x40013c00

08004f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
 8004f34:	4613      	mov	r3, r2
 8004f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f38:	787b      	ldrb	r3, [r7, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f44:	e003      	b.n	8004f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	041a      	lsls	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	619a      	str	r2, [r3, #24]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f6c:	887a      	ldrh	r2, [r7, #2]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4013      	ands	r3, r2
 8004f72:	041a      	lsls	r2, r3, #16
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43d9      	mvns	r1, r3
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	400b      	ands	r3, r1
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	619a      	str	r2, [r3, #24]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f9c:	695a      	ldr	r2, [r3, #20]
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d006      	beq.n	8004fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fa6:	4a05      	ldr	r2, [pc, #20]	@ (8004fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f806 	bl	8004fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40013c00 	.word	0x40013c00

08004fc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e267      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d075      	beq.n	80050e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ff6:	4b88      	ldr	r3, [pc, #544]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d00c      	beq.n	800501c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005002:	4b85      	ldr	r3, [pc, #532]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800500a:	2b08      	cmp	r3, #8
 800500c:	d112      	bne.n	8005034 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500e:	4b82      	ldr	r3, [pc, #520]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501a:	d10b      	bne.n	8005034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501c:	4b7e      	ldr	r3, [pc, #504]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05b      	beq.n	80050e0 <HAL_RCC_OscConfig+0x108>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d157      	bne.n	80050e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e242      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503c:	d106      	bne.n	800504c <HAL_RCC_OscConfig+0x74>
 800503e:	4b76      	ldr	r3, [pc, #472]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a75      	ldr	r2, [pc, #468]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e01d      	b.n	8005088 <HAL_RCC_OscConfig+0xb0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x98>
 8005056:	4b70      	ldr	r3, [pc, #448]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6f      	ldr	r2, [pc, #444]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800505c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b6d      	ldr	r3, [pc, #436]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6c      	ldr	r2, [pc, #432]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0xb0>
 8005070:	4b69      	ldr	r3, [pc, #420]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a68      	ldr	r2, [pc, #416]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b66      	ldr	r3, [pc, #408]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a65      	ldr	r2, [pc, #404]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7ff f800 	bl	8004094 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7fe fffc 	bl	8004094 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	@ 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e207      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0xc0>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fe ffec 	bl	8004094 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fe ffe8 	bl	8004094 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e1f3      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d2:	4b51      	ldr	r3, [pc, #324]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0xe8>
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d063      	beq.n	80051b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005102:	2b08      	cmp	r3, #8
 8005104:	d11c      	bne.n	8005140 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005106:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	4b41      	ldr	r3, [pc, #260]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_RCC_OscConfig+0x152>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e1c7      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b3b      	ldr	r3, [pc, #236]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4937      	ldr	r1, [pc, #220]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513e:	e03a      	b.n	80051b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005148:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCC_OscConfig+0x244>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fe ffa1 	bl	8004094 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005156:	f7fe ff9d 	bl	8004094 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e1a8      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005168:	4b2b      	ldr	r3, [pc, #172]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005174:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4925      	ldr	r1, [pc, #148]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]
 8005188:	e015      	b.n	80051b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518a:	4b24      	ldr	r3, [pc, #144]	@ (800521c <HAL_RCC_OscConfig+0x244>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fe ff80 	bl	8004094 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005198:	f7fe ff7c 	bl	8004094 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e187      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d036      	beq.n	8005230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <HAL_RCC_OscConfig+0x248>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fe ff60 	bl	8004094 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d8:	f7fe ff5c 	bl	8004094 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e167      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_RCC_OscConfig+0x240>)
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0x200>
 80051f6:	e01b      	b.n	8005230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f8:	4b09      	ldr	r3, [pc, #36]	@ (8005220 <HAL_RCC_OscConfig+0x248>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fe:	f7fe ff49 	bl	8004094 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005204:	e00e      	b.n	8005224 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005206:	f7fe ff45 	bl	8004094 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d907      	bls.n	8005224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e150      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
 8005218:	40023800 	.word	0x40023800
 800521c:	42470000 	.word	0x42470000
 8005220:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005224:	4b88      	ldr	r3, [pc, #544]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ea      	bne.n	8005206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8097 	beq.w	800536c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523e:	2300      	movs	r3, #0
 8005240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005242:	4b81      	ldr	r3, [pc, #516]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10f      	bne.n	800526e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	4b7d      	ldr	r3, [pc, #500]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005256:	4a7c      	ldr	r2, [pc, #496]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800525c:	6413      	str	r3, [r2, #64]	@ 0x40
 800525e:	4b7a      	ldr	r3, [pc, #488]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	4b77      	ldr	r3, [pc, #476]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d118      	bne.n	80052ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527a:	4b74      	ldr	r3, [pc, #464]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a73      	ldr	r2, [pc, #460]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7fe ff05 	bl	8004094 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fe ff01 	bl	8004094 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e10c      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	4b6a      	ldr	r3, [pc, #424]	@ (800544c <HAL_RCC_OscConfig+0x474>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x2ea>
 80052b4:	4b64      	ldr	r3, [pc, #400]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b8:	4a63      	ldr	r2, [pc, #396]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c0:	e01c      	b.n	80052fc <HAL_RCC_OscConfig+0x324>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x30c>
 80052ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	4a5b      	ldr	r2, [pc, #364]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e2:	e00b      	b.n	80052fc <HAL_RCC_OscConfig+0x324>
 80052e4:	4b58      	ldr	r3, [pc, #352]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	4a57      	ldr	r2, [pc, #348]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f0:	4b55      	ldr	r3, [pc, #340]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	4a54      	ldr	r2, [pc, #336]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f023 0304 	bic.w	r3, r3, #4
 80052fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d015      	beq.n	8005330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005304:	f7fe fec6 	bl	8004094 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530a:	e00a      	b.n	8005322 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7fe fec2 	bl	8004094 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0cb      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005322:	4b49      	ldr	r3, [pc, #292]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0ee      	beq.n	800530c <HAL_RCC_OscConfig+0x334>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005330:	f7fe feb0 	bl	8004094 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005336:	e00a      	b.n	800534e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005338:	f7fe feac 	bl	8004094 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0b5      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534e:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ee      	bne.n	8005338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d105      	bne.n	800536c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005360:	4b39      	ldr	r3, [pc, #228]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005364:	4a38      	ldr	r2, [pc, #224]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80a1 	beq.w	80054b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005376:	4b34      	ldr	r3, [pc, #208]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b08      	cmp	r3, #8
 8005380:	d05c      	beq.n	800543c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d141      	bne.n	800540e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538a:	4b31      	ldr	r3, [pc, #196]	@ (8005450 <HAL_RCC_OscConfig+0x478>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005390:	f7fe fe80 	bl	8004094 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fe fe7c 	bl	8004094 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e087      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053aa:	4b27      	ldr	r3, [pc, #156]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	3b01      	subs	r3, #1
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d8:	061b      	lsls	r3, r3, #24
 80053da:	491b      	ldr	r1, [pc, #108]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005450 <HAL_RCC_OscConfig+0x478>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e6:	f7fe fe55 	bl	8004094 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ee:	f7fe fe51 	bl	8004094 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e05c      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005400:	4b11      	ldr	r3, [pc, #68]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x416>
 800540c:	e054      	b.n	80054b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540e:	4b10      	ldr	r3, [pc, #64]	@ (8005450 <HAL_RCC_OscConfig+0x478>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fe fe3e 	bl	8004094 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541c:	f7fe fe3a 	bl	8004094 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e045      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <HAL_RCC_OscConfig+0x470>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x444>
 800543a:	e03d      	b.n	80054b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e038      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
 8005448:	40023800 	.word	0x40023800
 800544c:	40007000 	.word	0x40007000
 8005450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005454:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <HAL_RCC_OscConfig+0x4ec>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d028      	beq.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d121      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d11a      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005484:	4013      	ands	r3, r2
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800548a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800548c:	4293      	cmp	r3, r2
 800548e:	d111      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	3b01      	subs	r3, #1
 800549e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800

080054c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0cc      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054dc:	4b68      	ldr	r3, [pc, #416]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d90c      	bls.n	8005504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b65      	ldr	r3, [pc, #404]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	4b63      	ldr	r3, [pc, #396]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0b8      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800551c:	4b59      	ldr	r3, [pc, #356]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a58      	ldr	r2, [pc, #352]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005526:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005534:	4b53      	ldr	r3, [pc, #332]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4a52      	ldr	r2, [pc, #328]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800553a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800553e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005540:	4b50      	ldr	r3, [pc, #320]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	494d      	ldr	r1, [pc, #308]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d044      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d107      	bne.n	8005576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005566:	4b47      	ldr	r3, [pc, #284]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d119      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e07f      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d003      	beq.n	8005586 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005582:	2b03      	cmp	r3, #3
 8005584:	d107      	bne.n	8005596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005586:	4b3f      	ldr	r3, [pc, #252]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e06f      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005596:	4b3b      	ldr	r3, [pc, #236]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e067      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055a6:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f023 0203 	bic.w	r2, r3, #3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4934      	ldr	r1, [pc, #208]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055b8:	f7fe fd6c 	bl	8004094 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c0:	f7fe fd68 	bl	8004094 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e04f      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d6:	4b2b      	ldr	r3, [pc, #172]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 020c 	and.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1eb      	bne.n	80055c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e8:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d20c      	bcs.n	8005610 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f6:	4b22      	ldr	r3, [pc, #136]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fe:	4b20      	ldr	r3, [pc, #128]	@ (8005680 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d001      	beq.n	8005610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e032      	b.n	8005676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4916      	ldr	r1, [pc, #88]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	490e      	ldr	r1, [pc, #56]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800564e:	f000 f821 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8005652:	4602      	mov	r2, r0
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	490a      	ldr	r1, [pc, #40]	@ (8005688 <HAL_RCC_ClockConfig+0x1c0>)
 8005660:	5ccb      	ldrb	r3, [r1, r3]
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	4a09      	ldr	r2, [pc, #36]	@ (800568c <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_RCC_ClockConfig+0x1c8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fccc 	bl	800400c <HAL_InitTick>

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40023c00 	.word	0x40023c00
 8005684:	40023800 	.word	0x40023800
 8005688:	0800c934 	.word	0x0800c934
 800568c:	20000000 	.word	0x20000000
 8005690:	20000004 	.word	0x20000004

08005694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005698:	b090      	sub	sp, #64	@ 0x40
 800569a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ac:	4b59      	ldr	r3, [pc, #356]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d00d      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x40>
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	f200 80a1 	bhi.w	8005800 <HAL_RCC_GetSysClockFreq+0x16c>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0x34>
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d003      	beq.n	80056ce <HAL_RCC_GetSysClockFreq+0x3a>
 80056c6:	e09b      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056c8:	4b53      	ldr	r3, [pc, #332]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056cc:	e09b      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056ce:	4b53      	ldr	r3, [pc, #332]	@ (800581c <HAL_RCC_GetSysClockFreq+0x188>)
 80056d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056d2:	e098      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x180>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056de:	4b4d      	ldr	r3, [pc, #308]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x180>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d028      	beq.n	800573c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x180>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	2200      	movs	r2, #0
 80056f2:	623b      	str	r3, [r7, #32]
 80056f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056fc:	2100      	movs	r1, #0
 80056fe:	4b47      	ldr	r3, [pc, #284]	@ (800581c <HAL_RCC_GetSysClockFreq+0x188>)
 8005700:	fb03 f201 	mul.w	r2, r3, r1
 8005704:	2300      	movs	r3, #0
 8005706:	fb00 f303 	mul.w	r3, r0, r3
 800570a:	4413      	add	r3, r2
 800570c:	4a43      	ldr	r2, [pc, #268]	@ (800581c <HAL_RCC_GetSysClockFreq+0x188>)
 800570e:	fba0 1202 	umull	r1, r2, r0, r2
 8005712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005714:	460a      	mov	r2, r1
 8005716:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571a:	4413      	add	r3, r2
 800571c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	2200      	movs	r2, #0
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	61fa      	str	r2, [r7, #28]
 8005726:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800572a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800572e:	f7fb fa43 	bl	8000bb8 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4613      	mov	r3, r2
 8005738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800573a:	e053      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800573c:	4b35      	ldr	r3, [pc, #212]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x180>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	099b      	lsrs	r3, r3, #6
 8005742:	2200      	movs	r2, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	617a      	str	r2, [r7, #20]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800574e:	f04f 0b00 	mov.w	fp, #0
 8005752:	4652      	mov	r2, sl
 8005754:	465b      	mov	r3, fp
 8005756:	f04f 0000 	mov.w	r0, #0
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	0159      	lsls	r1, r3, #5
 8005760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005764:	0150      	lsls	r0, r2, #5
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	ebb2 080a 	subs.w	r8, r2, sl
 800576e:	eb63 090b 	sbc.w	r9, r3, fp
 8005772:	f04f 0200 	mov.w	r2, #0
 8005776:	f04f 0300 	mov.w	r3, #0
 800577a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800577e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005782:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005786:	ebb2 0408 	subs.w	r4, r2, r8
 800578a:	eb63 0509 	sbc.w	r5, r3, r9
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	00eb      	lsls	r3, r5, #3
 8005798:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800579c:	00e2      	lsls	r2, r4, #3
 800579e:	4614      	mov	r4, r2
 80057a0:	461d      	mov	r5, r3
 80057a2:	eb14 030a 	adds.w	r3, r4, sl
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	eb45 030b 	adc.w	r3, r5, fp
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ba:	4629      	mov	r1, r5
 80057bc:	028b      	lsls	r3, r1, #10
 80057be:	4621      	mov	r1, r4
 80057c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057c4:	4621      	mov	r1, r4
 80057c6:	028a      	lsls	r2, r1, #10
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ce:	2200      	movs	r2, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	60fa      	str	r2, [r7, #12]
 80057d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d8:	f7fb f9ee 	bl	8000bb8 <__aeabi_uldivmod>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4613      	mov	r3, r2
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <HAL_RCC_GetSysClockFreq+0x180>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	3301      	adds	r3, #1
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057fe:	e002      	b.n	8005806 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005800:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_RCC_GetSysClockFreq+0x184>)
 8005802:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005808:	4618      	mov	r0, r3
 800580a:	3740      	adds	r7, #64	@ 0x40
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005812:	bf00      	nop
 8005814:	40023800 	.word	0x40023800
 8005818:	00f42400 	.word	0x00f42400
 800581c:	017d7840 	.word	0x017d7840

08005820 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005824:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <HAL_RCC_GetHCLKFreq+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000000 	.word	0x20000000

08005838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800583c:	f7ff fff0 	bl	8005820 <HAL_RCC_GetHCLKFreq>
 8005840:	4602      	mov	r2, r0
 8005842:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	0a9b      	lsrs	r3, r3, #10
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4903      	ldr	r1, [pc, #12]	@ (800585c <HAL_RCC_GetPCLK1Freq+0x24>)
 800584e:	5ccb      	ldrb	r3, [r1, r3]
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005854:	4618      	mov	r0, r3
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40023800 	.word	0x40023800
 800585c:	0800c944 	.word	0x0800c944

08005860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005864:	f7ff ffdc 	bl	8005820 <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	0b5b      	lsrs	r3, r3, #13
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4903      	ldr	r1, [pc, #12]	@ (8005884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40023800 	.word	0x40023800
 8005884:	0800c944 	.word	0x0800c944

08005888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e07b      	b.n	8005992 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d108      	bne.n	80058b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058aa:	d009      	beq.n	80058c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	61da      	str	r2, [r3, #28]
 80058b2:	e005      	b.n	80058c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fe f85a 	bl	8003994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005944:	ea42 0103 	orr.w	r1, r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	f003 0104 	and.w	r1, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	f003 0210 	and.w	r2, r3, #16
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b088      	sub	sp, #32
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	4613      	mov	r3, r2
 80059a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059aa:	f7fe fb73 	bl	8004094 <HAL_GetTick>
 80059ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
 80059c2:	e12a      	b.n	8005c1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_SPI_Transmit+0x36>
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e122      	b.n	8005c1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_Transmit+0x48>
 80059de:	2302      	movs	r3, #2
 80059e0:	e11b      	b.n	8005c1a <HAL_SPI_Transmit+0x280>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	88fa      	ldrh	r2, [r7, #6]
 8005a02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a30:	d10f      	bne.n	8005a52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5c:	2b40      	cmp	r3, #64	@ 0x40
 8005a5e:	d007      	beq.n	8005a70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a78:	d152      	bne.n	8005b20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_Transmit+0xee>
 8005a82:	8b7b      	ldrh	r3, [r7, #26]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d145      	bne.n	8005b14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aac:	e032      	b.n	8005b14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d112      	bne.n	8005ae2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ae0:	e018      	b.n	8005b14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae2:	f7fe fad7 	bl	8004094 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d803      	bhi.n	8005afa <HAL_SPI_Transmit+0x160>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d102      	bne.n	8005b00 <HAL_SPI_Transmit+0x166>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e082      	b.n	8005c1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1c7      	bne.n	8005aae <HAL_SPI_Transmit+0x114>
 8005b1e:	e053      	b.n	8005bc8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_Transmit+0x194>
 8005b28:	8b7b      	ldrh	r3, [r7, #26]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d147      	bne.n	8005bbe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	7812      	ldrb	r2, [r2, #0]
 8005b3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b54:	e033      	b.n	8005bbe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d113      	bne.n	8005b8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b8a:	e018      	b.n	8005bbe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b8c:	f7fe fa82 	bl	8004094 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d803      	bhi.n	8005ba4 <HAL_SPI_Transmit+0x20a>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d102      	bne.n	8005baa <HAL_SPI_Transmit+0x210>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e02d      	b.n	8005c1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1c6      	bne.n	8005b56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fbd9 	bl	8006384 <SPI_EndRxTxTransaction>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e000      	b.n	8005c1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c18:	2300      	movs	r3, #0
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b088      	sub	sp, #32
 8005c26:	af02      	add	r7, sp, #8
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d001      	beq.n	8005c42 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e104      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <HAL_SPI_Receive+0x2c>
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0fc      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c5a:	d112      	bne.n	8005c82 <HAL_SPI_Receive+0x60>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10e      	bne.n	8005c82 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2204      	movs	r2, #4
 8005c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f8eb 	bl	8005e54 <HAL_SPI_TransmitReceive>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	e0e4      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c82:	f7fe fa07 	bl	8004094 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_SPI_Receive+0x74>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0da      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	88fa      	ldrh	r2, [r7, #6]
 8005cb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	88fa      	ldrh	r2, [r7, #6]
 8005cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce4:	d10f      	bne.n	8005d06 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b40      	cmp	r3, #64	@ 0x40
 8005d12:	d007      	beq.n	8005d24 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d170      	bne.n	8005e0e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d2c:	e035      	b.n	8005d9a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d115      	bne.n	8005d68 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f103 020c 	add.w	r2, r3, #12
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	7812      	ldrb	r2, [r2, #0]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	1c5a      	adds	r2, r3, #1
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d66:	e018      	b.n	8005d9a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d68:	f7fe f994 	bl	8004094 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d803      	bhi.n	8005d80 <HAL_SPI_Receive+0x15e>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7e:	d102      	bne.n	8005d86 <HAL_SPI_Receive+0x164>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e058      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1c4      	bne.n	8005d2e <HAL_SPI_Receive+0x10c>
 8005da4:	e038      	b.n	8005e18 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d113      	bne.n	8005ddc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	1c9a      	adds	r2, r3, #2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dda:	e018      	b.n	8005e0e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ddc:	f7fe f95a 	bl	8004094 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d803      	bhi.n	8005df4 <HAL_SPI_Receive+0x1d2>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d102      	bne.n	8005dfa <HAL_SPI_Receive+0x1d8>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e01e      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1c6      	bne.n	8005da6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fa4b 	bl	80062b8 <SPI_EndRxTransaction>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	@ 0x28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e62:	2301      	movs	r3, #1
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e66:	f7fe f915 	bl	8004094 <HAL_GetTick>
 8005e6a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e72:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e7a:	887b      	ldrh	r3, [r7, #2]
 8005e7c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e7e:	7ffb      	ldrb	r3, [r7, #31]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d00c      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x4a>
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e8a:	d106      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <HAL_SPI_TransmitReceive+0x46>
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d001      	beq.n	8005e9e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e17f      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x5c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x5c>
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e174      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_SPI_TransmitReceive+0x6e>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e16d      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d003      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2205      	movs	r2, #5
 8005eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	887a      	ldrh	r2, [r7, #2]
 8005eee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	887a      	ldrh	r2, [r7, #2]
 8005ef4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	887a      	ldrh	r2, [r7, #2]
 8005f06:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1e:	2b40      	cmp	r3, #64	@ 0x40
 8005f20:	d007      	beq.n	8005f32 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f3a:	d17e      	bne.n	800603a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <HAL_SPI_TransmitReceive+0xf6>
 8005f44:	8afb      	ldrh	r3, [r7, #22]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d16c      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6e:	e059      	b.n	8006024 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d11b      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x162>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d016      	beq.n	8005fb6 <HAL_SPI_TransmitReceive+0x162>
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d113      	bne.n	8005fb6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d119      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x1a4>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d014      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	b292      	uxth	r2, r2
 8005fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ff8:	f7fe f84c 	bl	8004094 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006004:	429a      	cmp	r2, r3
 8006006:	d80d      	bhi.n	8006024 <HAL_SPI_TransmitReceive+0x1d0>
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d009      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e0bc      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1a0      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x11c>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d19b      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x11c>
 8006038:	e082      	b.n	8006140 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x1f4>
 8006042:	8afb      	ldrh	r3, [r7, #22]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d171      	bne.n	800612c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800606e:	e05d      	b.n	800612c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d11c      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x264>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d017      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x264>
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	2b01      	cmp	r3, #1
 800608c:	d114      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d119      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x2a6>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d014      	beq.n	80060fa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060f6:	2301      	movs	r3, #1
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060fa:	f7fd ffcb 	bl	8004094 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006106:	429a      	cmp	r2, r3
 8006108:	d803      	bhi.n	8006112 <HAL_SPI_TransmitReceive+0x2be>
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d102      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x2c4>
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e038      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d19c      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x21c>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d197      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f91d 	bl	8006384 <SPI_EndRxTxTransaction>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e01d      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e000      	b.n	800619e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800619c:	2300      	movs	r3, #0
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3728      	adds	r7, #40	@ 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061b8:	f7fd ff6c 	bl	8004094 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	4413      	add	r3, r2
 80061c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061c8:	f7fd ff64 	bl	8004094 <HAL_GetTick>
 80061cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ce:	4b39      	ldr	r3, [pc, #228]	@ (80062b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	015b      	lsls	r3, r3, #5
 80061d4:	0d1b      	lsrs	r3, r3, #20
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061de:	e055      	b.n	800628c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d051      	beq.n	800628c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061e8:	f7fd ff54 	bl	8004094 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d902      	bls.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d13d      	bne.n	800627a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800620c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006216:	d111      	bne.n	800623c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006220:	d004      	beq.n	800622c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800622a:	d107      	bne.n	800623c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800623a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006244:	d10f      	bne.n	8006266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e018      	b.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	e002      	b.n	800628c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	3b01      	subs	r3, #1
 800628a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4013      	ands	r3, r2
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	bf0c      	ite	eq
 800629c:	2301      	moveq	r3, #1
 800629e:	2300      	movne	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d19a      	bne.n	80061e0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000000 	.word	0x20000000

080062b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af02      	add	r7, sp, #8
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062cc:	d111      	bne.n	80062f2 <SPI_EndRxTransaction+0x3a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d6:	d004      	beq.n	80062e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e0:	d107      	bne.n	80062f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062fa:	d12a      	bne.n	8006352 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006304:	d012      	beq.n	800632c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2200      	movs	r2, #0
 800630e:	2180      	movs	r1, #128	@ 0x80
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff ff49 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d02d      	beq.n	8006378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e026      	b.n	800637a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	2101      	movs	r1, #1
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff ff36 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01a      	beq.n	8006378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006346:	f043 0220 	orr.w	r2, r3, #32
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e013      	b.n	800637a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	2101      	movs	r1, #1
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff ff23 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	f043 0220 	orr.w	r2, r3, #32
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e000      	b.n	800637a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2201      	movs	r2, #1
 8006398:	2102      	movs	r1, #2
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff ff04 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e032      	b.n	800641c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006424 <SPI_EndRxTxTransaction+0xa0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006428 <SPI_EndRxTxTransaction+0xa4>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	0d5b      	lsrs	r3, r3, #21
 80063c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d4:	d112      	bne.n	80063fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2200      	movs	r2, #0
 80063de:	2180      	movs	r1, #128	@ 0x80
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fee1 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d016      	beq.n	800641a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063f0:	f043 0220 	orr.w	r2, r3, #32
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e00f      	b.n	800641c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	3b01      	subs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d0f2      	beq.n	80063fc <SPI_EndRxTxTransaction+0x78>
 8006416:	e000      	b.n	800641a <SPI_EndRxTxTransaction+0x96>
        break;
 8006418:	bf00      	nop
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000000 	.word	0x20000000
 8006428:	165e9f81 	.word	0x165e9f81

0800642c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e041      	b.n	80064c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fd fae6 	bl	8003a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f000 fd7a 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e041      	b.n	8006560 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f839 	bl	8006568 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fd2b 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d109      	bne.n	80065a0 <HAL_TIM_PWM_Start+0x24>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e022      	b.n	80065e6 <HAL_TIM_PWM_Start+0x6a>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d109      	bne.n	80065ba <HAL_TIM_PWM_Start+0x3e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	bf14      	ite	ne
 80065b2:	2301      	movne	r3, #1
 80065b4:	2300      	moveq	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	e015      	b.n	80065e6 <HAL_TIM_PWM_Start+0x6a>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d109      	bne.n	80065d4 <HAL_TIM_PWM_Start+0x58>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e008      	b.n	80065e6 <HAL_TIM_PWM_Start+0x6a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	bf14      	ite	ne
 80065e0:	2301      	movne	r3, #1
 80065e2:	2300      	moveq	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e068      	b.n	80066c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_PWM_Start+0x82>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065fc:	e013      	b.n	8006626 <HAL_TIM_PWM_Start+0xaa>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d104      	bne.n	800660e <HAL_TIM_PWM_Start+0x92>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800660c:	e00b      	b.n	8006626 <HAL_TIM_PWM_Start+0xaa>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d104      	bne.n	800661e <HAL_TIM_PWM_Start+0xa2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800661c:	e003      	b.n	8006626 <HAL_TIM_PWM_Start+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2201      	movs	r2, #1
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 ff44 	bl	80074bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a23      	ldr	r2, [pc, #140]	@ (80066c8 <HAL_TIM_PWM_Start+0x14c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d107      	bne.n	800664e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800664c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1d      	ldr	r2, [pc, #116]	@ (80066c8 <HAL_TIM_PWM_Start+0x14c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d018      	beq.n	800668a <HAL_TIM_PWM_Start+0x10e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006660:	d013      	beq.n	800668a <HAL_TIM_PWM_Start+0x10e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a19      	ldr	r2, [pc, #100]	@ (80066cc <HAL_TIM_PWM_Start+0x150>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00e      	beq.n	800668a <HAL_TIM_PWM_Start+0x10e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a17      	ldr	r2, [pc, #92]	@ (80066d0 <HAL_TIM_PWM_Start+0x154>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d009      	beq.n	800668a <HAL_TIM_PWM_Start+0x10e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a16      	ldr	r2, [pc, #88]	@ (80066d4 <HAL_TIM_PWM_Start+0x158>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d004      	beq.n	800668a <HAL_TIM_PWM_Start+0x10e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a14      	ldr	r2, [pc, #80]	@ (80066d8 <HAL_TIM_PWM_Start+0x15c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b06      	cmp	r3, #6
 800669a:	d010      	beq.n	80066be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ac:	e007      	b.n	80066be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40010000 	.word	0x40010000
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40014000 	.word	0x40014000

080066dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fee4 	bl	80074bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <HAL_TIM_PWM_Stop+0xc4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d117      	bne.n	800672e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006708:	4013      	ands	r3, r2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10f      	bne.n	800672e <HAL_TIM_PWM_Stop+0x52>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	f240 4344 	movw	r3, #1092	@ 0x444
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <HAL_TIM_PWM_Stop+0x52>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10f      	bne.n	800675e <HAL_TIM_PWM_Stop+0x82>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	f240 4344 	movw	r3, #1092	@ 0x444
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d107      	bne.n	800675e <HAL_TIM_PWM_Stop+0x82>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_TIM_PWM_Stop+0x92>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800676c:	e013      	b.n	8006796 <HAL_TIM_PWM_Stop+0xba>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b04      	cmp	r3, #4
 8006772:	d104      	bne.n	800677e <HAL_TIM_PWM_Stop+0xa2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800677c:	e00b      	b.n	8006796 <HAL_TIM_PWM_Stop+0xba>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d104      	bne.n	800678e <HAL_TIM_PWM_Stop+0xb2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800678c:	e003      	b.n	8006796 <HAL_TIM_PWM_Stop+0xba>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40010000 	.word	0x40010000

080067a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e097      	b.n	80068e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fd f951 	bl	8003a74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067e8:	f023 0307 	bic.w	r3, r3, #7
 80067ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f000 fbb3 	bl	8006f64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	021b      	lsls	r3, r3, #8
 8006836:	4313      	orrs	r3, r2
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006844:	f023 030c 	bic.w	r3, r3, #12
 8006848:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	4313      	orrs	r3, r2
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	011a      	lsls	r2, r3, #4
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	031b      	lsls	r3, r3, #12
 8006874:	4313      	orrs	r3, r2
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	4313      	orrs	r3, r2
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006900:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006908:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006910:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006918:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d110      	bne.n	8006942 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d102      	bne.n	800692c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006926:	7b7b      	ldrb	r3, [r7, #13]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d001      	beq.n	8006930 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e069      	b.n	8006a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006940:	e031      	b.n	80069a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b04      	cmp	r3, #4
 8006946:	d110      	bne.n	800696a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d102      	bne.n	8006954 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800694e:	7b3b      	ldrb	r3, [r7, #12]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d001      	beq.n	8006958 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e055      	b.n	8006a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006968:	e01d      	b.n	80069a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d108      	bne.n	8006982 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d105      	bne.n	8006982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006976:	7b7b      	ldrb	r3, [r7, #13]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d102      	bne.n	8006982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800697c:	7b3b      	ldrb	r3, [r7, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d001      	beq.n	8006986 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e03e      	b.n	8006a04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_TIM_Encoder_Start+0xc4>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d008      	beq.n	80069c4 <HAL_TIM_Encoder_Start+0xd4>
 80069b2:	e00f      	b.n	80069d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fd7d 	bl	80074bc <TIM_CCxChannelCmd>
      break;
 80069c2:	e016      	b.n	80069f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	2104      	movs	r1, #4
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fd75 	bl	80074bc <TIM_CCxChannelCmd>
      break;
 80069d2:	e00e      	b.n	80069f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2201      	movs	r2, #1
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fd6d 	bl	80074bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2201      	movs	r2, #1
 80069e8:	2104      	movs	r1, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fd66 	bl	80074bc <TIM_CCxChannelCmd>
      break;
 80069f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0201 	orr.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d020      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01b      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0202 	mvn.w	r2, #2
 8006a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa65 	bl	8006f26 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa57 	bl	8006f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fa68 	bl	8006f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d020      	beq.n	8006abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0204 	mvn.w	r2, #4
 8006a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa3f 	bl	8006f26 <HAL_TIM_IC_CaptureCallback>
 8006aa8:	e005      	b.n	8006ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa31 	bl	8006f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa42 	bl	8006f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d020      	beq.n	8006b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01b      	beq.n	8006b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0208 	mvn.w	r2, #8
 8006ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2204      	movs	r2, #4
 8006ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa19 	bl	8006f26 <HAL_TIM_IC_CaptureCallback>
 8006af4:	e005      	b.n	8006b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa0b 	bl	8006f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa1c 	bl	8006f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d020      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 0310 	and.w	r3, r3, #16
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01b      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0210 	mvn.w	r2, #16
 8006b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f9f3 	bl	8006f26 <HAL_TIM_IC_CaptureCallback>
 8006b40:	e005      	b.n	8006b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9e5 	bl	8006f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9f6 	bl	8006f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00c      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0201 	mvn.w	r2, #1
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9c3 	bl	8006efe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00c      	beq.n	8006b9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fd80 	bl	800769c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9c7 	bl	8006f4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f06f 0220 	mvn.w	r2, #32
 8006bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fd52 	bl	8007688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e0ae      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b0c      	cmp	r3, #12
 8006c16:	f200 809f 	bhi.w	8006d58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006d59 	.word	0x08006d59
 8006c28:	08006d59 	.word	0x08006d59
 8006c2c:	08006d59 	.word	0x08006d59
 8006c30:	08006c95 	.word	0x08006c95
 8006c34:	08006d59 	.word	0x08006d59
 8006c38:	08006d59 	.word	0x08006d59
 8006c3c:	08006d59 	.word	0x08006d59
 8006c40:	08006cd7 	.word	0x08006cd7
 8006c44:	08006d59 	.word	0x08006d59
 8006c48:	08006d59 	.word	0x08006d59
 8006c4c:	08006d59 	.word	0x08006d59
 8006c50:	08006d17 	.word	0x08006d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fa08 	bl	8007070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0208 	orr.w	r2, r2, #8
 8006c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0204 	bic.w	r2, r2, #4
 8006c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6999      	ldr	r1, [r3, #24]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	619a      	str	r2, [r3, #24]
      break;
 8006c92:	e064      	b.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fa4e 	bl	800713c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6999      	ldr	r1, [r3, #24]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	619a      	str	r2, [r3, #24]
      break;
 8006cd4:	e043      	b.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fa99 	bl	8007214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0208 	orr.w	r2, r2, #8
 8006cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0204 	bic.w	r2, r2, #4
 8006d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	61da      	str	r2, [r3, #28]
      break;
 8006d14:	e023      	b.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 fae3 	bl	80072e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69d9      	ldr	r1, [r3, #28]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	021a      	lsls	r2, r3, #8
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	61da      	str	r2, [r3, #28]
      break;
 8006d56:	e002      	b.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_ConfigClockSource+0x1c>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e0b4      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x186>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc4:	d03e      	beq.n	8006e44 <HAL_TIM_ConfigClockSource+0xd4>
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dca:	f200 8087 	bhi.w	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd2:	f000 8086 	beq.w	8006ee2 <HAL_TIM_ConfigClockSource+0x172>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dda:	d87f      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b70      	cmp	r3, #112	@ 0x70
 8006dde:	d01a      	beq.n	8006e16 <HAL_TIM_ConfigClockSource+0xa6>
 8006de0:	2b70      	cmp	r3, #112	@ 0x70
 8006de2:	d87b      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b60      	cmp	r3, #96	@ 0x60
 8006de6:	d050      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x11a>
 8006de8:	2b60      	cmp	r3, #96	@ 0x60
 8006dea:	d877      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b50      	cmp	r3, #80	@ 0x50
 8006dee:	d03c      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0xfa>
 8006df0:	2b50      	cmp	r3, #80	@ 0x50
 8006df2:	d873      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b40      	cmp	r3, #64	@ 0x40
 8006df6:	d058      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x13a>
 8006df8:	2b40      	cmp	r3, #64	@ 0x40
 8006dfa:	d86f      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b30      	cmp	r3, #48	@ 0x30
 8006dfe:	d064      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x15a>
 8006e00:	2b30      	cmp	r3, #48	@ 0x30
 8006e02:	d86b      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d060      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x15a>
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d867      	bhi.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d05c      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x15a>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d05a      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x15a>
 8006e14:	e062      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e26:	f000 fb29 	bl	800747c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	609a      	str	r2, [r3, #8]
      break;
 8006e42:	e04f      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e54:	f000 fb12 	bl	800747c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e66:	609a      	str	r2, [r3, #8]
      break;
 8006e68:	e03c      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 fa86 	bl	8007388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2150      	movs	r1, #80	@ 0x50
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fadf 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e02c      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e96:	461a      	mov	r2, r3
 8006e98:	f000 faa5 	bl	80073e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2160      	movs	r1, #96	@ 0x60
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 facf 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006ea8:	e01c      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f000 fa66 	bl	8007388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2140      	movs	r1, #64	@ 0x40
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 fabf 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006ec8:	e00c      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f000 fab6 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006eda:	e003      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	e000      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a37      	ldr	r2, [pc, #220]	@ (8007054 <TIM_Base_SetConfig+0xf0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00f      	beq.n	8006f9c <TIM_Base_SetConfig+0x38>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f82:	d00b      	beq.n	8006f9c <TIM_Base_SetConfig+0x38>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a34      	ldr	r2, [pc, #208]	@ (8007058 <TIM_Base_SetConfig+0xf4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_Base_SetConfig+0x38>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a33      	ldr	r2, [pc, #204]	@ (800705c <TIM_Base_SetConfig+0xf8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_Base_SetConfig+0x38>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a32      	ldr	r2, [pc, #200]	@ (8007060 <TIM_Base_SetConfig+0xfc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a28      	ldr	r2, [pc, #160]	@ (8007054 <TIM_Base_SetConfig+0xf0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01b      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbc:	d017      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a25      	ldr	r2, [pc, #148]	@ (8007058 <TIM_Base_SetConfig+0xf4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a24      	ldr	r2, [pc, #144]	@ (800705c <TIM_Base_SetConfig+0xf8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a23      	ldr	r2, [pc, #140]	@ (8007060 <TIM_Base_SetConfig+0xfc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	@ (8007064 <TIM_Base_SetConfig+0x100>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a21      	ldr	r2, [pc, #132]	@ (8007068 <TIM_Base_SetConfig+0x104>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0x8a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a20      	ldr	r2, [pc, #128]	@ (800706c <TIM_Base_SetConfig+0x108>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d108      	bne.n	8007000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a0c      	ldr	r2, [pc, #48]	@ (8007054 <TIM_Base_SetConfig+0xf0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d103      	bne.n	800702e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	691a      	ldr	r2, [r3, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f043 0204 	orr.w	r2, r3, #4
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	601a      	str	r2, [r3, #0]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40014000 	.word	0x40014000
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800

08007070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f023 0201 	bic.w	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 0302 	bic.w	r3, r3, #2
 80070b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007138 <TIM_OC1_SetConfig+0xc8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10c      	bne.n	80070e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0308 	bic.w	r3, r3, #8
 80070d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	4313      	orrs	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f023 0304 	bic.w	r3, r3, #4
 80070e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a13      	ldr	r2, [pc, #76]	@ (8007138 <TIM_OC1_SetConfig+0xc8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d111      	bne.n	8007112 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40010000 	.word	0x40010000

0800713c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f023 0210 	bic.w	r2, r3, #16
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0320 	bic.w	r3, r3, #32
 8007186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a1e      	ldr	r2, [pc, #120]	@ (8007210 <TIM_OC2_SetConfig+0xd4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d10d      	bne.n	80071b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <TIM_OC2_SetConfig+0xd4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d113      	bne.n	80071e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000

08007214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800725c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <TIM_OC3_SetConfig+0xd0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d10d      	bne.n	800728e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a14      	ldr	r2, [pc, #80]	@ (80072e4 <TIM_OC3_SetConfig+0xd0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d113      	bne.n	80072be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800729c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	621a      	str	r2, [r3, #32]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	40010000 	.word	0x40010000

080072e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a10      	ldr	r2, [pc, #64]	@ (8007384 <TIM_OC4_SetConfig+0x9c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d109      	bne.n	800735c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800734e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40010000 	.word	0x40010000

08007388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f023 0201 	bic.w	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 030a 	bic.w	r3, r3, #10
 80073c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f023 0210 	bic.w	r2, r3, #16
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	031b      	lsls	r3, r3, #12
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007422:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	f043 0307 	orr.w	r3, r3, #7
 8007468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	609a      	str	r2, [r3, #8]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	021a      	lsls	r2, r3, #8
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	431a      	orrs	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	609a      	str	r2, [r3, #8]
}
 80074b0:	bf00      	nop
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	2201      	movs	r2, #1
 80074d0:	fa02 f303 	lsl.w	r3, r2, r3
 80074d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1a      	ldr	r2, [r3, #32]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	43db      	mvns	r3, r3
 80074de:	401a      	ands	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a1a      	ldr	r2, [r3, #32]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	fa01 f303 	lsl.w	r3, r1, r3
 80074f4:	431a      	orrs	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800751c:	2302      	movs	r3, #2
 800751e:	e050      	b.n	80075c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1c      	ldr	r2, [pc, #112]	@ (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756c:	d013      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a18      	ldr	r2, [pc, #96]	@ (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a16      	ldr	r2, [pc, #88]	@ (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a15      	ldr	r2, [pc, #84]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a13      	ldr	r2, [pc, #76]	@ (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d10c      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800759c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40014000 	.word	0x40014000

080075e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e03d      	b.n	800767c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e042      	b.n	8007748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7fc faa0 	bl	8003c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2224      	movs	r2, #36	@ 0x24
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fd7f 	bl	80081f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695a      	ldr	r2, [r3, #20]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	@ 0x28
 8007754:	af02      	add	r7, sp, #8
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b20      	cmp	r3, #32
 800776e:	d175      	bne.n	800785c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_UART_Transmit+0x2c>
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e06e      	b.n	800785e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2221      	movs	r2, #33	@ 0x21
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800778e:	f7fc fc81 	bl	8004094 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077a8:	d108      	bne.n	80077bc <HAL_UART_Transmit+0x6c>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	e003      	b.n	80077c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077c4:	e02e      	b.n	8007824 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2200      	movs	r2, #0
 80077ce:	2180      	movs	r1, #128	@ 0x80
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fb1d 	bl	8007e10 <UART_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e03a      	b.n	800785e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10b      	bne.n	8007806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	3302      	adds	r3, #2
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	e007      	b.n	8007816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3301      	adds	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29a      	uxth	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1cb      	bne.n	80077c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2200      	movs	r2, #0
 8007836:	2140      	movs	r1, #64	@ 0x40
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fae9 	bl	8007e10 <UART_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e006      	b.n	800785e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	e000      	b.n	800785e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800785c:	2302      	movs	r3, #2
  }
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b0ba      	sub	sp, #232	@ 0xe8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800788e:	2300      	movs	r3, #0
 8007890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80078a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10f      	bne.n	80078ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <HAL_UART_IRQHandler+0x66>
 80078ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fbd7 	bl	800807a <UART_Receive_IT>
      return;
 80078cc:	e273      	b.n	8007db6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 80de 	beq.w	8007a94 <HAL_UART_IRQHandler+0x22c>
 80078d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 80d1 	beq.w	8007a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <HAL_UART_IRQHandler+0xae>
 80078fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790e:	f043 0201 	orr.w	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <HAL_UART_IRQHandler+0xd2>
 8007922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007932:	f043 0202 	orr.w	r2, r3, #2
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <HAL_UART_IRQHandler+0xf6>
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007956:	f043 0204 	orr.w	r2, r3, #4
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d011      	beq.n	800798e <HAL_UART_IRQHandler+0x126>
 800796a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007986:	f043 0208 	orr.w	r2, r3, #8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 820a 	beq.w	8007dac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_UART_IRQHandler+0x14e>
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fb62 	bl	800807a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c0:	2b40      	cmp	r3, #64	@ 0x40
 80079c2:	bf0c      	ite	eq
 80079c4:	2301      	moveq	r3, #1
 80079c6:	2300      	movne	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <HAL_UART_IRQHandler+0x17a>
 80079da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d04f      	beq.n	8007a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa6d 	bl	8007ec2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f2:	2b40      	cmp	r3, #64	@ 0x40
 80079f4:	d141      	bne.n	8007a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3314      	adds	r3, #20
 80079fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3314      	adds	r3, #20
 8007a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1d9      	bne.n	80079f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d013      	beq.n	8007a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4e:	4a8a      	ldr	r2, [pc, #552]	@ (8007c78 <HAL_UART_IRQHandler+0x410>)
 8007a50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fd f8bf 	bl	8004bda <HAL_DMA_Abort_IT>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d016      	beq.n	8007a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	e00e      	b.n	8007a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f9b6 	bl	8007de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a78:	e00a      	b.n	8007a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9b2 	bl	8007de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	e006      	b.n	8007a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9ae 	bl	8007de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a8e:	e18d      	b.n	8007dac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a90:	bf00      	nop
    return;
 8007a92:	e18b      	b.n	8007dac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f040 8167 	bne.w	8007d6c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8160 	beq.w	8007d6c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8159 	beq.w	8007d6c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aba:	2300      	movs	r3, #0
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60bb      	str	r3, [r7, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	60bb      	str	r3, [r7, #8]
 8007ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b40      	cmp	r3, #64	@ 0x40
 8007adc:	f040 80ce 	bne.w	8007c7c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80a9 	beq.w	8007c48 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007afe:	429a      	cmp	r2, r3
 8007b00:	f080 80a2 	bcs.w	8007c48 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b16:	f000 8088 	beq.w	8007c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d9      	bne.n	8007b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3314      	adds	r3, #20
 8007b6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3314      	adds	r3, #20
 8007b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e1      	bne.n	8007b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3314      	adds	r3, #20
 8007ba8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3314      	adds	r3, #20
 8007bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e3      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007c0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e3      	bne.n	8007be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fc ff68 	bl	8004afa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f8d9 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007c46:	e0b3      	b.n	8007db0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c50:	429a      	cmp	r2, r3
 8007c52:	f040 80ad 	bne.w	8007db0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c60:	f040 80a6 	bne.w	8007db0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8c1 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
      return;
 8007c76:	e09b      	b.n	8007db0 <HAL_UART_IRQHandler+0x548>
 8007c78:	08007f89 	.word	0x08007f89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 808e 	beq.w	8007db4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 8089 	beq.w	8007db4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007cc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e3      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e3      	bne.n	8007cda <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	330c      	adds	r3, #12
 8007d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0310 	bic.w	r3, r3, #16
 8007d36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007d44:	61fa      	str	r2, [r7, #28]
 8007d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	69b9      	ldr	r1, [r7, #24]
 8007d4a:	69fa      	ldr	r2, [r7, #28]
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	617b      	str	r3, [r7, #20]
   return(result);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e3      	bne.n	8007d20 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f847 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d6a:	e023      	b.n	8007db4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <HAL_UART_IRQHandler+0x524>
 8007d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f910 	bl	8007faa <UART_Transmit_IT>
    return;
 8007d8a:	e014      	b.n	8007db6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <HAL_UART_IRQHandler+0x54e>
 8007d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f950 	bl	800804a <UART_EndTransmit_IT>
    return;
 8007daa:	e004      	b.n	8007db6 <HAL_UART_IRQHandler+0x54e>
    return;
 8007dac:	bf00      	nop
 8007dae:	e002      	b.n	8007db6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007db4:	bf00      	nop
  }
}
 8007db6:	37e8      	adds	r7, #232	@ 0xe8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	603b      	str	r3, [r7, #0]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e20:	e03b      	b.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e28:	d037      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e2a:	f7fc f933 	bl	8004094 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d302      	bcc.n	8007e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e03a      	b.n	8007eba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d023      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b80      	cmp	r3, #128	@ 0x80
 8007e56:	d020      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2b40      	cmp	r3, #64	@ 0x40
 8007e5c:	d01d      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b08      	cmp	r3, #8
 8007e6a:	d116      	bne.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f81d 	bl	8007ec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e00f      	b.n	8007eba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	bf0c      	ite	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	2300      	movne	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d0b4      	beq.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b095      	sub	sp, #84	@ 0x54
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	330c      	adds	r3, #12
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007eea:	643a      	str	r2, [r7, #64]	@ 0x40
 8007eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ef0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e5      	bne.n	8007eca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3314      	adds	r3, #20
 8007f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e5      	bne.n	8007efe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d119      	bne.n	8007f6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f023 0310 	bic.w	r3, r3, #16
 8007f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f5a:	61ba      	str	r2, [r7, #24]
 8007f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6979      	ldr	r1, [r7, #20]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	613b      	str	r3, [r7, #16]
   return(result);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f7c:	bf00      	nop
 8007f7e:	3754      	adds	r7, #84	@ 0x54
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff ff21 	bl	8007de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa2:	bf00      	nop
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b21      	cmp	r3, #33	@ 0x21
 8007fbc:	d13e      	bne.n	800803c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc6:	d114      	bne.n	8007ff2 <UART_Transmit_IT+0x48>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d110      	bne.n	8007ff2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fe4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	1c9a      	adds	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	621a      	str	r2, [r3, #32]
 8007ff0:	e008      	b.n	8008004 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	1c59      	adds	r1, r3, #1
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6211      	str	r1, [r2, #32]
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29b      	uxth	r3, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4619      	mov	r1, r3
 8008012:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10f      	bne.n	8008038 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008026:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008036:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008060:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2220      	movs	r2, #32
 8008066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fea6 	bl	8007dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b08c      	sub	sp, #48	@ 0x30
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b22      	cmp	r3, #34	@ 0x22
 8008094:	f040 80aa 	bne.w	80081ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a0:	d115      	bne.n	80080ce <UART_Receive_IT+0x54>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d111      	bne.n	80080ce <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080bc:	b29a      	uxth	r2, r3
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c6:	1c9a      	adds	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80080cc:	e024      	b.n	8008118 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080dc:	d007      	beq.n	80080ee <UART_Receive_IT+0x74>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <UART_Receive_IT+0x82>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e008      	b.n	800810e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008108:	b2da      	uxtb	r2, r3
 800810a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4619      	mov	r1, r3
 8008126:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008128:	2b00      	cmp	r3, #0
 800812a:	d15d      	bne.n	80081e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0220 	bic.w	r2, r2, #32
 800813a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800814a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695a      	ldr	r2, [r3, #20]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816e:	2b01      	cmp	r3, #1
 8008170:	d135      	bne.n	80081de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	613b      	str	r3, [r7, #16]
   return(result);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f023 0310 	bic.w	r3, r3, #16
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008198:	623a      	str	r2, [r7, #32]
 800819a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	6a3a      	ldr	r2, [r7, #32]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0310 	and.w	r3, r3, #16
 80081b6:	2b10      	cmp	r3, #16
 80081b8:	d10a      	bne.n	80081d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fe0e 	bl	8007df8 <HAL_UARTEx_RxEventCallback>
 80081dc:	e002      	b.n	80081e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fdf6 	bl	8007dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	e002      	b.n	80081ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e000      	b.n	80081ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80081ec:	2302      	movs	r3, #2
  }
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3730      	adds	r7, #48	@ 0x30
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081fc:	b0c0      	sub	sp, #256	@ 0x100
 80081fe:	af00      	add	r7, sp, #0
 8008200:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008214:	68d9      	ldr	r1, [r3, #12]
 8008216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	ea40 0301 	orr.w	r3, r0, r1
 8008220:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	431a      	orrs	r2, r3
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	431a      	orrs	r2, r3
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008250:	f021 010c 	bic.w	r1, r1, #12
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800825e:	430b      	orrs	r3, r1
 8008260:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800826e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008272:	6999      	ldr	r1, [r3, #24]
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	ea40 0301 	orr.w	r3, r0, r1
 800827e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b8f      	ldr	r3, [pc, #572]	@ (80084c4 <UART_SetConfig+0x2cc>)
 8008288:	429a      	cmp	r2, r3
 800828a:	d005      	beq.n	8008298 <UART_SetConfig+0xa0>
 800828c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b8d      	ldr	r3, [pc, #564]	@ (80084c8 <UART_SetConfig+0x2d0>)
 8008294:	429a      	cmp	r2, r3
 8008296:	d104      	bne.n	80082a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fd fae2 	bl	8005860 <HAL_RCC_GetPCLK2Freq>
 800829c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082a0:	e003      	b.n	80082aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082a2:	f7fd fac9 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 80082a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082b4:	f040 810c 	bne.w	80084d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082ca:	4622      	mov	r2, r4
 80082cc:	462b      	mov	r3, r5
 80082ce:	1891      	adds	r1, r2, r2
 80082d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082d2:	415b      	adcs	r3, r3
 80082d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082da:	4621      	mov	r1, r4
 80082dc:	eb12 0801 	adds.w	r8, r2, r1
 80082e0:	4629      	mov	r1, r5
 80082e2:	eb43 0901 	adc.w	r9, r3, r1
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082fa:	4690      	mov	r8, r2
 80082fc:	4699      	mov	r9, r3
 80082fe:	4623      	mov	r3, r4
 8008300:	eb18 0303 	adds.w	r3, r8, r3
 8008304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008308:	462b      	mov	r3, r5
 800830a:	eb49 0303 	adc.w	r3, r9, r3
 800830e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800831e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008322:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008326:	460b      	mov	r3, r1
 8008328:	18db      	adds	r3, r3, r3
 800832a:	653b      	str	r3, [r7, #80]	@ 0x50
 800832c:	4613      	mov	r3, r2
 800832e:	eb42 0303 	adc.w	r3, r2, r3
 8008332:	657b      	str	r3, [r7, #84]	@ 0x54
 8008334:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008338:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800833c:	f7f8 fc3c 	bl	8000bb8 <__aeabi_uldivmod>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4b61      	ldr	r3, [pc, #388]	@ (80084cc <UART_SetConfig+0x2d4>)
 8008346:	fba3 2302 	umull	r2, r3, r3, r2
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	011c      	lsls	r4, r3, #4
 800834e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008352:	2200      	movs	r2, #0
 8008354:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008358:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800835c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	1891      	adds	r1, r2, r2
 8008366:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008368:	415b      	adcs	r3, r3
 800836a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800836c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008370:	4641      	mov	r1, r8
 8008372:	eb12 0a01 	adds.w	sl, r2, r1
 8008376:	4649      	mov	r1, r9
 8008378:	eb43 0b01 	adc.w	fp, r3, r1
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008388:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800838c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008390:	4692      	mov	sl, r2
 8008392:	469b      	mov	fp, r3
 8008394:	4643      	mov	r3, r8
 8008396:	eb1a 0303 	adds.w	r3, sl, r3
 800839a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800839e:	464b      	mov	r3, r9
 80083a0:	eb4b 0303 	adc.w	r3, fp, r3
 80083a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083bc:	460b      	mov	r3, r1
 80083be:	18db      	adds	r3, r3, r3
 80083c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80083c2:	4613      	mov	r3, r2
 80083c4:	eb42 0303 	adc.w	r3, r2, r3
 80083c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083d2:	f7f8 fbf1 	bl	8000bb8 <__aeabi_uldivmod>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	4b3b      	ldr	r3, [pc, #236]	@ (80084cc <UART_SetConfig+0x2d4>)
 80083de:	fba3 2301 	umull	r2, r3, r3, r1
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	2264      	movs	r2, #100	@ 0x64
 80083e6:	fb02 f303 	mul.w	r3, r2, r3
 80083ea:	1acb      	subs	r3, r1, r3
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083f2:	4b36      	ldr	r3, [pc, #216]	@ (80084cc <UART_SetConfig+0x2d4>)
 80083f4:	fba3 2302 	umull	r2, r3, r3, r2
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008400:	441c      	add	r4, r3
 8008402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008406:	2200      	movs	r2, #0
 8008408:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800840c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008410:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008414:	4642      	mov	r2, r8
 8008416:	464b      	mov	r3, r9
 8008418:	1891      	adds	r1, r2, r2
 800841a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800841c:	415b      	adcs	r3, r3
 800841e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008420:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008424:	4641      	mov	r1, r8
 8008426:	1851      	adds	r1, r2, r1
 8008428:	6339      	str	r1, [r7, #48]	@ 0x30
 800842a:	4649      	mov	r1, r9
 800842c:	414b      	adcs	r3, r1
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	f04f 0300 	mov.w	r3, #0
 8008438:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800843c:	4659      	mov	r1, fp
 800843e:	00cb      	lsls	r3, r1, #3
 8008440:	4651      	mov	r1, sl
 8008442:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008446:	4651      	mov	r1, sl
 8008448:	00ca      	lsls	r2, r1, #3
 800844a:	4610      	mov	r0, r2
 800844c:	4619      	mov	r1, r3
 800844e:	4603      	mov	r3, r0
 8008450:	4642      	mov	r2, r8
 8008452:	189b      	adds	r3, r3, r2
 8008454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008458:	464b      	mov	r3, r9
 800845a:	460a      	mov	r2, r1
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008470:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008474:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008478:	460b      	mov	r3, r1
 800847a:	18db      	adds	r3, r3, r3
 800847c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800847e:	4613      	mov	r3, r2
 8008480:	eb42 0303 	adc.w	r3, r2, r3
 8008484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008486:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800848a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800848e:	f7f8 fb93 	bl	8000bb8 <__aeabi_uldivmod>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <UART_SetConfig+0x2d4>)
 8008498:	fba3 1302 	umull	r1, r3, r3, r2
 800849c:	095b      	lsrs	r3, r3, #5
 800849e:	2164      	movs	r1, #100	@ 0x64
 80084a0:	fb01 f303 	mul.w	r3, r1, r3
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	3332      	adds	r3, #50	@ 0x32
 80084aa:	4a08      	ldr	r2, [pc, #32]	@ (80084cc <UART_SetConfig+0x2d4>)
 80084ac:	fba2 2303 	umull	r2, r3, r2, r3
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	f003 0207 	and.w	r2, r3, #7
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4422      	add	r2, r4
 80084be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084c0:	e106      	b.n	80086d0 <UART_SetConfig+0x4d8>
 80084c2:	bf00      	nop
 80084c4:	40011000 	.word	0x40011000
 80084c8:	40011400 	.word	0x40011400
 80084cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d4:	2200      	movs	r2, #0
 80084d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80084de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80084e2:	4642      	mov	r2, r8
 80084e4:	464b      	mov	r3, r9
 80084e6:	1891      	adds	r1, r2, r2
 80084e8:	6239      	str	r1, [r7, #32]
 80084ea:	415b      	adcs	r3, r3
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80084ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084f2:	4641      	mov	r1, r8
 80084f4:	1854      	adds	r4, r2, r1
 80084f6:	4649      	mov	r1, r9
 80084f8:	eb43 0501 	adc.w	r5, r3, r1
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	00eb      	lsls	r3, r5, #3
 8008506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800850a:	00e2      	lsls	r2, r4, #3
 800850c:	4614      	mov	r4, r2
 800850e:	461d      	mov	r5, r3
 8008510:	4643      	mov	r3, r8
 8008512:	18e3      	adds	r3, r4, r3
 8008514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008518:	464b      	mov	r3, r9
 800851a:	eb45 0303 	adc.w	r3, r5, r3
 800851e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800852e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800853e:	4629      	mov	r1, r5
 8008540:	008b      	lsls	r3, r1, #2
 8008542:	4621      	mov	r1, r4
 8008544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008548:	4621      	mov	r1, r4
 800854a:	008a      	lsls	r2, r1, #2
 800854c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008550:	f7f8 fb32 	bl	8000bb8 <__aeabi_uldivmod>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4b60      	ldr	r3, [pc, #384]	@ (80086dc <UART_SetConfig+0x4e4>)
 800855a:	fba3 2302 	umull	r2, r3, r3, r2
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	011c      	lsls	r4, r3, #4
 8008562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008566:	2200      	movs	r2, #0
 8008568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800856c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008570:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	1891      	adds	r1, r2, r2
 800857a:	61b9      	str	r1, [r7, #24]
 800857c:	415b      	adcs	r3, r3
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008584:	4641      	mov	r1, r8
 8008586:	1851      	adds	r1, r2, r1
 8008588:	6139      	str	r1, [r7, #16]
 800858a:	4649      	mov	r1, r9
 800858c:	414b      	adcs	r3, r1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800859c:	4659      	mov	r1, fp
 800859e:	00cb      	lsls	r3, r1, #3
 80085a0:	4651      	mov	r1, sl
 80085a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085a6:	4651      	mov	r1, sl
 80085a8:	00ca      	lsls	r2, r1, #3
 80085aa:	4610      	mov	r0, r2
 80085ac:	4619      	mov	r1, r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	4642      	mov	r2, r8
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085b8:	464b      	mov	r3, r9
 80085ba:	460a      	mov	r2, r1
 80085bc:	eb42 0303 	adc.w	r3, r2, r3
 80085c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80085dc:	4649      	mov	r1, r9
 80085de:	008b      	lsls	r3, r1, #2
 80085e0:	4641      	mov	r1, r8
 80085e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085e6:	4641      	mov	r1, r8
 80085e8:	008a      	lsls	r2, r1, #2
 80085ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085ee:	f7f8 fae3 	bl	8000bb8 <__aeabi_uldivmod>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4611      	mov	r1, r2
 80085f8:	4b38      	ldr	r3, [pc, #224]	@ (80086dc <UART_SetConfig+0x4e4>)
 80085fa:	fba3 2301 	umull	r2, r3, r3, r1
 80085fe:	095b      	lsrs	r3, r3, #5
 8008600:	2264      	movs	r2, #100	@ 0x64
 8008602:	fb02 f303 	mul.w	r3, r2, r3
 8008606:	1acb      	subs	r3, r1, r3
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	3332      	adds	r3, #50	@ 0x32
 800860c:	4a33      	ldr	r2, [pc, #204]	@ (80086dc <UART_SetConfig+0x4e4>)
 800860e:	fba2 2303 	umull	r2, r3, r2, r3
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008618:	441c      	add	r4, r3
 800861a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800861e:	2200      	movs	r2, #0
 8008620:	673b      	str	r3, [r7, #112]	@ 0x70
 8008622:	677a      	str	r2, [r7, #116]	@ 0x74
 8008624:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008628:	4642      	mov	r2, r8
 800862a:	464b      	mov	r3, r9
 800862c:	1891      	adds	r1, r2, r2
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	415b      	adcs	r3, r3
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008638:	4641      	mov	r1, r8
 800863a:	1851      	adds	r1, r2, r1
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	4649      	mov	r1, r9
 8008640:	414b      	adcs	r3, r1
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008650:	4659      	mov	r1, fp
 8008652:	00cb      	lsls	r3, r1, #3
 8008654:	4651      	mov	r1, sl
 8008656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800865a:	4651      	mov	r1, sl
 800865c:	00ca      	lsls	r2, r1, #3
 800865e:	4610      	mov	r0, r2
 8008660:	4619      	mov	r1, r3
 8008662:	4603      	mov	r3, r0
 8008664:	4642      	mov	r2, r8
 8008666:	189b      	adds	r3, r3, r2
 8008668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800866a:	464b      	mov	r3, r9
 800866c:	460a      	mov	r2, r1
 800866e:	eb42 0303 	adc.w	r3, r2, r3
 8008672:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	663b      	str	r3, [r7, #96]	@ 0x60
 800867e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800868c:	4649      	mov	r1, r9
 800868e:	008b      	lsls	r3, r1, #2
 8008690:	4641      	mov	r1, r8
 8008692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008696:	4641      	mov	r1, r8
 8008698:	008a      	lsls	r2, r1, #2
 800869a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800869e:	f7f8 fa8b 	bl	8000bb8 <__aeabi_uldivmod>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <UART_SetConfig+0x4e4>)
 80086a8:	fba3 1302 	umull	r1, r3, r3, r2
 80086ac:	095b      	lsrs	r3, r3, #5
 80086ae:	2164      	movs	r1, #100	@ 0x64
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	011b      	lsls	r3, r3, #4
 80086b8:	3332      	adds	r3, #50	@ 0x32
 80086ba:	4a08      	ldr	r2, [pc, #32]	@ (80086dc <UART_SetConfig+0x4e4>)
 80086bc:	fba2 2303 	umull	r2, r3, r2, r3
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	f003 020f 	and.w	r2, r3, #15
 80086c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4422      	add	r2, r4
 80086ce:	609a      	str	r2, [r3, #8]
}
 80086d0:	bf00      	nop
 80086d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086d6:	46bd      	mov	sp, r7
 80086d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086dc:	51eb851f 	.word	0x51eb851f

080086e0 <__cvt>:
 80086e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	ec57 6b10 	vmov	r6, r7, d0
 80086e8:	2f00      	cmp	r7, #0
 80086ea:	460c      	mov	r4, r1
 80086ec:	4619      	mov	r1, r3
 80086ee:	463b      	mov	r3, r7
 80086f0:	bfbb      	ittet	lt
 80086f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80086f6:	461f      	movlt	r7, r3
 80086f8:	2300      	movge	r3, #0
 80086fa:	232d      	movlt	r3, #45	@ 0x2d
 80086fc:	700b      	strb	r3, [r1, #0]
 80086fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008700:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008704:	4691      	mov	r9, r2
 8008706:	f023 0820 	bic.w	r8, r3, #32
 800870a:	bfbc      	itt	lt
 800870c:	4632      	movlt	r2, r6
 800870e:	4616      	movlt	r6, r2
 8008710:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008714:	d005      	beq.n	8008722 <__cvt+0x42>
 8008716:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800871a:	d100      	bne.n	800871e <__cvt+0x3e>
 800871c:	3401      	adds	r4, #1
 800871e:	2102      	movs	r1, #2
 8008720:	e000      	b.n	8008724 <__cvt+0x44>
 8008722:	2103      	movs	r1, #3
 8008724:	ab03      	add	r3, sp, #12
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	ab02      	add	r3, sp, #8
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	ec47 6b10 	vmov	d0, r6, r7
 8008730:	4653      	mov	r3, sl
 8008732:	4622      	mov	r2, r4
 8008734:	f000 fe74 	bl	8009420 <_dtoa_r>
 8008738:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800873c:	4605      	mov	r5, r0
 800873e:	d119      	bne.n	8008774 <__cvt+0x94>
 8008740:	f019 0f01 	tst.w	r9, #1
 8008744:	d00e      	beq.n	8008764 <__cvt+0x84>
 8008746:	eb00 0904 	add.w	r9, r0, r4
 800874a:	2200      	movs	r2, #0
 800874c:	2300      	movs	r3, #0
 800874e:	4630      	mov	r0, r6
 8008750:	4639      	mov	r1, r7
 8008752:	f7f8 f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008756:	b108      	cbz	r0, 800875c <__cvt+0x7c>
 8008758:	f8cd 900c 	str.w	r9, [sp, #12]
 800875c:	2230      	movs	r2, #48	@ 0x30
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	454b      	cmp	r3, r9
 8008762:	d31e      	bcc.n	80087a2 <__cvt+0xc2>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008768:	1b5b      	subs	r3, r3, r5
 800876a:	4628      	mov	r0, r5
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	b004      	add	sp, #16
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008778:	eb00 0904 	add.w	r9, r0, r4
 800877c:	d1e5      	bne.n	800874a <__cvt+0x6a>
 800877e:	7803      	ldrb	r3, [r0, #0]
 8008780:	2b30      	cmp	r3, #48	@ 0x30
 8008782:	d10a      	bne.n	800879a <__cvt+0xba>
 8008784:	2200      	movs	r2, #0
 8008786:	2300      	movs	r3, #0
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008790:	b918      	cbnz	r0, 800879a <__cvt+0xba>
 8008792:	f1c4 0401 	rsb	r4, r4, #1
 8008796:	f8ca 4000 	str.w	r4, [sl]
 800879a:	f8da 3000 	ldr.w	r3, [sl]
 800879e:	4499      	add	r9, r3
 80087a0:	e7d3      	b.n	800874a <__cvt+0x6a>
 80087a2:	1c59      	adds	r1, r3, #1
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	e7d9      	b.n	800875e <__cvt+0x7e>

080087aa <__exponent>:
 80087aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ac:	2900      	cmp	r1, #0
 80087ae:	bfba      	itte	lt
 80087b0:	4249      	neglt	r1, r1
 80087b2:	232d      	movlt	r3, #45	@ 0x2d
 80087b4:	232b      	movge	r3, #43	@ 0x2b
 80087b6:	2909      	cmp	r1, #9
 80087b8:	7002      	strb	r2, [r0, #0]
 80087ba:	7043      	strb	r3, [r0, #1]
 80087bc:	dd29      	ble.n	8008812 <__exponent+0x68>
 80087be:	f10d 0307 	add.w	r3, sp, #7
 80087c2:	461d      	mov	r5, r3
 80087c4:	270a      	movs	r7, #10
 80087c6:	461a      	mov	r2, r3
 80087c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80087cc:	fb07 1416 	mls	r4, r7, r6, r1
 80087d0:	3430      	adds	r4, #48	@ 0x30
 80087d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087d6:	460c      	mov	r4, r1
 80087d8:	2c63      	cmp	r4, #99	@ 0x63
 80087da:	f103 33ff 	add.w	r3, r3, #4294967295
 80087de:	4631      	mov	r1, r6
 80087e0:	dcf1      	bgt.n	80087c6 <__exponent+0x1c>
 80087e2:	3130      	adds	r1, #48	@ 0x30
 80087e4:	1e94      	subs	r4, r2, #2
 80087e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087ea:	1c41      	adds	r1, r0, #1
 80087ec:	4623      	mov	r3, r4
 80087ee:	42ab      	cmp	r3, r5
 80087f0:	d30a      	bcc.n	8008808 <__exponent+0x5e>
 80087f2:	f10d 0309 	add.w	r3, sp, #9
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	42ac      	cmp	r4, r5
 80087fa:	bf88      	it	hi
 80087fc:	2300      	movhi	r3, #0
 80087fe:	3302      	adds	r3, #2
 8008800:	4403      	add	r3, r0
 8008802:	1a18      	subs	r0, r3, r0
 8008804:	b003      	add	sp, #12
 8008806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008808:	f813 6b01 	ldrb.w	r6, [r3], #1
 800880c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008810:	e7ed      	b.n	80087ee <__exponent+0x44>
 8008812:	2330      	movs	r3, #48	@ 0x30
 8008814:	3130      	adds	r1, #48	@ 0x30
 8008816:	7083      	strb	r3, [r0, #2]
 8008818:	70c1      	strb	r1, [r0, #3]
 800881a:	1d03      	adds	r3, r0, #4
 800881c:	e7f1      	b.n	8008802 <__exponent+0x58>
	...

08008820 <_printf_float>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	b08d      	sub	sp, #52	@ 0x34
 8008826:	460c      	mov	r4, r1
 8008828:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800882c:	4616      	mov	r6, r2
 800882e:	461f      	mov	r7, r3
 8008830:	4605      	mov	r5, r0
 8008832:	f000 fcf5 	bl	8009220 <_localeconv_r>
 8008836:	6803      	ldr	r3, [r0, #0]
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fd20 	bl	8000280 <strlen>
 8008840:	2300      	movs	r3, #0
 8008842:	930a      	str	r3, [sp, #40]	@ 0x28
 8008844:	f8d8 3000 	ldr.w	r3, [r8]
 8008848:	9005      	str	r0, [sp, #20]
 800884a:	3307      	adds	r3, #7
 800884c:	f023 0307 	bic.w	r3, r3, #7
 8008850:	f103 0208 	add.w	r2, r3, #8
 8008854:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008858:	f8d4 b000 	ldr.w	fp, [r4]
 800885c:	f8c8 2000 	str.w	r2, [r8]
 8008860:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008864:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	f8cd 8018 	str.w	r8, [sp, #24]
 800886e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008876:	4b9c      	ldr	r3, [pc, #624]	@ (8008ae8 <_printf_float+0x2c8>)
 8008878:	f04f 32ff 	mov.w	r2, #4294967295
 800887c:	f7f8 f95e 	bl	8000b3c <__aeabi_dcmpun>
 8008880:	bb70      	cbnz	r0, 80088e0 <_printf_float+0xc0>
 8008882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008886:	4b98      	ldr	r3, [pc, #608]	@ (8008ae8 <_printf_float+0x2c8>)
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	f7f8 f938 	bl	8000b00 <__aeabi_dcmple>
 8008890:	bb30      	cbnz	r0, 80088e0 <_printf_float+0xc0>
 8008892:	2200      	movs	r2, #0
 8008894:	2300      	movs	r3, #0
 8008896:	4640      	mov	r0, r8
 8008898:	4649      	mov	r1, r9
 800889a:	f7f8 f927 	bl	8000aec <__aeabi_dcmplt>
 800889e:	b110      	cbz	r0, 80088a6 <_printf_float+0x86>
 80088a0:	232d      	movs	r3, #45	@ 0x2d
 80088a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088a6:	4a91      	ldr	r2, [pc, #580]	@ (8008aec <_printf_float+0x2cc>)
 80088a8:	4b91      	ldr	r3, [pc, #580]	@ (8008af0 <_printf_float+0x2d0>)
 80088aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088ae:	bf8c      	ite	hi
 80088b0:	4690      	movhi	r8, r2
 80088b2:	4698      	movls	r8, r3
 80088b4:	2303      	movs	r3, #3
 80088b6:	6123      	str	r3, [r4, #16]
 80088b8:	f02b 0304 	bic.w	r3, fp, #4
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	f04f 0900 	mov.w	r9, #0
 80088c2:	9700      	str	r7, [sp, #0]
 80088c4:	4633      	mov	r3, r6
 80088c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088c8:	4621      	mov	r1, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f9d2 	bl	8008c74 <_printf_common>
 80088d0:	3001      	adds	r0, #1
 80088d2:	f040 808d 	bne.w	80089f0 <_printf_float+0x1d0>
 80088d6:	f04f 30ff 	mov.w	r0, #4294967295
 80088da:	b00d      	add	sp, #52	@ 0x34
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f8 f928 	bl	8000b3c <__aeabi_dcmpun>
 80088ec:	b140      	cbz	r0, 8008900 <_printf_float+0xe0>
 80088ee:	464b      	mov	r3, r9
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfbc      	itt	lt
 80088f4:	232d      	movlt	r3, #45	@ 0x2d
 80088f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088fa:	4a7e      	ldr	r2, [pc, #504]	@ (8008af4 <_printf_float+0x2d4>)
 80088fc:	4b7e      	ldr	r3, [pc, #504]	@ (8008af8 <_printf_float+0x2d8>)
 80088fe:	e7d4      	b.n	80088aa <_printf_float+0x8a>
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008906:	9206      	str	r2, [sp, #24]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	d13b      	bne.n	8008984 <_printf_float+0x164>
 800890c:	2306      	movs	r3, #6
 800890e:	6063      	str	r3, [r4, #4]
 8008910:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008914:	2300      	movs	r3, #0
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	ab0a      	add	r3, sp, #40	@ 0x28
 800891c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008920:	ab09      	add	r3, sp, #36	@ 0x24
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	ec49 8b10 	vmov	d0, r8, r9
 800892a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800892e:	4628      	mov	r0, r5
 8008930:	f7ff fed6 	bl	80086e0 <__cvt>
 8008934:	9b06      	ldr	r3, [sp, #24]
 8008936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008938:	2b47      	cmp	r3, #71	@ 0x47
 800893a:	4680      	mov	r8, r0
 800893c:	d129      	bne.n	8008992 <_printf_float+0x172>
 800893e:	1cc8      	adds	r0, r1, #3
 8008940:	db02      	blt.n	8008948 <_printf_float+0x128>
 8008942:	6863      	ldr	r3, [r4, #4]
 8008944:	4299      	cmp	r1, r3
 8008946:	dd41      	ble.n	80089cc <_printf_float+0x1ac>
 8008948:	f1aa 0a02 	sub.w	sl, sl, #2
 800894c:	fa5f fa8a 	uxtb.w	sl, sl
 8008950:	3901      	subs	r1, #1
 8008952:	4652      	mov	r2, sl
 8008954:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008958:	9109      	str	r1, [sp, #36]	@ 0x24
 800895a:	f7ff ff26 	bl	80087aa <__exponent>
 800895e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008960:	1813      	adds	r3, r2, r0
 8008962:	2a01      	cmp	r2, #1
 8008964:	4681      	mov	r9, r0
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	dc02      	bgt.n	8008970 <_printf_float+0x150>
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	07d2      	lsls	r2, r2, #31
 800896e:	d501      	bpl.n	8008974 <_printf_float+0x154>
 8008970:	3301      	adds	r3, #1
 8008972:	6123      	str	r3, [r4, #16]
 8008974:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0a2      	beq.n	80088c2 <_printf_float+0xa2>
 800897c:	232d      	movs	r3, #45	@ 0x2d
 800897e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008982:	e79e      	b.n	80088c2 <_printf_float+0xa2>
 8008984:	9a06      	ldr	r2, [sp, #24]
 8008986:	2a47      	cmp	r2, #71	@ 0x47
 8008988:	d1c2      	bne.n	8008910 <_printf_float+0xf0>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1c0      	bne.n	8008910 <_printf_float+0xf0>
 800898e:	2301      	movs	r3, #1
 8008990:	e7bd      	b.n	800890e <_printf_float+0xee>
 8008992:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008996:	d9db      	bls.n	8008950 <_printf_float+0x130>
 8008998:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800899c:	d118      	bne.n	80089d0 <_printf_float+0x1b0>
 800899e:	2900      	cmp	r1, #0
 80089a0:	6863      	ldr	r3, [r4, #4]
 80089a2:	dd0b      	ble.n	80089bc <_printf_float+0x19c>
 80089a4:	6121      	str	r1, [r4, #16]
 80089a6:	b913      	cbnz	r3, 80089ae <_printf_float+0x18e>
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	07d0      	lsls	r0, r2, #31
 80089ac:	d502      	bpl.n	80089b4 <_printf_float+0x194>
 80089ae:	3301      	adds	r3, #1
 80089b0:	440b      	add	r3, r1
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089b6:	f04f 0900 	mov.w	r9, #0
 80089ba:	e7db      	b.n	8008974 <_printf_float+0x154>
 80089bc:	b913      	cbnz	r3, 80089c4 <_printf_float+0x1a4>
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	07d2      	lsls	r2, r2, #31
 80089c2:	d501      	bpl.n	80089c8 <_printf_float+0x1a8>
 80089c4:	3302      	adds	r3, #2
 80089c6:	e7f4      	b.n	80089b2 <_printf_float+0x192>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e7f2      	b.n	80089b2 <_printf_float+0x192>
 80089cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80089d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089d2:	4299      	cmp	r1, r3
 80089d4:	db05      	blt.n	80089e2 <_printf_float+0x1c2>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	6121      	str	r1, [r4, #16]
 80089da:	07d8      	lsls	r0, r3, #31
 80089dc:	d5ea      	bpl.n	80089b4 <_printf_float+0x194>
 80089de:	1c4b      	adds	r3, r1, #1
 80089e0:	e7e7      	b.n	80089b2 <_printf_float+0x192>
 80089e2:	2900      	cmp	r1, #0
 80089e4:	bfd4      	ite	le
 80089e6:	f1c1 0202 	rsble	r2, r1, #2
 80089ea:	2201      	movgt	r2, #1
 80089ec:	4413      	add	r3, r2
 80089ee:	e7e0      	b.n	80089b2 <_printf_float+0x192>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	055a      	lsls	r2, r3, #21
 80089f4:	d407      	bmi.n	8008a06 <_printf_float+0x1e6>
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	4642      	mov	r2, r8
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	d12b      	bne.n	8008a5c <_printf_float+0x23c>
 8008a04:	e767      	b.n	80088d6 <_printf_float+0xb6>
 8008a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a0a:	f240 80dd 	bls.w	8008bc8 <_printf_float+0x3a8>
 8008a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a12:	2200      	movs	r2, #0
 8008a14:	2300      	movs	r3, #0
 8008a16:	f7f8 f85f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d033      	beq.n	8008a86 <_printf_float+0x266>
 8008a1e:	4a37      	ldr	r2, [pc, #220]	@ (8008afc <_printf_float+0x2dc>)
 8008a20:	2301      	movs	r3, #1
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f af54 	beq.w	80088d6 <_printf_float+0xb6>
 8008a2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a32:	4543      	cmp	r3, r8
 8008a34:	db02      	blt.n	8008a3c <_printf_float+0x21c>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	07d8      	lsls	r0, r3, #31
 8008a3a:	d50f      	bpl.n	8008a5c <_printf_float+0x23c>
 8008a3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a40:	4631      	mov	r1, r6
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b8      	blx	r7
 8008a46:	3001      	adds	r0, #1
 8008a48:	f43f af45 	beq.w	80088d6 <_printf_float+0xb6>
 8008a4c:	f04f 0900 	mov.w	r9, #0
 8008a50:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a54:	f104 0a1a 	add.w	sl, r4, #26
 8008a58:	45c8      	cmp	r8, r9
 8008a5a:	dc09      	bgt.n	8008a70 <_printf_float+0x250>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	079b      	lsls	r3, r3, #30
 8008a60:	f100 8103 	bmi.w	8008c6a <_printf_float+0x44a>
 8008a64:	68e0      	ldr	r0, [r4, #12]
 8008a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a68:	4298      	cmp	r0, r3
 8008a6a:	bfb8      	it	lt
 8008a6c:	4618      	movlt	r0, r3
 8008a6e:	e734      	b.n	80088da <_printf_float+0xba>
 8008a70:	2301      	movs	r3, #1
 8008a72:	4652      	mov	r2, sl
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f af2b 	beq.w	80088d6 <_printf_float+0xb6>
 8008a80:	f109 0901 	add.w	r9, r9, #1
 8008a84:	e7e8      	b.n	8008a58 <_printf_float+0x238>
 8008a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dc39      	bgt.n	8008b00 <_printf_float+0x2e0>
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008afc <_printf_float+0x2dc>)
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f af1d 	beq.w	80088d6 <_printf_float+0xb6>
 8008a9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008aa0:	ea59 0303 	orrs.w	r3, r9, r3
 8008aa4:	d102      	bne.n	8008aac <_printf_float+0x28c>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	07d9      	lsls	r1, r3, #31
 8008aaa:	d5d7      	bpl.n	8008a5c <_printf_float+0x23c>
 8008aac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	f43f af0d 	beq.w	80088d6 <_printf_float+0xb6>
 8008abc:	f04f 0a00 	mov.w	sl, #0
 8008ac0:	f104 0b1a 	add.w	fp, r4, #26
 8008ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac6:	425b      	negs	r3, r3
 8008ac8:	4553      	cmp	r3, sl
 8008aca:	dc01      	bgt.n	8008ad0 <_printf_float+0x2b0>
 8008acc:	464b      	mov	r3, r9
 8008ace:	e793      	b.n	80089f8 <_printf_float+0x1d8>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	465a      	mov	r2, fp
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f aefb 	beq.w	80088d6 <_printf_float+0xb6>
 8008ae0:	f10a 0a01 	add.w	sl, sl, #1
 8008ae4:	e7ee      	b.n	8008ac4 <_printf_float+0x2a4>
 8008ae6:	bf00      	nop
 8008ae8:	7fefffff 	.word	0x7fefffff
 8008aec:	0800c950 	.word	0x0800c950
 8008af0:	0800c94c 	.word	0x0800c94c
 8008af4:	0800c958 	.word	0x0800c958
 8008af8:	0800c954 	.word	0x0800c954
 8008afc:	0800c95c 	.word	0x0800c95c
 8008b00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b06:	4553      	cmp	r3, sl
 8008b08:	bfa8      	it	ge
 8008b0a:	4653      	movge	r3, sl
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	4699      	mov	r9, r3
 8008b10:	dc36      	bgt.n	8008b80 <_printf_float+0x360>
 8008b12:	f04f 0b00 	mov.w	fp, #0
 8008b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b1a:	f104 021a 	add.w	r2, r4, #26
 8008b1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b20:	9306      	str	r3, [sp, #24]
 8008b22:	eba3 0309 	sub.w	r3, r3, r9
 8008b26:	455b      	cmp	r3, fp
 8008b28:	dc31      	bgt.n	8008b8e <_printf_float+0x36e>
 8008b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2c:	459a      	cmp	sl, r3
 8008b2e:	dc3a      	bgt.n	8008ba6 <_printf_float+0x386>
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	07da      	lsls	r2, r3, #31
 8008b34:	d437      	bmi.n	8008ba6 <_printf_float+0x386>
 8008b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b38:	ebaa 0903 	sub.w	r9, sl, r3
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	ebaa 0303 	sub.w	r3, sl, r3
 8008b42:	4599      	cmp	r9, r3
 8008b44:	bfa8      	it	ge
 8008b46:	4699      	movge	r9, r3
 8008b48:	f1b9 0f00 	cmp.w	r9, #0
 8008b4c:	dc33      	bgt.n	8008bb6 <_printf_float+0x396>
 8008b4e:	f04f 0800 	mov.w	r8, #0
 8008b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b56:	f104 0b1a 	add.w	fp, r4, #26
 8008b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b60:	eba3 0309 	sub.w	r3, r3, r9
 8008b64:	4543      	cmp	r3, r8
 8008b66:	f77f af79 	ble.w	8008a5c <_printf_float+0x23c>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	465a      	mov	r2, fp
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	f43f aeae 	beq.w	80088d6 <_printf_float+0xb6>
 8008b7a:	f108 0801 	add.w	r8, r8, #1
 8008b7e:	e7ec      	b.n	8008b5a <_printf_float+0x33a>
 8008b80:	4642      	mov	r2, r8
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d1c2      	bne.n	8008b12 <_printf_float+0x2f2>
 8008b8c:	e6a3      	b.n	80088d6 <_printf_float+0xb6>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	9206      	str	r2, [sp, #24]
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f43f ae9c 	beq.w	80088d6 <_printf_float+0xb6>
 8008b9e:	9a06      	ldr	r2, [sp, #24]
 8008ba0:	f10b 0b01 	add.w	fp, fp, #1
 8008ba4:	e7bb      	b.n	8008b1e <_printf_float+0x2fe>
 8008ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d1c0      	bne.n	8008b36 <_printf_float+0x316>
 8008bb4:	e68f      	b.n	80088d6 <_printf_float+0xb6>
 8008bb6:	9a06      	ldr	r2, [sp, #24]
 8008bb8:	464b      	mov	r3, r9
 8008bba:	4442      	add	r2, r8
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d1c3      	bne.n	8008b4e <_printf_float+0x32e>
 8008bc6:	e686      	b.n	80088d6 <_printf_float+0xb6>
 8008bc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bcc:	f1ba 0f01 	cmp.w	sl, #1
 8008bd0:	dc01      	bgt.n	8008bd6 <_printf_float+0x3b6>
 8008bd2:	07db      	lsls	r3, r3, #31
 8008bd4:	d536      	bpl.n	8008c44 <_printf_float+0x424>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f ae78 	beq.w	80088d6 <_printf_float+0xb6>
 8008be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f ae70 	beq.w	80088d6 <_printf_float+0xb6>
 8008bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c02:	f7f7 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c06:	b9c0      	cbnz	r0, 8008c3a <_printf_float+0x41a>
 8008c08:	4653      	mov	r3, sl
 8008c0a:	f108 0201 	add.w	r2, r8, #1
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	d10c      	bne.n	8008c32 <_printf_float+0x412>
 8008c18:	e65d      	b.n	80088d6 <_printf_float+0xb6>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	465a      	mov	r2, fp
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	f43f ae56 	beq.w	80088d6 <_printf_float+0xb6>
 8008c2a:	f108 0801 	add.w	r8, r8, #1
 8008c2e:	45d0      	cmp	r8, sl
 8008c30:	dbf3      	blt.n	8008c1a <_printf_float+0x3fa>
 8008c32:	464b      	mov	r3, r9
 8008c34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c38:	e6df      	b.n	80089fa <_printf_float+0x1da>
 8008c3a:	f04f 0800 	mov.w	r8, #0
 8008c3e:	f104 0b1a 	add.w	fp, r4, #26
 8008c42:	e7f4      	b.n	8008c2e <_printf_float+0x40e>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4642      	mov	r2, r8
 8008c48:	e7e1      	b.n	8008c0e <_printf_float+0x3ee>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	464a      	mov	r2, r9
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	f43f ae3e 	beq.w	80088d6 <_printf_float+0xb6>
 8008c5a:	f108 0801 	add.w	r8, r8, #1
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c62:	1a5b      	subs	r3, r3, r1
 8008c64:	4543      	cmp	r3, r8
 8008c66:	dcf0      	bgt.n	8008c4a <_printf_float+0x42a>
 8008c68:	e6fc      	b.n	8008a64 <_printf_float+0x244>
 8008c6a:	f04f 0800 	mov.w	r8, #0
 8008c6e:	f104 0919 	add.w	r9, r4, #25
 8008c72:	e7f4      	b.n	8008c5e <_printf_float+0x43e>

08008c74 <_printf_common>:
 8008c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	4616      	mov	r6, r2
 8008c7a:	4698      	mov	r8, r3
 8008c7c:	688a      	ldr	r2, [r1, #8]
 8008c7e:	690b      	ldr	r3, [r1, #16]
 8008c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c84:	4293      	cmp	r3, r2
 8008c86:	bfb8      	it	lt
 8008c88:	4613      	movlt	r3, r2
 8008c8a:	6033      	str	r3, [r6, #0]
 8008c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c90:	4607      	mov	r7, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	b10a      	cbz	r2, 8008c9a <_printf_common+0x26>
 8008c96:	3301      	adds	r3, #1
 8008c98:	6033      	str	r3, [r6, #0]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	0699      	lsls	r1, r3, #26
 8008c9e:	bf42      	ittt	mi
 8008ca0:	6833      	ldrmi	r3, [r6, #0]
 8008ca2:	3302      	addmi	r3, #2
 8008ca4:	6033      	strmi	r3, [r6, #0]
 8008ca6:	6825      	ldr	r5, [r4, #0]
 8008ca8:	f015 0506 	ands.w	r5, r5, #6
 8008cac:	d106      	bne.n	8008cbc <_printf_common+0x48>
 8008cae:	f104 0a19 	add.w	sl, r4, #25
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	6832      	ldr	r2, [r6, #0]
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dc26      	bgt.n	8008d0a <_printf_common+0x96>
 8008cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	3b00      	subs	r3, #0
 8008cc4:	bf18      	it	ne
 8008cc6:	2301      	movne	r3, #1
 8008cc8:	0692      	lsls	r2, r2, #26
 8008cca:	d42b      	bmi.n	8008d24 <_printf_common+0xb0>
 8008ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	47c8      	blx	r9
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d01e      	beq.n	8008d18 <_printf_common+0xa4>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	6922      	ldr	r2, [r4, #16]
 8008cde:	f003 0306 	and.w	r3, r3, #6
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	bf02      	ittt	eq
 8008ce6:	68e5      	ldreq	r5, [r4, #12]
 8008ce8:	6833      	ldreq	r3, [r6, #0]
 8008cea:	1aed      	subeq	r5, r5, r3
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	bf0c      	ite	eq
 8008cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf4:	2500      	movne	r5, #0
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	bfc4      	itt	gt
 8008cfa:	1a9b      	subgt	r3, r3, r2
 8008cfc:	18ed      	addgt	r5, r5, r3
 8008cfe:	2600      	movs	r6, #0
 8008d00:	341a      	adds	r4, #26
 8008d02:	42b5      	cmp	r5, r6
 8008d04:	d11a      	bne.n	8008d3c <_printf_common+0xc8>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e008      	b.n	8008d1c <_printf_common+0xa8>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4652      	mov	r2, sl
 8008d0e:	4641      	mov	r1, r8
 8008d10:	4638      	mov	r0, r7
 8008d12:	47c8      	blx	r9
 8008d14:	3001      	adds	r0, #1
 8008d16:	d103      	bne.n	8008d20 <_printf_common+0xac>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d20:	3501      	adds	r5, #1
 8008d22:	e7c6      	b.n	8008cb2 <_printf_common+0x3e>
 8008d24:	18e1      	adds	r1, r4, r3
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	2030      	movs	r0, #48	@ 0x30
 8008d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d2e:	4422      	add	r2, r4
 8008d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d38:	3302      	adds	r3, #2
 8008d3a:	e7c7      	b.n	8008ccc <_printf_common+0x58>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4641      	mov	r1, r8
 8008d42:	4638      	mov	r0, r7
 8008d44:	47c8      	blx	r9
 8008d46:	3001      	adds	r0, #1
 8008d48:	d0e6      	beq.n	8008d18 <_printf_common+0xa4>
 8008d4a:	3601      	adds	r6, #1
 8008d4c:	e7d9      	b.n	8008d02 <_printf_common+0x8e>
	...

08008d50 <_printf_i>:
 8008d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	7e0f      	ldrb	r7, [r1, #24]
 8008d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d58:	2f78      	cmp	r7, #120	@ 0x78
 8008d5a:	4691      	mov	r9, r2
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	469a      	mov	sl, r3
 8008d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d66:	d807      	bhi.n	8008d78 <_printf_i+0x28>
 8008d68:	2f62      	cmp	r7, #98	@ 0x62
 8008d6a:	d80a      	bhi.n	8008d82 <_printf_i+0x32>
 8008d6c:	2f00      	cmp	r7, #0
 8008d6e:	f000 80d1 	beq.w	8008f14 <_printf_i+0x1c4>
 8008d72:	2f58      	cmp	r7, #88	@ 0x58
 8008d74:	f000 80b8 	beq.w	8008ee8 <_printf_i+0x198>
 8008d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d80:	e03a      	b.n	8008df8 <_printf_i+0xa8>
 8008d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d86:	2b15      	cmp	r3, #21
 8008d88:	d8f6      	bhi.n	8008d78 <_printf_i+0x28>
 8008d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008d90 <_printf_i+0x40>)
 8008d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d90:	08008de9 	.word	0x08008de9
 8008d94:	08008dfd 	.word	0x08008dfd
 8008d98:	08008d79 	.word	0x08008d79
 8008d9c:	08008d79 	.word	0x08008d79
 8008da0:	08008d79 	.word	0x08008d79
 8008da4:	08008d79 	.word	0x08008d79
 8008da8:	08008dfd 	.word	0x08008dfd
 8008dac:	08008d79 	.word	0x08008d79
 8008db0:	08008d79 	.word	0x08008d79
 8008db4:	08008d79 	.word	0x08008d79
 8008db8:	08008d79 	.word	0x08008d79
 8008dbc:	08008efb 	.word	0x08008efb
 8008dc0:	08008e27 	.word	0x08008e27
 8008dc4:	08008eb5 	.word	0x08008eb5
 8008dc8:	08008d79 	.word	0x08008d79
 8008dcc:	08008d79 	.word	0x08008d79
 8008dd0:	08008f1d 	.word	0x08008f1d
 8008dd4:	08008d79 	.word	0x08008d79
 8008dd8:	08008e27 	.word	0x08008e27
 8008ddc:	08008d79 	.word	0x08008d79
 8008de0:	08008d79 	.word	0x08008d79
 8008de4:	08008ebd 	.word	0x08008ebd
 8008de8:	6833      	ldr	r3, [r6, #0]
 8008dea:	1d1a      	adds	r2, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6032      	str	r2, [r6, #0]
 8008df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e09c      	b.n	8008f36 <_printf_i+0x1e6>
 8008dfc:	6833      	ldr	r3, [r6, #0]
 8008dfe:	6820      	ldr	r0, [r4, #0]
 8008e00:	1d19      	adds	r1, r3, #4
 8008e02:	6031      	str	r1, [r6, #0]
 8008e04:	0606      	lsls	r6, r0, #24
 8008e06:	d501      	bpl.n	8008e0c <_printf_i+0xbc>
 8008e08:	681d      	ldr	r5, [r3, #0]
 8008e0a:	e003      	b.n	8008e14 <_printf_i+0xc4>
 8008e0c:	0645      	lsls	r5, r0, #25
 8008e0e:	d5fb      	bpl.n	8008e08 <_printf_i+0xb8>
 8008e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e14:	2d00      	cmp	r5, #0
 8008e16:	da03      	bge.n	8008e20 <_printf_i+0xd0>
 8008e18:	232d      	movs	r3, #45	@ 0x2d
 8008e1a:	426d      	negs	r5, r5
 8008e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e20:	4858      	ldr	r0, [pc, #352]	@ (8008f84 <_printf_i+0x234>)
 8008e22:	230a      	movs	r3, #10
 8008e24:	e011      	b.n	8008e4a <_printf_i+0xfa>
 8008e26:	6821      	ldr	r1, [r4, #0]
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	0608      	lsls	r0, r1, #24
 8008e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e30:	d402      	bmi.n	8008e38 <_printf_i+0xe8>
 8008e32:	0649      	lsls	r1, r1, #25
 8008e34:	bf48      	it	mi
 8008e36:	b2ad      	uxthmi	r5, r5
 8008e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e3a:	4852      	ldr	r0, [pc, #328]	@ (8008f84 <_printf_i+0x234>)
 8008e3c:	6033      	str	r3, [r6, #0]
 8008e3e:	bf14      	ite	ne
 8008e40:	230a      	movne	r3, #10
 8008e42:	2308      	moveq	r3, #8
 8008e44:	2100      	movs	r1, #0
 8008e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e4a:	6866      	ldr	r6, [r4, #4]
 8008e4c:	60a6      	str	r6, [r4, #8]
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	db05      	blt.n	8008e5e <_printf_i+0x10e>
 8008e52:	6821      	ldr	r1, [r4, #0]
 8008e54:	432e      	orrs	r6, r5
 8008e56:	f021 0104 	bic.w	r1, r1, #4
 8008e5a:	6021      	str	r1, [r4, #0]
 8008e5c:	d04b      	beq.n	8008ef6 <_printf_i+0x1a6>
 8008e5e:	4616      	mov	r6, r2
 8008e60:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e64:	fb03 5711 	mls	r7, r3, r1, r5
 8008e68:	5dc7      	ldrb	r7, [r0, r7]
 8008e6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e6e:	462f      	mov	r7, r5
 8008e70:	42bb      	cmp	r3, r7
 8008e72:	460d      	mov	r5, r1
 8008e74:	d9f4      	bls.n	8008e60 <_printf_i+0x110>
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d10b      	bne.n	8008e92 <_printf_i+0x142>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	07df      	lsls	r7, r3, #31
 8008e7e:	d508      	bpl.n	8008e92 <_printf_i+0x142>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	6861      	ldr	r1, [r4, #4]
 8008e84:	4299      	cmp	r1, r3
 8008e86:	bfde      	ittt	le
 8008e88:	2330      	movle	r3, #48	@ 0x30
 8008e8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e92:	1b92      	subs	r2, r2, r6
 8008e94:	6122      	str	r2, [r4, #16]
 8008e96:	f8cd a000 	str.w	sl, [sp]
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	aa03      	add	r2, sp, #12
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f7ff fee7 	bl	8008c74 <_printf_common>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d14a      	bne.n	8008f40 <_printf_i+0x1f0>
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	b004      	add	sp, #16
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f043 0320 	orr.w	r3, r3, #32
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	4832      	ldr	r0, [pc, #200]	@ (8008f88 <_printf_i+0x238>)
 8008ebe:	2778      	movs	r7, #120	@ 0x78
 8008ec0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	6831      	ldr	r1, [r6, #0]
 8008ec8:	061f      	lsls	r7, r3, #24
 8008eca:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ece:	d402      	bmi.n	8008ed6 <_printf_i+0x186>
 8008ed0:	065f      	lsls	r7, r3, #25
 8008ed2:	bf48      	it	mi
 8008ed4:	b2ad      	uxthmi	r5, r5
 8008ed6:	6031      	str	r1, [r6, #0]
 8008ed8:	07d9      	lsls	r1, r3, #31
 8008eda:	bf44      	itt	mi
 8008edc:	f043 0320 	orrmi.w	r3, r3, #32
 8008ee0:	6023      	strmi	r3, [r4, #0]
 8008ee2:	b11d      	cbz	r5, 8008eec <_printf_i+0x19c>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	e7ad      	b.n	8008e44 <_printf_i+0xf4>
 8008ee8:	4826      	ldr	r0, [pc, #152]	@ (8008f84 <_printf_i+0x234>)
 8008eea:	e7e9      	b.n	8008ec0 <_printf_i+0x170>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	e7f6      	b.n	8008ee4 <_printf_i+0x194>
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	e7bd      	b.n	8008e76 <_printf_i+0x126>
 8008efa:	6833      	ldr	r3, [r6, #0]
 8008efc:	6825      	ldr	r5, [r4, #0]
 8008efe:	6961      	ldr	r1, [r4, #20]
 8008f00:	1d18      	adds	r0, r3, #4
 8008f02:	6030      	str	r0, [r6, #0]
 8008f04:	062e      	lsls	r6, r5, #24
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	d501      	bpl.n	8008f0e <_printf_i+0x1be>
 8008f0a:	6019      	str	r1, [r3, #0]
 8008f0c:	e002      	b.n	8008f14 <_printf_i+0x1c4>
 8008f0e:	0668      	lsls	r0, r5, #25
 8008f10:	d5fb      	bpl.n	8008f0a <_printf_i+0x1ba>
 8008f12:	8019      	strh	r1, [r3, #0]
 8008f14:	2300      	movs	r3, #0
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	4616      	mov	r6, r2
 8008f1a:	e7bc      	b.n	8008e96 <_printf_i+0x146>
 8008f1c:	6833      	ldr	r3, [r6, #0]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	6032      	str	r2, [r6, #0]
 8008f22:	681e      	ldr	r6, [r3, #0]
 8008f24:	6862      	ldr	r2, [r4, #4]
 8008f26:	2100      	movs	r1, #0
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7f7 f959 	bl	80001e0 <memchr>
 8008f2e:	b108      	cbz	r0, 8008f34 <_printf_i+0x1e4>
 8008f30:	1b80      	subs	r0, r0, r6
 8008f32:	6060      	str	r0, [r4, #4]
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f3e:	e7aa      	b.n	8008e96 <_printf_i+0x146>
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	4632      	mov	r2, r6
 8008f44:	4649      	mov	r1, r9
 8008f46:	4640      	mov	r0, r8
 8008f48:	47d0      	blx	sl
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d0ad      	beq.n	8008eaa <_printf_i+0x15a>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	079b      	lsls	r3, r3, #30
 8008f52:	d413      	bmi.n	8008f7c <_printf_i+0x22c>
 8008f54:	68e0      	ldr	r0, [r4, #12]
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	4298      	cmp	r0, r3
 8008f5a:	bfb8      	it	lt
 8008f5c:	4618      	movlt	r0, r3
 8008f5e:	e7a6      	b.n	8008eae <_printf_i+0x15e>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4632      	mov	r2, r6
 8008f64:	4649      	mov	r1, r9
 8008f66:	4640      	mov	r0, r8
 8008f68:	47d0      	blx	sl
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d09d      	beq.n	8008eaa <_printf_i+0x15a>
 8008f6e:	3501      	adds	r5, #1
 8008f70:	68e3      	ldr	r3, [r4, #12]
 8008f72:	9903      	ldr	r1, [sp, #12]
 8008f74:	1a5b      	subs	r3, r3, r1
 8008f76:	42ab      	cmp	r3, r5
 8008f78:	dcf2      	bgt.n	8008f60 <_printf_i+0x210>
 8008f7a:	e7eb      	b.n	8008f54 <_printf_i+0x204>
 8008f7c:	2500      	movs	r5, #0
 8008f7e:	f104 0619 	add.w	r6, r4, #25
 8008f82:	e7f5      	b.n	8008f70 <_printf_i+0x220>
 8008f84:	0800c95e 	.word	0x0800c95e
 8008f88:	0800c96f 	.word	0x0800c96f

08008f8c <std>:
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	e9c0 3300 	strd	r3, r3, [r0]
 8008f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f9a:	6083      	str	r3, [r0, #8]
 8008f9c:	8181      	strh	r1, [r0, #12]
 8008f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fa0:	81c2      	strh	r2, [r0, #14]
 8008fa2:	6183      	str	r3, [r0, #24]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	305c      	adds	r0, #92	@ 0x5c
 8008faa:	f000 f931 	bl	8009210 <memset>
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <std+0x58>)
 8008fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe8 <std+0x5c>)
 8008fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fec <std+0x60>)
 8008fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <std+0x64>)
 8008fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff4 <std+0x68>)
 8008fc0:	6224      	str	r4, [r4, #32]
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d006      	beq.n	8008fd4 <std+0x48>
 8008fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fca:	4294      	cmp	r4, r2
 8008fcc:	d002      	beq.n	8008fd4 <std+0x48>
 8008fce:	33d0      	adds	r3, #208	@ 0xd0
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d105      	bne.n	8008fe0 <std+0x54>
 8008fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	f000 b994 	b.w	8009308 <__retarget_lock_init_recursive>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	bf00      	nop
 8008fe4:	08009111 	.word	0x08009111
 8008fe8:	08009133 	.word	0x08009133
 8008fec:	0800916b 	.word	0x0800916b
 8008ff0:	0800918f 	.word	0x0800918f
 8008ff4:	20001414 	.word	0x20001414

08008ff8 <stdio_exit_handler>:
 8008ff8:	4a02      	ldr	r2, [pc, #8]	@ (8009004 <stdio_exit_handler+0xc>)
 8008ffa:	4903      	ldr	r1, [pc, #12]	@ (8009008 <stdio_exit_handler+0x10>)
 8008ffc:	4803      	ldr	r0, [pc, #12]	@ (800900c <stdio_exit_handler+0x14>)
 8008ffe:	f000 b869 	b.w	80090d4 <_fwalk_sglue>
 8009002:	bf00      	nop
 8009004:	2000000c 	.word	0x2000000c
 8009008:	0800ac6d 	.word	0x0800ac6d
 800900c:	2000001c 	.word	0x2000001c

08009010 <cleanup_stdio>:
 8009010:	6841      	ldr	r1, [r0, #4]
 8009012:	4b0c      	ldr	r3, [pc, #48]	@ (8009044 <cleanup_stdio+0x34>)
 8009014:	4299      	cmp	r1, r3
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	d001      	beq.n	8009020 <cleanup_stdio+0x10>
 800901c:	f001 fe26 	bl	800ac6c <_fflush_r>
 8009020:	68a1      	ldr	r1, [r4, #8]
 8009022:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <cleanup_stdio+0x38>)
 8009024:	4299      	cmp	r1, r3
 8009026:	d002      	beq.n	800902e <cleanup_stdio+0x1e>
 8009028:	4620      	mov	r0, r4
 800902a:	f001 fe1f 	bl	800ac6c <_fflush_r>
 800902e:	68e1      	ldr	r1, [r4, #12]
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <cleanup_stdio+0x3c>)
 8009032:	4299      	cmp	r1, r3
 8009034:	d004      	beq.n	8009040 <cleanup_stdio+0x30>
 8009036:	4620      	mov	r0, r4
 8009038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800903c:	f001 be16 	b.w	800ac6c <_fflush_r>
 8009040:	bd10      	pop	{r4, pc}
 8009042:	bf00      	nop
 8009044:	20001414 	.word	0x20001414
 8009048:	2000147c 	.word	0x2000147c
 800904c:	200014e4 	.word	0x200014e4

08009050 <global_stdio_init.part.0>:
 8009050:	b510      	push	{r4, lr}
 8009052:	4b0b      	ldr	r3, [pc, #44]	@ (8009080 <global_stdio_init.part.0+0x30>)
 8009054:	4c0b      	ldr	r4, [pc, #44]	@ (8009084 <global_stdio_init.part.0+0x34>)
 8009056:	4a0c      	ldr	r2, [pc, #48]	@ (8009088 <global_stdio_init.part.0+0x38>)
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	4620      	mov	r0, r4
 800905c:	2200      	movs	r2, #0
 800905e:	2104      	movs	r1, #4
 8009060:	f7ff ff94 	bl	8008f8c <std>
 8009064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009068:	2201      	movs	r2, #1
 800906a:	2109      	movs	r1, #9
 800906c:	f7ff ff8e 	bl	8008f8c <std>
 8009070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009074:	2202      	movs	r2, #2
 8009076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907a:	2112      	movs	r1, #18
 800907c:	f7ff bf86 	b.w	8008f8c <std>
 8009080:	2000154c 	.word	0x2000154c
 8009084:	20001414 	.word	0x20001414
 8009088:	08008ff9 	.word	0x08008ff9

0800908c <__sfp_lock_acquire>:
 800908c:	4801      	ldr	r0, [pc, #4]	@ (8009094 <__sfp_lock_acquire+0x8>)
 800908e:	f000 b93c 	b.w	800930a <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	20001555 	.word	0x20001555

08009098 <__sfp_lock_release>:
 8009098:	4801      	ldr	r0, [pc, #4]	@ (80090a0 <__sfp_lock_release+0x8>)
 800909a:	f000 b937 	b.w	800930c <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	20001555 	.word	0x20001555

080090a4 <__sinit>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4604      	mov	r4, r0
 80090a8:	f7ff fff0 	bl	800908c <__sfp_lock_acquire>
 80090ac:	6a23      	ldr	r3, [r4, #32]
 80090ae:	b11b      	cbz	r3, 80090b8 <__sinit+0x14>
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	f7ff bff0 	b.w	8009098 <__sfp_lock_release>
 80090b8:	4b04      	ldr	r3, [pc, #16]	@ (80090cc <__sinit+0x28>)
 80090ba:	6223      	str	r3, [r4, #32]
 80090bc:	4b04      	ldr	r3, [pc, #16]	@ (80090d0 <__sinit+0x2c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1f5      	bne.n	80090b0 <__sinit+0xc>
 80090c4:	f7ff ffc4 	bl	8009050 <global_stdio_init.part.0>
 80090c8:	e7f2      	b.n	80090b0 <__sinit+0xc>
 80090ca:	bf00      	nop
 80090cc:	08009011 	.word	0x08009011
 80090d0:	2000154c 	.word	0x2000154c

080090d4 <_fwalk_sglue>:
 80090d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d8:	4607      	mov	r7, r0
 80090da:	4688      	mov	r8, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	2600      	movs	r6, #0
 80090e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090e4:	f1b9 0901 	subs.w	r9, r9, #1
 80090e8:	d505      	bpl.n	80090f6 <_fwalk_sglue+0x22>
 80090ea:	6824      	ldr	r4, [r4, #0]
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	d1f7      	bne.n	80090e0 <_fwalk_sglue+0xc>
 80090f0:	4630      	mov	r0, r6
 80090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d907      	bls.n	800910c <_fwalk_sglue+0x38>
 80090fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009100:	3301      	adds	r3, #1
 8009102:	d003      	beq.n	800910c <_fwalk_sglue+0x38>
 8009104:	4629      	mov	r1, r5
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	4306      	orrs	r6, r0
 800910c:	3568      	adds	r5, #104	@ 0x68
 800910e:	e7e9      	b.n	80090e4 <_fwalk_sglue+0x10>

08009110 <__sread>:
 8009110:	b510      	push	{r4, lr}
 8009112:	460c      	mov	r4, r1
 8009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009118:	f000 f8a8 	bl	800926c <_read_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	bfab      	itete	ge
 8009120:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009122:	89a3      	ldrhlt	r3, [r4, #12]
 8009124:	181b      	addge	r3, r3, r0
 8009126:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800912a:	bfac      	ite	ge
 800912c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800912e:	81a3      	strhlt	r3, [r4, #12]
 8009130:	bd10      	pop	{r4, pc}

08009132 <__swrite>:
 8009132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009136:	461f      	mov	r7, r3
 8009138:	898b      	ldrh	r3, [r1, #12]
 800913a:	05db      	lsls	r3, r3, #23
 800913c:	4605      	mov	r5, r0
 800913e:	460c      	mov	r4, r1
 8009140:	4616      	mov	r6, r2
 8009142:	d505      	bpl.n	8009150 <__swrite+0x1e>
 8009144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009148:	2302      	movs	r3, #2
 800914a:	2200      	movs	r2, #0
 800914c:	f000 f87c 	bl	8009248 <_lseek_r>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	4632      	mov	r2, r6
 800915e:	463b      	mov	r3, r7
 8009160:	4628      	mov	r0, r5
 8009162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009166:	f000 b893 	b.w	8009290 <_write_r>

0800916a <__sseek>:
 800916a:	b510      	push	{r4, lr}
 800916c:	460c      	mov	r4, r1
 800916e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009172:	f000 f869 	bl	8009248 <_lseek_r>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	bf15      	itete	ne
 800917c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800917e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009182:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009186:	81a3      	strheq	r3, [r4, #12]
 8009188:	bf18      	it	ne
 800918a:	81a3      	strhne	r3, [r4, #12]
 800918c:	bd10      	pop	{r4, pc}

0800918e <__sclose>:
 800918e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009192:	f000 b849 	b.w	8009228 <_close_r>

08009196 <_vsniprintf_r>:
 8009196:	b530      	push	{r4, r5, lr}
 8009198:	4614      	mov	r4, r2
 800919a:	2c00      	cmp	r4, #0
 800919c:	b09b      	sub	sp, #108	@ 0x6c
 800919e:	4605      	mov	r5, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	da05      	bge.n	80091b0 <_vsniprintf_r+0x1a>
 80091a4:	238b      	movs	r3, #139	@ 0x8b
 80091a6:	6003      	str	r3, [r0, #0]
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	b01b      	add	sp, #108	@ 0x6c
 80091ae:	bd30      	pop	{r4, r5, pc}
 80091b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80091b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80091b8:	f04f 0300 	mov.w	r3, #0
 80091bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80091be:	bf14      	ite	ne
 80091c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80091c4:	4623      	moveq	r3, r4
 80091c6:	9302      	str	r3, [sp, #8]
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80091ce:	9100      	str	r1, [sp, #0]
 80091d0:	9104      	str	r1, [sp, #16]
 80091d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80091d6:	4669      	mov	r1, sp
 80091d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80091da:	f001 fbc7 	bl	800a96c <_svfiprintf_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	bfbc      	itt	lt
 80091e2:	238b      	movlt	r3, #139	@ 0x8b
 80091e4:	602b      	strlt	r3, [r5, #0]
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	d0e0      	beq.n	80091ac <_vsniprintf_r+0x16>
 80091ea:	9b00      	ldr	r3, [sp, #0]
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	e7dc      	b.n	80091ac <_vsniprintf_r+0x16>
	...

080091f4 <vsniprintf>:
 80091f4:	b507      	push	{r0, r1, r2, lr}
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	4613      	mov	r3, r2
 80091fa:	460a      	mov	r2, r1
 80091fc:	4601      	mov	r1, r0
 80091fe:	4803      	ldr	r0, [pc, #12]	@ (800920c <vsniprintf+0x18>)
 8009200:	6800      	ldr	r0, [r0, #0]
 8009202:	f7ff ffc8 	bl	8009196 <_vsniprintf_r>
 8009206:	b003      	add	sp, #12
 8009208:	f85d fb04 	ldr.w	pc, [sp], #4
 800920c:	20000018 	.word	0x20000018

08009210 <memset>:
 8009210:	4402      	add	r2, r0
 8009212:	4603      	mov	r3, r0
 8009214:	4293      	cmp	r3, r2
 8009216:	d100      	bne.n	800921a <memset+0xa>
 8009218:	4770      	bx	lr
 800921a:	f803 1b01 	strb.w	r1, [r3], #1
 800921e:	e7f9      	b.n	8009214 <memset+0x4>

08009220 <_localeconv_r>:
 8009220:	4800      	ldr	r0, [pc, #0]	@ (8009224 <_localeconv_r+0x4>)
 8009222:	4770      	bx	lr
 8009224:	20000158 	.word	0x20000158

08009228 <_close_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4d06      	ldr	r5, [pc, #24]	@ (8009244 <_close_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7fa fdf0 	bl	8003e18 <_close>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_close_r+0x1a>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	b103      	cbz	r3, 8009242 <_close_r+0x1a>
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	20001550 	.word	0x20001550

08009248 <_lseek_r>:
 8009248:	b538      	push	{r3, r4, r5, lr}
 800924a:	4d07      	ldr	r5, [pc, #28]	@ (8009268 <_lseek_r+0x20>)
 800924c:	4604      	mov	r4, r0
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	f7fa fe05 	bl	8003e66 <_lseek>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_lseek_r+0x1e>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_lseek_r+0x1e>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20001550 	.word	0x20001550

0800926c <_read_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	@ (800928c <_read_r+0x20>)
 8009270:	4604      	mov	r4, r0
 8009272:	4608      	mov	r0, r1
 8009274:	4611      	mov	r1, r2
 8009276:	2200      	movs	r2, #0
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	f7fa fd93 	bl	8003da6 <_read>
 8009280:	1c43      	adds	r3, r0, #1
 8009282:	d102      	bne.n	800928a <_read_r+0x1e>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	b103      	cbz	r3, 800928a <_read_r+0x1e>
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	20001550 	.word	0x20001550

08009290 <_write_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	@ (80092b0 <_write_r+0x20>)
 8009294:	4604      	mov	r4, r0
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	2200      	movs	r2, #0
 800929c:	602a      	str	r2, [r5, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	f7fa fd9e 	bl	8003de0 <_write>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_write_r+0x1e>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_write_r+0x1e>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	20001550 	.word	0x20001550

080092b4 <__errno>:
 80092b4:	4b01      	ldr	r3, [pc, #4]	@ (80092bc <__errno+0x8>)
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000018 	.word	0x20000018

080092c0 <__libc_init_array>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	4d0d      	ldr	r5, [pc, #52]	@ (80092f8 <__libc_init_array+0x38>)
 80092c4:	4c0d      	ldr	r4, [pc, #52]	@ (80092fc <__libc_init_array+0x3c>)
 80092c6:	1b64      	subs	r4, r4, r5
 80092c8:	10a4      	asrs	r4, r4, #2
 80092ca:	2600      	movs	r6, #0
 80092cc:	42a6      	cmp	r6, r4
 80092ce:	d109      	bne.n	80092e4 <__libc_init_array+0x24>
 80092d0:	4d0b      	ldr	r5, [pc, #44]	@ (8009300 <__libc_init_array+0x40>)
 80092d2:	4c0c      	ldr	r4, [pc, #48]	@ (8009304 <__libc_init_array+0x44>)
 80092d4:	f002 f868 	bl	800b3a8 <_init>
 80092d8:	1b64      	subs	r4, r4, r5
 80092da:	10a4      	asrs	r4, r4, #2
 80092dc:	2600      	movs	r6, #0
 80092de:	42a6      	cmp	r6, r4
 80092e0:	d105      	bne.n	80092ee <__libc_init_array+0x2e>
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e8:	4798      	blx	r3
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7ee      	b.n	80092cc <__libc_init_array+0xc>
 80092ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f2:	4798      	blx	r3
 80092f4:	3601      	adds	r6, #1
 80092f6:	e7f2      	b.n	80092de <__libc_init_array+0x1e>
 80092f8:	0800cccc 	.word	0x0800cccc
 80092fc:	0800cccc 	.word	0x0800cccc
 8009300:	0800cccc 	.word	0x0800cccc
 8009304:	0800ccd0 	.word	0x0800ccd0

08009308 <__retarget_lock_init_recursive>:
 8009308:	4770      	bx	lr

0800930a <__retarget_lock_acquire_recursive>:
 800930a:	4770      	bx	lr

0800930c <__retarget_lock_release_recursive>:
 800930c:	4770      	bx	lr

0800930e <quorem>:
 800930e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009312:	6903      	ldr	r3, [r0, #16]
 8009314:	690c      	ldr	r4, [r1, #16]
 8009316:	42a3      	cmp	r3, r4
 8009318:	4607      	mov	r7, r0
 800931a:	db7e      	blt.n	800941a <quorem+0x10c>
 800931c:	3c01      	subs	r4, #1
 800931e:	f101 0814 	add.w	r8, r1, #20
 8009322:	00a3      	lsls	r3, r4, #2
 8009324:	f100 0514 	add.w	r5, r0, #20
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800932e:	9301      	str	r3, [sp, #4]
 8009330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009338:	3301      	adds	r3, #1
 800933a:	429a      	cmp	r2, r3
 800933c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009340:	fbb2 f6f3 	udiv	r6, r2, r3
 8009344:	d32e      	bcc.n	80093a4 <quorem+0x96>
 8009346:	f04f 0a00 	mov.w	sl, #0
 800934a:	46c4      	mov	ip, r8
 800934c:	46ae      	mov	lr, r5
 800934e:	46d3      	mov	fp, sl
 8009350:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009354:	b298      	uxth	r0, r3
 8009356:	fb06 a000 	mla	r0, r6, r0, sl
 800935a:	0c02      	lsrs	r2, r0, #16
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	fb06 2303 	mla	r3, r6, r3, r2
 8009362:	f8de 2000 	ldr.w	r2, [lr]
 8009366:	b280      	uxth	r0, r0
 8009368:	b292      	uxth	r2, r2
 800936a:	1a12      	subs	r2, r2, r0
 800936c:	445a      	add	r2, fp
 800936e:	f8de 0000 	ldr.w	r0, [lr]
 8009372:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009376:	b29b      	uxth	r3, r3
 8009378:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800937c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009380:	b292      	uxth	r2, r2
 8009382:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009386:	45e1      	cmp	r9, ip
 8009388:	f84e 2b04 	str.w	r2, [lr], #4
 800938c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009390:	d2de      	bcs.n	8009350 <quorem+0x42>
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	58eb      	ldr	r3, [r5, r3]
 8009396:	b92b      	cbnz	r3, 80093a4 <quorem+0x96>
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	3b04      	subs	r3, #4
 800939c:	429d      	cmp	r5, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	d32f      	bcc.n	8009402 <quorem+0xf4>
 80093a2:	613c      	str	r4, [r7, #16]
 80093a4:	4638      	mov	r0, r7
 80093a6:	f001 f97d 	bl	800a6a4 <__mcmp>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	db25      	blt.n	80093fa <quorem+0xec>
 80093ae:	4629      	mov	r1, r5
 80093b0:	2000      	movs	r0, #0
 80093b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80093b6:	f8d1 c000 	ldr.w	ip, [r1]
 80093ba:	fa1f fe82 	uxth.w	lr, r2
 80093be:	fa1f f38c 	uxth.w	r3, ip
 80093c2:	eba3 030e 	sub.w	r3, r3, lr
 80093c6:	4403      	add	r3, r0
 80093c8:	0c12      	lsrs	r2, r2, #16
 80093ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d8:	45c1      	cmp	r9, r8
 80093da:	f841 3b04 	str.w	r3, [r1], #4
 80093de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093e2:	d2e6      	bcs.n	80093b2 <quorem+0xa4>
 80093e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ec:	b922      	cbnz	r2, 80093f8 <quorem+0xea>
 80093ee:	3b04      	subs	r3, #4
 80093f0:	429d      	cmp	r5, r3
 80093f2:	461a      	mov	r2, r3
 80093f4:	d30b      	bcc.n	800940e <quorem+0x100>
 80093f6:	613c      	str	r4, [r7, #16]
 80093f8:	3601      	adds	r6, #1
 80093fa:	4630      	mov	r0, r6
 80093fc:	b003      	add	sp, #12
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	3b04      	subs	r3, #4
 8009406:	2a00      	cmp	r2, #0
 8009408:	d1cb      	bne.n	80093a2 <quorem+0x94>
 800940a:	3c01      	subs	r4, #1
 800940c:	e7c6      	b.n	800939c <quorem+0x8e>
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	3b04      	subs	r3, #4
 8009412:	2a00      	cmp	r2, #0
 8009414:	d1ef      	bne.n	80093f6 <quorem+0xe8>
 8009416:	3c01      	subs	r4, #1
 8009418:	e7ea      	b.n	80093f0 <quorem+0xe2>
 800941a:	2000      	movs	r0, #0
 800941c:	e7ee      	b.n	80093fc <quorem+0xee>
	...

08009420 <_dtoa_r>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	69c7      	ldr	r7, [r0, #28]
 8009426:	b097      	sub	sp, #92	@ 0x5c
 8009428:	ed8d 0b04 	vstr	d0, [sp, #16]
 800942c:	ec55 4b10 	vmov	r4, r5, d0
 8009430:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	4681      	mov	r9, r0
 8009436:	920c      	str	r2, [sp, #48]	@ 0x30
 8009438:	9311      	str	r3, [sp, #68]	@ 0x44
 800943a:	b97f      	cbnz	r7, 800945c <_dtoa_r+0x3c>
 800943c:	2010      	movs	r0, #16
 800943e:	f000 fe09 	bl	800a054 <malloc>
 8009442:	4602      	mov	r2, r0
 8009444:	f8c9 001c 	str.w	r0, [r9, #28]
 8009448:	b920      	cbnz	r0, 8009454 <_dtoa_r+0x34>
 800944a:	4ba9      	ldr	r3, [pc, #676]	@ (80096f0 <_dtoa_r+0x2d0>)
 800944c:	21ef      	movs	r1, #239	@ 0xef
 800944e:	48a9      	ldr	r0, [pc, #676]	@ (80096f4 <_dtoa_r+0x2d4>)
 8009450:	f001 fc6c 	bl	800ad2c <__assert_func>
 8009454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009458:	6007      	str	r7, [r0, #0]
 800945a:	60c7      	str	r7, [r0, #12]
 800945c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009460:	6819      	ldr	r1, [r3, #0]
 8009462:	b159      	cbz	r1, 800947c <_dtoa_r+0x5c>
 8009464:	685a      	ldr	r2, [r3, #4]
 8009466:	604a      	str	r2, [r1, #4]
 8009468:	2301      	movs	r3, #1
 800946a:	4093      	lsls	r3, r2
 800946c:	608b      	str	r3, [r1, #8]
 800946e:	4648      	mov	r0, r9
 8009470:	f000 fee6 	bl	800a240 <_Bfree>
 8009474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	1e2b      	subs	r3, r5, #0
 800947e:	bfb9      	ittee	lt
 8009480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	9305      	strlt	r3, [sp, #20]
 8009486:	2300      	movge	r3, #0
 8009488:	6033      	strge	r3, [r6, #0]
 800948a:	9f05      	ldr	r7, [sp, #20]
 800948c:	4b9a      	ldr	r3, [pc, #616]	@ (80096f8 <_dtoa_r+0x2d8>)
 800948e:	bfbc      	itt	lt
 8009490:	2201      	movlt	r2, #1
 8009492:	6032      	strlt	r2, [r6, #0]
 8009494:	43bb      	bics	r3, r7
 8009496:	d112      	bne.n	80094be <_dtoa_r+0x9e>
 8009498:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800949a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094a4:	4323      	orrs	r3, r4
 80094a6:	f000 855a 	beq.w	8009f5e <_dtoa_r+0xb3e>
 80094aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800970c <_dtoa_r+0x2ec>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 855c 	beq.w	8009f6e <_dtoa_r+0xb4e>
 80094b6:	f10a 0303 	add.w	r3, sl, #3
 80094ba:	f000 bd56 	b.w	8009f6a <_dtoa_r+0xb4a>
 80094be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094c2:	2200      	movs	r2, #0
 80094c4:	ec51 0b17 	vmov	r0, r1, d7
 80094c8:	2300      	movs	r3, #0
 80094ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80094ce:	f7f7 fb03 	bl	8000ad8 <__aeabi_dcmpeq>
 80094d2:	4680      	mov	r8, r0
 80094d4:	b158      	cbz	r0, 80094ee <_dtoa_r+0xce>
 80094d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094d8:	2301      	movs	r3, #1
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094de:	b113      	cbz	r3, 80094e6 <_dtoa_r+0xc6>
 80094e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094e2:	4b86      	ldr	r3, [pc, #536]	@ (80096fc <_dtoa_r+0x2dc>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009710 <_dtoa_r+0x2f0>
 80094ea:	f000 bd40 	b.w	8009f6e <_dtoa_r+0xb4e>
 80094ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80094f2:	aa14      	add	r2, sp, #80	@ 0x50
 80094f4:	a915      	add	r1, sp, #84	@ 0x54
 80094f6:	4648      	mov	r0, r9
 80094f8:	f001 f984 	bl	800a804 <__d2b>
 80094fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009500:	9002      	str	r0, [sp, #8]
 8009502:	2e00      	cmp	r6, #0
 8009504:	d078      	beq.n	80095f8 <_dtoa_r+0x1d8>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800950c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800951c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009520:	4619      	mov	r1, r3
 8009522:	2200      	movs	r2, #0
 8009524:	4b76      	ldr	r3, [pc, #472]	@ (8009700 <_dtoa_r+0x2e0>)
 8009526:	f7f6 feb7 	bl	8000298 <__aeabi_dsub>
 800952a:	a36b      	add	r3, pc, #428	@ (adr r3, 80096d8 <_dtoa_r+0x2b8>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f7f7 f86a 	bl	8000608 <__aeabi_dmul>
 8009534:	a36a      	add	r3, pc, #424	@ (adr r3, 80096e0 <_dtoa_r+0x2c0>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f7f6 feaf 	bl	800029c <__adddf3>
 800953e:	4604      	mov	r4, r0
 8009540:	4630      	mov	r0, r6
 8009542:	460d      	mov	r5, r1
 8009544:	f7f6 fff6 	bl	8000534 <__aeabi_i2d>
 8009548:	a367      	add	r3, pc, #412	@ (adr r3, 80096e8 <_dtoa_r+0x2c8>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f7f7 f85b 	bl	8000608 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4620      	mov	r0, r4
 8009558:	4629      	mov	r1, r5
 800955a:	f7f6 fe9f 	bl	800029c <__adddf3>
 800955e:	4604      	mov	r4, r0
 8009560:	460d      	mov	r5, r1
 8009562:	f7f7 fb01 	bl	8000b68 <__aeabi_d2iz>
 8009566:	2200      	movs	r2, #0
 8009568:	4607      	mov	r7, r0
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f7 fabc 	bl	8000aec <__aeabi_dcmplt>
 8009574:	b140      	cbz	r0, 8009588 <_dtoa_r+0x168>
 8009576:	4638      	mov	r0, r7
 8009578:	f7f6 ffdc 	bl	8000534 <__aeabi_i2d>
 800957c:	4622      	mov	r2, r4
 800957e:	462b      	mov	r3, r5
 8009580:	f7f7 faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8009584:	b900      	cbnz	r0, 8009588 <_dtoa_r+0x168>
 8009586:	3f01      	subs	r7, #1
 8009588:	2f16      	cmp	r7, #22
 800958a:	d852      	bhi.n	8009632 <_dtoa_r+0x212>
 800958c:	4b5d      	ldr	r3, [pc, #372]	@ (8009704 <_dtoa_r+0x2e4>)
 800958e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800959a:	f7f7 faa7 	bl	8000aec <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d049      	beq.n	8009636 <_dtoa_r+0x216>
 80095a2:	3f01      	subs	r7, #1
 80095a4:	2300      	movs	r3, #0
 80095a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	bf45      	ittet	mi
 80095b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80095b4:	9300      	strmi	r3, [sp, #0]
 80095b6:	2300      	movpl	r3, #0
 80095b8:	2300      	movmi	r3, #0
 80095ba:	9206      	str	r2, [sp, #24]
 80095bc:	bf54      	ite	pl
 80095be:	9300      	strpl	r3, [sp, #0]
 80095c0:	9306      	strmi	r3, [sp, #24]
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	db39      	blt.n	800963a <_dtoa_r+0x21a>
 80095c6:	9b06      	ldr	r3, [sp, #24]
 80095c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80095ca:	443b      	add	r3, r7
 80095cc:	9306      	str	r3, [sp, #24]
 80095ce:	2300      	movs	r3, #0
 80095d0:	9308      	str	r3, [sp, #32]
 80095d2:	9b07      	ldr	r3, [sp, #28]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	d863      	bhi.n	80096a0 <_dtoa_r+0x280>
 80095d8:	2b05      	cmp	r3, #5
 80095da:	bfc4      	itt	gt
 80095dc:	3b04      	subgt	r3, #4
 80095de:	9307      	strgt	r3, [sp, #28]
 80095e0:	9b07      	ldr	r3, [sp, #28]
 80095e2:	f1a3 0302 	sub.w	r3, r3, #2
 80095e6:	bfcc      	ite	gt
 80095e8:	2400      	movgt	r4, #0
 80095ea:	2401      	movle	r4, #1
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d863      	bhi.n	80096b8 <_dtoa_r+0x298>
 80095f0:	e8df f003 	tbb	[pc, r3]
 80095f4:	2b375452 	.word	0x2b375452
 80095f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80095fc:	441e      	add	r6, r3
 80095fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009602:	2b20      	cmp	r3, #32
 8009604:	bfc1      	itttt	gt
 8009606:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800960a:	409f      	lslgt	r7, r3
 800960c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009610:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009614:	bfd6      	itet	le
 8009616:	f1c3 0320 	rsble	r3, r3, #32
 800961a:	ea47 0003 	orrgt.w	r0, r7, r3
 800961e:	fa04 f003 	lslle.w	r0, r4, r3
 8009622:	f7f6 ff77 	bl	8000514 <__aeabi_ui2d>
 8009626:	2201      	movs	r2, #1
 8009628:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800962c:	3e01      	subs	r6, #1
 800962e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009630:	e776      	b.n	8009520 <_dtoa_r+0x100>
 8009632:	2301      	movs	r3, #1
 8009634:	e7b7      	b.n	80095a6 <_dtoa_r+0x186>
 8009636:	9010      	str	r0, [sp, #64]	@ 0x40
 8009638:	e7b6      	b.n	80095a8 <_dtoa_r+0x188>
 800963a:	9b00      	ldr	r3, [sp, #0]
 800963c:	1bdb      	subs	r3, r3, r7
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	427b      	negs	r3, r7
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	2300      	movs	r3, #0
 8009646:	930d      	str	r3, [sp, #52]	@ 0x34
 8009648:	e7c3      	b.n	80095d2 <_dtoa_r+0x1b2>
 800964a:	2301      	movs	r3, #1
 800964c:	9309      	str	r3, [sp, #36]	@ 0x24
 800964e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009650:	eb07 0b03 	add.w	fp, r7, r3
 8009654:	f10b 0301 	add.w	r3, fp, #1
 8009658:	2b01      	cmp	r3, #1
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	bfb8      	it	lt
 800965e:	2301      	movlt	r3, #1
 8009660:	e006      	b.n	8009670 <_dtoa_r+0x250>
 8009662:	2301      	movs	r3, #1
 8009664:	9309      	str	r3, [sp, #36]	@ 0x24
 8009666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	dd28      	ble.n	80096be <_dtoa_r+0x29e>
 800966c:	469b      	mov	fp, r3
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009674:	2100      	movs	r1, #0
 8009676:	2204      	movs	r2, #4
 8009678:	f102 0514 	add.w	r5, r2, #20
 800967c:	429d      	cmp	r5, r3
 800967e:	d926      	bls.n	80096ce <_dtoa_r+0x2ae>
 8009680:	6041      	str	r1, [r0, #4]
 8009682:	4648      	mov	r0, r9
 8009684:	f000 fd9c 	bl	800a1c0 <_Balloc>
 8009688:	4682      	mov	sl, r0
 800968a:	2800      	cmp	r0, #0
 800968c:	d142      	bne.n	8009714 <_dtoa_r+0x2f4>
 800968e:	4b1e      	ldr	r3, [pc, #120]	@ (8009708 <_dtoa_r+0x2e8>)
 8009690:	4602      	mov	r2, r0
 8009692:	f240 11af 	movw	r1, #431	@ 0x1af
 8009696:	e6da      	b.n	800944e <_dtoa_r+0x2e>
 8009698:	2300      	movs	r3, #0
 800969a:	e7e3      	b.n	8009664 <_dtoa_r+0x244>
 800969c:	2300      	movs	r3, #0
 800969e:	e7d5      	b.n	800964c <_dtoa_r+0x22c>
 80096a0:	2401      	movs	r4, #1
 80096a2:	2300      	movs	r3, #0
 80096a4:	9307      	str	r3, [sp, #28]
 80096a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80096a8:	f04f 3bff 	mov.w	fp, #4294967295
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80096b2:	2312      	movs	r3, #18
 80096b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80096b6:	e7db      	b.n	8009670 <_dtoa_r+0x250>
 80096b8:	2301      	movs	r3, #1
 80096ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80096bc:	e7f4      	b.n	80096a8 <_dtoa_r+0x288>
 80096be:	f04f 0b01 	mov.w	fp, #1
 80096c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80096c6:	465b      	mov	r3, fp
 80096c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80096cc:	e7d0      	b.n	8009670 <_dtoa_r+0x250>
 80096ce:	3101      	adds	r1, #1
 80096d0:	0052      	lsls	r2, r2, #1
 80096d2:	e7d1      	b.n	8009678 <_dtoa_r+0x258>
 80096d4:	f3af 8000 	nop.w
 80096d8:	636f4361 	.word	0x636f4361
 80096dc:	3fd287a7 	.word	0x3fd287a7
 80096e0:	8b60c8b3 	.word	0x8b60c8b3
 80096e4:	3fc68a28 	.word	0x3fc68a28
 80096e8:	509f79fb 	.word	0x509f79fb
 80096ec:	3fd34413 	.word	0x3fd34413
 80096f0:	0800c98d 	.word	0x0800c98d
 80096f4:	0800c9a4 	.word	0x0800c9a4
 80096f8:	7ff00000 	.word	0x7ff00000
 80096fc:	0800c95d 	.word	0x0800c95d
 8009700:	3ff80000 	.word	0x3ff80000
 8009704:	0800caf8 	.word	0x0800caf8
 8009708:	0800c9fc 	.word	0x0800c9fc
 800970c:	0800c989 	.word	0x0800c989
 8009710:	0800c95c 	.word	0x0800c95c
 8009714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009718:	6018      	str	r0, [r3, #0]
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	2b0e      	cmp	r3, #14
 800971e:	f200 80a1 	bhi.w	8009864 <_dtoa_r+0x444>
 8009722:	2c00      	cmp	r4, #0
 8009724:	f000 809e 	beq.w	8009864 <_dtoa_r+0x444>
 8009728:	2f00      	cmp	r7, #0
 800972a:	dd33      	ble.n	8009794 <_dtoa_r+0x374>
 800972c:	4b9c      	ldr	r3, [pc, #624]	@ (80099a0 <_dtoa_r+0x580>)
 800972e:	f007 020f 	and.w	r2, r7, #15
 8009732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009736:	ed93 7b00 	vldr	d7, [r3]
 800973a:	05f8      	lsls	r0, r7, #23
 800973c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009744:	d516      	bpl.n	8009774 <_dtoa_r+0x354>
 8009746:	4b97      	ldr	r3, [pc, #604]	@ (80099a4 <_dtoa_r+0x584>)
 8009748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800974c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009750:	f7f7 f884 	bl	800085c <__aeabi_ddiv>
 8009754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009758:	f004 040f 	and.w	r4, r4, #15
 800975c:	2603      	movs	r6, #3
 800975e:	4d91      	ldr	r5, [pc, #580]	@ (80099a4 <_dtoa_r+0x584>)
 8009760:	b954      	cbnz	r4, 8009778 <_dtoa_r+0x358>
 8009762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800976a:	f7f7 f877 	bl	800085c <__aeabi_ddiv>
 800976e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009772:	e028      	b.n	80097c6 <_dtoa_r+0x3a6>
 8009774:	2602      	movs	r6, #2
 8009776:	e7f2      	b.n	800975e <_dtoa_r+0x33e>
 8009778:	07e1      	lsls	r1, r4, #31
 800977a:	d508      	bpl.n	800978e <_dtoa_r+0x36e>
 800977c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009784:	f7f6 ff40 	bl	8000608 <__aeabi_dmul>
 8009788:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800978c:	3601      	adds	r6, #1
 800978e:	1064      	asrs	r4, r4, #1
 8009790:	3508      	adds	r5, #8
 8009792:	e7e5      	b.n	8009760 <_dtoa_r+0x340>
 8009794:	f000 80af 	beq.w	80098f6 <_dtoa_r+0x4d6>
 8009798:	427c      	negs	r4, r7
 800979a:	4b81      	ldr	r3, [pc, #516]	@ (80099a0 <_dtoa_r+0x580>)
 800979c:	4d81      	ldr	r5, [pc, #516]	@ (80099a4 <_dtoa_r+0x584>)
 800979e:	f004 020f 	and.w	r2, r4, #15
 80097a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097ae:	f7f6 ff2b 	bl	8000608 <__aeabi_dmul>
 80097b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b6:	1124      	asrs	r4, r4, #4
 80097b8:	2300      	movs	r3, #0
 80097ba:	2602      	movs	r6, #2
 80097bc:	2c00      	cmp	r4, #0
 80097be:	f040 808f 	bne.w	80098e0 <_dtoa_r+0x4c0>
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1d3      	bne.n	800976e <_dtoa_r+0x34e>
 80097c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8094 	beq.w	80098fa <_dtoa_r+0x4da>
 80097d2:	4b75      	ldr	r3, [pc, #468]	@ (80099a8 <_dtoa_r+0x588>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f7 f987 	bl	8000aec <__aeabi_dcmplt>
 80097de:	2800      	cmp	r0, #0
 80097e0:	f000 808b 	beq.w	80098fa <_dtoa_r+0x4da>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f000 8087 	beq.w	80098fa <_dtoa_r+0x4da>
 80097ec:	f1bb 0f00 	cmp.w	fp, #0
 80097f0:	dd34      	ble.n	800985c <_dtoa_r+0x43c>
 80097f2:	4620      	mov	r0, r4
 80097f4:	4b6d      	ldr	r3, [pc, #436]	@ (80099ac <_dtoa_r+0x58c>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 ff05 	bl	8000608 <__aeabi_dmul>
 80097fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009802:	f107 38ff 	add.w	r8, r7, #4294967295
 8009806:	3601      	adds	r6, #1
 8009808:	465c      	mov	r4, fp
 800980a:	4630      	mov	r0, r6
 800980c:	f7f6 fe92 	bl	8000534 <__aeabi_i2d>
 8009810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009814:	f7f6 fef8 	bl	8000608 <__aeabi_dmul>
 8009818:	4b65      	ldr	r3, [pc, #404]	@ (80099b0 <_dtoa_r+0x590>)
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 fd3e 	bl	800029c <__adddf3>
 8009820:	4605      	mov	r5, r0
 8009822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009826:	2c00      	cmp	r4, #0
 8009828:	d16a      	bne.n	8009900 <_dtoa_r+0x4e0>
 800982a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800982e:	4b61      	ldr	r3, [pc, #388]	@ (80099b4 <_dtoa_r+0x594>)
 8009830:	2200      	movs	r2, #0
 8009832:	f7f6 fd31 	bl	8000298 <__aeabi_dsub>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800983e:	462a      	mov	r2, r5
 8009840:	4633      	mov	r3, r6
 8009842:	f7f7 f971 	bl	8000b28 <__aeabi_dcmpgt>
 8009846:	2800      	cmp	r0, #0
 8009848:	f040 8298 	bne.w	8009d7c <_dtoa_r+0x95c>
 800984c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009850:	462a      	mov	r2, r5
 8009852:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009856:	f7f7 f949 	bl	8000aec <__aeabi_dcmplt>
 800985a:	bb38      	cbnz	r0, 80098ac <_dtoa_r+0x48c>
 800985c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009866:	2b00      	cmp	r3, #0
 8009868:	f2c0 8157 	blt.w	8009b1a <_dtoa_r+0x6fa>
 800986c:	2f0e      	cmp	r7, #14
 800986e:	f300 8154 	bgt.w	8009b1a <_dtoa_r+0x6fa>
 8009872:	4b4b      	ldr	r3, [pc, #300]	@ (80099a0 <_dtoa_r+0x580>)
 8009874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009878:	ed93 7b00 	vldr	d7, [r3]
 800987c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800987e:	2b00      	cmp	r3, #0
 8009880:	ed8d 7b00 	vstr	d7, [sp]
 8009884:	f280 80e5 	bge.w	8009a52 <_dtoa_r+0x632>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f300 80e1 	bgt.w	8009a52 <_dtoa_r+0x632>
 8009890:	d10c      	bne.n	80098ac <_dtoa_r+0x48c>
 8009892:	4b48      	ldr	r3, [pc, #288]	@ (80099b4 <_dtoa_r+0x594>)
 8009894:	2200      	movs	r2, #0
 8009896:	ec51 0b17 	vmov	r0, r1, d7
 800989a:	f7f6 feb5 	bl	8000608 <__aeabi_dmul>
 800989e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a2:	f7f7 f937 	bl	8000b14 <__aeabi_dcmpge>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	f000 8266 	beq.w	8009d78 <_dtoa_r+0x958>
 80098ac:	2400      	movs	r4, #0
 80098ae:	4625      	mov	r5, r4
 80098b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098b2:	4656      	mov	r6, sl
 80098b4:	ea6f 0803 	mvn.w	r8, r3
 80098b8:	2700      	movs	r7, #0
 80098ba:	4621      	mov	r1, r4
 80098bc:	4648      	mov	r0, r9
 80098be:	f000 fcbf 	bl	800a240 <_Bfree>
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	f000 80bd 	beq.w	8009a42 <_dtoa_r+0x622>
 80098c8:	b12f      	cbz	r7, 80098d6 <_dtoa_r+0x4b6>
 80098ca:	42af      	cmp	r7, r5
 80098cc:	d003      	beq.n	80098d6 <_dtoa_r+0x4b6>
 80098ce:	4639      	mov	r1, r7
 80098d0:	4648      	mov	r0, r9
 80098d2:	f000 fcb5 	bl	800a240 <_Bfree>
 80098d6:	4629      	mov	r1, r5
 80098d8:	4648      	mov	r0, r9
 80098da:	f000 fcb1 	bl	800a240 <_Bfree>
 80098de:	e0b0      	b.n	8009a42 <_dtoa_r+0x622>
 80098e0:	07e2      	lsls	r2, r4, #31
 80098e2:	d505      	bpl.n	80098f0 <_dtoa_r+0x4d0>
 80098e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098e8:	f7f6 fe8e 	bl	8000608 <__aeabi_dmul>
 80098ec:	3601      	adds	r6, #1
 80098ee:	2301      	movs	r3, #1
 80098f0:	1064      	asrs	r4, r4, #1
 80098f2:	3508      	adds	r5, #8
 80098f4:	e762      	b.n	80097bc <_dtoa_r+0x39c>
 80098f6:	2602      	movs	r6, #2
 80098f8:	e765      	b.n	80097c6 <_dtoa_r+0x3a6>
 80098fa:	9c03      	ldr	r4, [sp, #12]
 80098fc:	46b8      	mov	r8, r7
 80098fe:	e784      	b.n	800980a <_dtoa_r+0x3ea>
 8009900:	4b27      	ldr	r3, [pc, #156]	@ (80099a0 <_dtoa_r+0x580>)
 8009902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800990c:	4454      	add	r4, sl
 800990e:	2900      	cmp	r1, #0
 8009910:	d054      	beq.n	80099bc <_dtoa_r+0x59c>
 8009912:	4929      	ldr	r1, [pc, #164]	@ (80099b8 <_dtoa_r+0x598>)
 8009914:	2000      	movs	r0, #0
 8009916:	f7f6 ffa1 	bl	800085c <__aeabi_ddiv>
 800991a:	4633      	mov	r3, r6
 800991c:	462a      	mov	r2, r5
 800991e:	f7f6 fcbb 	bl	8000298 <__aeabi_dsub>
 8009922:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009926:	4656      	mov	r6, sl
 8009928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800992c:	f7f7 f91c 	bl	8000b68 <__aeabi_d2iz>
 8009930:	4605      	mov	r5, r0
 8009932:	f7f6 fdff 	bl	8000534 <__aeabi_i2d>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993e:	f7f6 fcab 	bl	8000298 <__aeabi_dsub>
 8009942:	3530      	adds	r5, #48	@ 0x30
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800994c:	f806 5b01 	strb.w	r5, [r6], #1
 8009950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009954:	f7f7 f8ca 	bl	8000aec <__aeabi_dcmplt>
 8009958:	2800      	cmp	r0, #0
 800995a:	d172      	bne.n	8009a42 <_dtoa_r+0x622>
 800995c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009960:	4911      	ldr	r1, [pc, #68]	@ (80099a8 <_dtoa_r+0x588>)
 8009962:	2000      	movs	r0, #0
 8009964:	f7f6 fc98 	bl	8000298 <__aeabi_dsub>
 8009968:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800996c:	f7f7 f8be 	bl	8000aec <__aeabi_dcmplt>
 8009970:	2800      	cmp	r0, #0
 8009972:	f040 80b4 	bne.w	8009ade <_dtoa_r+0x6be>
 8009976:	42a6      	cmp	r6, r4
 8009978:	f43f af70 	beq.w	800985c <_dtoa_r+0x43c>
 800997c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009980:	4b0a      	ldr	r3, [pc, #40]	@ (80099ac <_dtoa_r+0x58c>)
 8009982:	2200      	movs	r2, #0
 8009984:	f7f6 fe40 	bl	8000608 <__aeabi_dmul>
 8009988:	4b08      	ldr	r3, [pc, #32]	@ (80099ac <_dtoa_r+0x58c>)
 800998a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800998e:	2200      	movs	r2, #0
 8009990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009994:	f7f6 fe38 	bl	8000608 <__aeabi_dmul>
 8009998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800999c:	e7c4      	b.n	8009928 <_dtoa_r+0x508>
 800999e:	bf00      	nop
 80099a0:	0800caf8 	.word	0x0800caf8
 80099a4:	0800cad0 	.word	0x0800cad0
 80099a8:	3ff00000 	.word	0x3ff00000
 80099ac:	40240000 	.word	0x40240000
 80099b0:	401c0000 	.word	0x401c0000
 80099b4:	40140000 	.word	0x40140000
 80099b8:	3fe00000 	.word	0x3fe00000
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099ca:	4656      	mov	r6, sl
 80099cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d0:	f7f7 f8ca 	bl	8000b68 <__aeabi_d2iz>
 80099d4:	4605      	mov	r5, r0
 80099d6:	f7f6 fdad 	bl	8000534 <__aeabi_i2d>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e2:	f7f6 fc59 	bl	8000298 <__aeabi_dsub>
 80099e6:	3530      	adds	r5, #48	@ 0x30
 80099e8:	f806 5b01 	strb.w	r5, [r6], #1
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	42a6      	cmp	r6, r4
 80099f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099f6:	f04f 0200 	mov.w	r2, #0
 80099fa:	d124      	bne.n	8009a46 <_dtoa_r+0x626>
 80099fc:	4baf      	ldr	r3, [pc, #700]	@ (8009cbc <_dtoa_r+0x89c>)
 80099fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a02:	f7f6 fc4b 	bl	800029c <__adddf3>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a0e:	f7f7 f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d163      	bne.n	8009ade <_dtoa_r+0x6be>
 8009a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a1a:	49a8      	ldr	r1, [pc, #672]	@ (8009cbc <_dtoa_r+0x89c>)
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7f6 fc3b 	bl	8000298 <__aeabi_dsub>
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a2a:	f7f7 f85f 	bl	8000aec <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f af14 	beq.w	800985c <_dtoa_r+0x43c>
 8009a34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a36:	1e73      	subs	r3, r6, #1
 8009a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a3e:	2b30      	cmp	r3, #48	@ 0x30
 8009a40:	d0f8      	beq.n	8009a34 <_dtoa_r+0x614>
 8009a42:	4647      	mov	r7, r8
 8009a44:	e03b      	b.n	8009abe <_dtoa_r+0x69e>
 8009a46:	4b9e      	ldr	r3, [pc, #632]	@ (8009cc0 <_dtoa_r+0x8a0>)
 8009a48:	f7f6 fdde 	bl	8000608 <__aeabi_dmul>
 8009a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a50:	e7bc      	b.n	80099cc <_dtoa_r+0x5ac>
 8009a52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a56:	4656      	mov	r6, sl
 8009a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fefc 	bl	800085c <__aeabi_ddiv>
 8009a64:	f7f7 f880 	bl	8000b68 <__aeabi_d2iz>
 8009a68:	4680      	mov	r8, r0
 8009a6a:	f7f6 fd63 	bl	8000534 <__aeabi_i2d>
 8009a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a82:	f7f6 fc09 	bl	8000298 <__aeabi_dsub>
 8009a86:	f806 4b01 	strb.w	r4, [r6], #1
 8009a8a:	9d03      	ldr	r5, [sp, #12]
 8009a8c:	eba6 040a 	sub.w	r4, r6, sl
 8009a90:	42a5      	cmp	r5, r4
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	d133      	bne.n	8009b00 <_dtoa_r+0x6e0>
 8009a98:	f7f6 fc00 	bl	800029c <__adddf3>
 8009a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	f7f7 f840 	bl	8000b28 <__aeabi_dcmpgt>
 8009aa8:	b9c0      	cbnz	r0, 8009adc <_dtoa_r+0x6bc>
 8009aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f7 f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ab6:	b110      	cbz	r0, 8009abe <_dtoa_r+0x69e>
 8009ab8:	f018 0f01 	tst.w	r8, #1
 8009abc:	d10e      	bne.n	8009adc <_dtoa_r+0x6bc>
 8009abe:	9902      	ldr	r1, [sp, #8]
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f000 fbbd 	bl	800a240 <_Bfree>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	7033      	strb	r3, [r6, #0]
 8009aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009acc:	3701      	adds	r7, #1
 8009ace:	601f      	str	r7, [r3, #0]
 8009ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 824b 	beq.w	8009f6e <_dtoa_r+0xb4e>
 8009ad8:	601e      	str	r6, [r3, #0]
 8009ada:	e248      	b.n	8009f6e <_dtoa_r+0xb4e>
 8009adc:	46b8      	mov	r8, r7
 8009ade:	4633      	mov	r3, r6
 8009ae0:	461e      	mov	r6, r3
 8009ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae6:	2a39      	cmp	r2, #57	@ 0x39
 8009ae8:	d106      	bne.n	8009af8 <_dtoa_r+0x6d8>
 8009aea:	459a      	cmp	sl, r3
 8009aec:	d1f8      	bne.n	8009ae0 <_dtoa_r+0x6c0>
 8009aee:	2230      	movs	r2, #48	@ 0x30
 8009af0:	f108 0801 	add.w	r8, r8, #1
 8009af4:	f88a 2000 	strb.w	r2, [sl]
 8009af8:	781a      	ldrb	r2, [r3, #0]
 8009afa:	3201      	adds	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	e7a0      	b.n	8009a42 <_dtoa_r+0x622>
 8009b00:	4b6f      	ldr	r3, [pc, #444]	@ (8009cc0 <_dtoa_r+0x8a0>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	f7f6 fd80 	bl	8000608 <__aeabi_dmul>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	f7f6 ffe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d09f      	beq.n	8009a58 <_dtoa_r+0x638>
 8009b18:	e7d1      	b.n	8009abe <_dtoa_r+0x69e>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	f000 80ea 	beq.w	8009cf6 <_dtoa_r+0x8d6>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	2a01      	cmp	r2, #1
 8009b26:	f300 80cd 	bgt.w	8009cc4 <_dtoa_r+0x8a4>
 8009b2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	f000 80c1 	beq.w	8009cb4 <_dtoa_r+0x894>
 8009b32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b36:	9c08      	ldr	r4, [sp, #32]
 8009b38:	9e00      	ldr	r6, [sp, #0]
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	9200      	str	r2, [sp, #0]
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	2101      	movs	r1, #1
 8009b44:	441a      	add	r2, r3
 8009b46:	4648      	mov	r0, r9
 8009b48:	9206      	str	r2, [sp, #24]
 8009b4a:	f000 fc2d 	bl	800a3a8 <__i2b>
 8009b4e:	4605      	mov	r5, r0
 8009b50:	b166      	cbz	r6, 8009b6c <_dtoa_r+0x74c>
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd09      	ble.n	8009b6c <_dtoa_r+0x74c>
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	9a00      	ldr	r2, [sp, #0]
 8009b5c:	bfa8      	it	ge
 8009b5e:	4633      	movge	r3, r6
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	9200      	str	r2, [sp, #0]
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	1af6      	subs	r6, r6, r3
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	9b08      	ldr	r3, [sp, #32]
 8009b6e:	b30b      	cbz	r3, 8009bb4 <_dtoa_r+0x794>
 8009b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 80c6 	beq.w	8009d04 <_dtoa_r+0x8e4>
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	f000 80c0 	beq.w	8009cfe <_dtoa_r+0x8de>
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4622      	mov	r2, r4
 8009b82:	4648      	mov	r0, r9
 8009b84:	f000 fcc8 	bl	800a518 <__pow5mult>
 8009b88:	9a02      	ldr	r2, [sp, #8]
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	4648      	mov	r0, r9
 8009b90:	f000 fc20 	bl	800a3d4 <__multiply>
 8009b94:	9902      	ldr	r1, [sp, #8]
 8009b96:	4680      	mov	r8, r0
 8009b98:	4648      	mov	r0, r9
 8009b9a:	f000 fb51 	bl	800a240 <_Bfree>
 8009b9e:	9b08      	ldr	r3, [sp, #32]
 8009ba0:	1b1b      	subs	r3, r3, r4
 8009ba2:	9308      	str	r3, [sp, #32]
 8009ba4:	f000 80b1 	beq.w	8009d0a <_dtoa_r+0x8ea>
 8009ba8:	9a08      	ldr	r2, [sp, #32]
 8009baa:	4641      	mov	r1, r8
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fcb3 	bl	800a518 <__pow5mult>
 8009bb2:	9002      	str	r0, [sp, #8]
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	4648      	mov	r0, r9
 8009bb8:	f000 fbf6 	bl	800a3a8 <__i2b>
 8009bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 81d8 	beq.w	8009f76 <_dtoa_r+0xb56>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4601      	mov	r1, r0
 8009bca:	4648      	mov	r0, r9
 8009bcc:	f000 fca4 	bl	800a518 <__pow5mult>
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	f300 809f 	bgt.w	8009d18 <_dtoa_r+0x8f8>
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f040 8097 	bne.w	8009d10 <_dtoa_r+0x8f0>
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8093 	bne.w	8009d14 <_dtoa_r+0x8f4>
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	0d1b      	lsrs	r3, r3, #20
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	b133      	cbz	r3, 8009c08 <_dtoa_r+0x7e8>
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	9b06      	ldr	r3, [sp, #24]
 8009c02:	3301      	adds	r3, #1
 8009c04:	9306      	str	r3, [sp, #24]
 8009c06:	2301      	movs	r3, #1
 8009c08:	9308      	str	r3, [sp, #32]
 8009c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 81b8 	beq.w	8009f82 <_dtoa_r+0xb62>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c18:	6918      	ldr	r0, [r3, #16]
 8009c1a:	f000 fb79 	bl	800a310 <__hi0bits>
 8009c1e:	f1c0 0020 	rsb	r0, r0, #32
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	4418      	add	r0, r3
 8009c26:	f010 001f 	ands.w	r0, r0, #31
 8009c2a:	f000 8082 	beq.w	8009d32 <_dtoa_r+0x912>
 8009c2e:	f1c0 0320 	rsb	r3, r0, #32
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	dd73      	ble.n	8009d1e <_dtoa_r+0x8fe>
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	f1c0 001c 	rsb	r0, r0, #28
 8009c3c:	4403      	add	r3, r0
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9b06      	ldr	r3, [sp, #24]
 8009c42:	4403      	add	r3, r0
 8009c44:	4406      	add	r6, r0
 8009c46:	9306      	str	r3, [sp, #24]
 8009c48:	9b00      	ldr	r3, [sp, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd05      	ble.n	8009c5a <_dtoa_r+0x83a>
 8009c4e:	9902      	ldr	r1, [sp, #8]
 8009c50:	461a      	mov	r2, r3
 8009c52:	4648      	mov	r0, r9
 8009c54:	f000 fcba 	bl	800a5cc <__lshift>
 8009c58:	9002      	str	r0, [sp, #8]
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd05      	ble.n	8009c6c <_dtoa_r+0x84c>
 8009c60:	4621      	mov	r1, r4
 8009c62:	461a      	mov	r2, r3
 8009c64:	4648      	mov	r0, r9
 8009c66:	f000 fcb1 	bl	800a5cc <__lshift>
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d061      	beq.n	8009d36 <_dtoa_r+0x916>
 8009c72:	9802      	ldr	r0, [sp, #8]
 8009c74:	4621      	mov	r1, r4
 8009c76:	f000 fd15 	bl	800a6a4 <__mcmp>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	da5b      	bge.n	8009d36 <_dtoa_r+0x916>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9902      	ldr	r1, [sp, #8]
 8009c82:	220a      	movs	r2, #10
 8009c84:	4648      	mov	r0, r9
 8009c86:	f000 fafd 	bl	800a284 <__multadd>
 8009c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8c:	9002      	str	r0, [sp, #8]
 8009c8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 8177 	beq.w	8009f86 <_dtoa_r+0xb66>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	220a      	movs	r2, #10
 8009c9e:	4648      	mov	r0, r9
 8009ca0:	f000 faf0 	bl	800a284 <__multadd>
 8009ca4:	f1bb 0f00 	cmp.w	fp, #0
 8009ca8:	4605      	mov	r5, r0
 8009caa:	dc6f      	bgt.n	8009d8c <_dtoa_r+0x96c>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	dc49      	bgt.n	8009d46 <_dtoa_r+0x926>
 8009cb2:	e06b      	b.n	8009d8c <_dtoa_r+0x96c>
 8009cb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cba:	e73c      	b.n	8009b36 <_dtoa_r+0x716>
 8009cbc:	3fe00000 	.word	0x3fe00000
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	1e5c      	subs	r4, r3, #1
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	42a3      	cmp	r3, r4
 8009ccc:	db09      	blt.n	8009ce2 <_dtoa_r+0x8c2>
 8009cce:	1b1c      	subs	r4, r3, r4
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f6bf af30 	bge.w	8009b38 <_dtoa_r+0x718>
 8009cd8:	9b00      	ldr	r3, [sp, #0]
 8009cda:	9a03      	ldr	r2, [sp, #12]
 8009cdc:	1a9e      	subs	r6, r3, r2
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e72b      	b.n	8009b3a <_dtoa_r+0x71a>
 8009ce2:	9b08      	ldr	r3, [sp, #32]
 8009ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ce6:	9408      	str	r4, [sp, #32]
 8009ce8:	1ae3      	subs	r3, r4, r3
 8009cea:	441a      	add	r2, r3
 8009cec:	9e00      	ldr	r6, [sp, #0]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009cf2:	2400      	movs	r4, #0
 8009cf4:	e721      	b.n	8009b3a <_dtoa_r+0x71a>
 8009cf6:	9c08      	ldr	r4, [sp, #32]
 8009cf8:	9e00      	ldr	r6, [sp, #0]
 8009cfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009cfc:	e728      	b.n	8009b50 <_dtoa_r+0x730>
 8009cfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d02:	e751      	b.n	8009ba8 <_dtoa_r+0x788>
 8009d04:	9a08      	ldr	r2, [sp, #32]
 8009d06:	9902      	ldr	r1, [sp, #8]
 8009d08:	e750      	b.n	8009bac <_dtoa_r+0x78c>
 8009d0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d0e:	e751      	b.n	8009bb4 <_dtoa_r+0x794>
 8009d10:	2300      	movs	r3, #0
 8009d12:	e779      	b.n	8009c08 <_dtoa_r+0x7e8>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	e777      	b.n	8009c08 <_dtoa_r+0x7e8>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9308      	str	r3, [sp, #32]
 8009d1c:	e779      	b.n	8009c12 <_dtoa_r+0x7f2>
 8009d1e:	d093      	beq.n	8009c48 <_dtoa_r+0x828>
 8009d20:	9a00      	ldr	r2, [sp, #0]
 8009d22:	331c      	adds	r3, #28
 8009d24:	441a      	add	r2, r3
 8009d26:	9200      	str	r2, [sp, #0]
 8009d28:	9a06      	ldr	r2, [sp, #24]
 8009d2a:	441a      	add	r2, r3
 8009d2c:	441e      	add	r6, r3
 8009d2e:	9206      	str	r2, [sp, #24]
 8009d30:	e78a      	b.n	8009c48 <_dtoa_r+0x828>
 8009d32:	4603      	mov	r3, r0
 8009d34:	e7f4      	b.n	8009d20 <_dtoa_r+0x900>
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	46b8      	mov	r8, r7
 8009d3c:	dc20      	bgt.n	8009d80 <_dtoa_r+0x960>
 8009d3e:	469b      	mov	fp, r3
 8009d40:	9b07      	ldr	r3, [sp, #28]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	dd1e      	ble.n	8009d84 <_dtoa_r+0x964>
 8009d46:	f1bb 0f00 	cmp.w	fp, #0
 8009d4a:	f47f adb1 	bne.w	80098b0 <_dtoa_r+0x490>
 8009d4e:	4621      	mov	r1, r4
 8009d50:	465b      	mov	r3, fp
 8009d52:	2205      	movs	r2, #5
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 fa95 	bl	800a284 <__multadd>
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	9802      	ldr	r0, [sp, #8]
 8009d60:	f000 fca0 	bl	800a6a4 <__mcmp>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	f77f ada3 	ble.w	80098b0 <_dtoa_r+0x490>
 8009d6a:	4656      	mov	r6, sl
 8009d6c:	2331      	movs	r3, #49	@ 0x31
 8009d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8009d72:	f108 0801 	add.w	r8, r8, #1
 8009d76:	e59f      	b.n	80098b8 <_dtoa_r+0x498>
 8009d78:	9c03      	ldr	r4, [sp, #12]
 8009d7a:	46b8      	mov	r8, r7
 8009d7c:	4625      	mov	r5, r4
 8009d7e:	e7f4      	b.n	8009d6a <_dtoa_r+0x94a>
 8009d80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 8101 	beq.w	8009f8e <_dtoa_r+0xb6e>
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd05      	ble.n	8009d9c <_dtoa_r+0x97c>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4632      	mov	r2, r6
 8009d94:	4648      	mov	r0, r9
 8009d96:	f000 fc19 	bl	800a5cc <__lshift>
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	9b08      	ldr	r3, [sp, #32]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d05c      	beq.n	8009e5c <_dtoa_r+0xa3c>
 8009da2:	6869      	ldr	r1, [r5, #4]
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fa0b 	bl	800a1c0 <_Balloc>
 8009daa:	4606      	mov	r6, r0
 8009dac:	b928      	cbnz	r0, 8009dba <_dtoa_r+0x99a>
 8009dae:	4b82      	ldr	r3, [pc, #520]	@ (8009fb8 <_dtoa_r+0xb98>)
 8009db0:	4602      	mov	r2, r0
 8009db2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009db6:	f7ff bb4a 	b.w	800944e <_dtoa_r+0x2e>
 8009dba:	692a      	ldr	r2, [r5, #16]
 8009dbc:	3202      	adds	r2, #2
 8009dbe:	0092      	lsls	r2, r2, #2
 8009dc0:	f105 010c 	add.w	r1, r5, #12
 8009dc4:	300c      	adds	r0, #12
 8009dc6:	f000 ffa3 	bl	800ad10 <memcpy>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4648      	mov	r0, r9
 8009dd0:	f000 fbfc 	bl	800a5cc <__lshift>
 8009dd4:	f10a 0301 	add.w	r3, sl, #1
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	eb0a 030b 	add.w	r3, sl, fp
 8009dde:	9308      	str	r3, [sp, #32]
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	462f      	mov	r7, r5
 8009de8:	9306      	str	r3, [sp, #24]
 8009dea:	4605      	mov	r5, r0
 8009dec:	9b00      	ldr	r3, [sp, #0]
 8009dee:	9802      	ldr	r0, [sp, #8]
 8009df0:	4621      	mov	r1, r4
 8009df2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009df6:	f7ff fa8a 	bl	800930e <quorem>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	3330      	adds	r3, #48	@ 0x30
 8009dfe:	9003      	str	r0, [sp, #12]
 8009e00:	4639      	mov	r1, r7
 8009e02:	9802      	ldr	r0, [sp, #8]
 8009e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e06:	f000 fc4d 	bl	800a6a4 <__mcmp>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	9004      	str	r0, [sp, #16]
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4648      	mov	r0, r9
 8009e12:	f000 fc63 	bl	800a6dc <__mdiff>
 8009e16:	68c2      	ldr	r2, [r0, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	bb02      	cbnz	r2, 8009e60 <_dtoa_r+0xa40>
 8009e1e:	4601      	mov	r1, r0
 8009e20:	9802      	ldr	r0, [sp, #8]
 8009e22:	f000 fc3f 	bl	800a6a4 <__mcmp>
 8009e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e32:	f000 fa05 	bl	800a240 <_Bfree>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e3a:	9e00      	ldr	r6, [sp, #0]
 8009e3c:	ea42 0103 	orr.w	r1, r2, r3
 8009e40:	9b06      	ldr	r3, [sp, #24]
 8009e42:	4319      	orrs	r1, r3
 8009e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e46:	d10d      	bne.n	8009e64 <_dtoa_r+0xa44>
 8009e48:	2b39      	cmp	r3, #57	@ 0x39
 8009e4a:	d027      	beq.n	8009e9c <_dtoa_r+0xa7c>
 8009e4c:	9a04      	ldr	r2, [sp, #16]
 8009e4e:	2a00      	cmp	r2, #0
 8009e50:	dd01      	ble.n	8009e56 <_dtoa_r+0xa36>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	3331      	adds	r3, #49	@ 0x31
 8009e56:	f88b 3000 	strb.w	r3, [fp]
 8009e5a:	e52e      	b.n	80098ba <_dtoa_r+0x49a>
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	e7b9      	b.n	8009dd4 <_dtoa_r+0x9b4>
 8009e60:	2201      	movs	r2, #1
 8009e62:	e7e2      	b.n	8009e2a <_dtoa_r+0xa0a>
 8009e64:	9904      	ldr	r1, [sp, #16]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	db04      	blt.n	8009e74 <_dtoa_r+0xa54>
 8009e6a:	9807      	ldr	r0, [sp, #28]
 8009e6c:	4301      	orrs	r1, r0
 8009e6e:	9806      	ldr	r0, [sp, #24]
 8009e70:	4301      	orrs	r1, r0
 8009e72:	d120      	bne.n	8009eb6 <_dtoa_r+0xa96>
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	ddee      	ble.n	8009e56 <_dtoa_r+0xa36>
 8009e78:	9902      	ldr	r1, [sp, #8]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4648      	mov	r0, r9
 8009e80:	f000 fba4 	bl	800a5cc <__lshift>
 8009e84:	4621      	mov	r1, r4
 8009e86:	9002      	str	r0, [sp, #8]
 8009e88:	f000 fc0c 	bl	800a6a4 <__mcmp>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	dc02      	bgt.n	8009e98 <_dtoa_r+0xa78>
 8009e92:	d1e0      	bne.n	8009e56 <_dtoa_r+0xa36>
 8009e94:	07da      	lsls	r2, r3, #31
 8009e96:	d5de      	bpl.n	8009e56 <_dtoa_r+0xa36>
 8009e98:	2b39      	cmp	r3, #57	@ 0x39
 8009e9a:	d1da      	bne.n	8009e52 <_dtoa_r+0xa32>
 8009e9c:	2339      	movs	r3, #57	@ 0x39
 8009e9e:	f88b 3000 	strb.w	r3, [fp]
 8009ea2:	4633      	mov	r3, r6
 8009ea4:	461e      	mov	r6, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eac:	2a39      	cmp	r2, #57	@ 0x39
 8009eae:	d04e      	beq.n	8009f4e <_dtoa_r+0xb2e>
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	e501      	b.n	80098ba <_dtoa_r+0x49a>
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	dd03      	ble.n	8009ec2 <_dtoa_r+0xaa2>
 8009eba:	2b39      	cmp	r3, #57	@ 0x39
 8009ebc:	d0ee      	beq.n	8009e9c <_dtoa_r+0xa7c>
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	e7c9      	b.n	8009e56 <_dtoa_r+0xa36>
 8009ec2:	9a00      	ldr	r2, [sp, #0]
 8009ec4:	9908      	ldr	r1, [sp, #32]
 8009ec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eca:	428a      	cmp	r2, r1
 8009ecc:	d028      	beq.n	8009f20 <_dtoa_r+0xb00>
 8009ece:	9902      	ldr	r1, [sp, #8]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	4648      	mov	r0, r9
 8009ed6:	f000 f9d5 	bl	800a284 <__multadd>
 8009eda:	42af      	cmp	r7, r5
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	f04f 0300 	mov.w	r3, #0
 8009ee2:	f04f 020a 	mov.w	r2, #10
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	4648      	mov	r0, r9
 8009eea:	d107      	bne.n	8009efc <_dtoa_r+0xadc>
 8009eec:	f000 f9ca 	bl	800a284 <__multadd>
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	4605      	mov	r5, r0
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	e777      	b.n	8009dec <_dtoa_r+0x9cc>
 8009efc:	f000 f9c2 	bl	800a284 <__multadd>
 8009f00:	4629      	mov	r1, r5
 8009f02:	4607      	mov	r7, r0
 8009f04:	2300      	movs	r3, #0
 8009f06:	220a      	movs	r2, #10
 8009f08:	4648      	mov	r0, r9
 8009f0a:	f000 f9bb 	bl	800a284 <__multadd>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	e7f0      	b.n	8009ef4 <_dtoa_r+0xad4>
 8009f12:	f1bb 0f00 	cmp.w	fp, #0
 8009f16:	bfcc      	ite	gt
 8009f18:	465e      	movgt	r6, fp
 8009f1a:	2601      	movle	r6, #1
 8009f1c:	4456      	add	r6, sl
 8009f1e:	2700      	movs	r7, #0
 8009f20:	9902      	ldr	r1, [sp, #8]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	2201      	movs	r2, #1
 8009f26:	4648      	mov	r0, r9
 8009f28:	f000 fb50 	bl	800a5cc <__lshift>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	9002      	str	r0, [sp, #8]
 8009f30:	f000 fbb8 	bl	800a6a4 <__mcmp>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dcb4      	bgt.n	8009ea2 <_dtoa_r+0xa82>
 8009f38:	d102      	bne.n	8009f40 <_dtoa_r+0xb20>
 8009f3a:	9b00      	ldr	r3, [sp, #0]
 8009f3c:	07db      	lsls	r3, r3, #31
 8009f3e:	d4b0      	bmi.n	8009ea2 <_dtoa_r+0xa82>
 8009f40:	4633      	mov	r3, r6
 8009f42:	461e      	mov	r6, r3
 8009f44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f48:	2a30      	cmp	r2, #48	@ 0x30
 8009f4a:	d0fa      	beq.n	8009f42 <_dtoa_r+0xb22>
 8009f4c:	e4b5      	b.n	80098ba <_dtoa_r+0x49a>
 8009f4e:	459a      	cmp	sl, r3
 8009f50:	d1a8      	bne.n	8009ea4 <_dtoa_r+0xa84>
 8009f52:	2331      	movs	r3, #49	@ 0x31
 8009f54:	f108 0801 	add.w	r8, r8, #1
 8009f58:	f88a 3000 	strb.w	r3, [sl]
 8009f5c:	e4ad      	b.n	80098ba <_dtoa_r+0x49a>
 8009f5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fbc <_dtoa_r+0xb9c>
 8009f64:	b11b      	cbz	r3, 8009f6e <_dtoa_r+0xb4e>
 8009f66:	f10a 0308 	add.w	r3, sl, #8
 8009f6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4650      	mov	r0, sl
 8009f70:	b017      	add	sp, #92	@ 0x5c
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	f77f ae2e 	ble.w	8009bda <_dtoa_r+0x7ba>
 8009f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f80:	9308      	str	r3, [sp, #32]
 8009f82:	2001      	movs	r0, #1
 8009f84:	e64d      	b.n	8009c22 <_dtoa_r+0x802>
 8009f86:	f1bb 0f00 	cmp.w	fp, #0
 8009f8a:	f77f aed9 	ble.w	8009d40 <_dtoa_r+0x920>
 8009f8e:	4656      	mov	r6, sl
 8009f90:	9802      	ldr	r0, [sp, #8]
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7ff f9bb 	bl	800930e <quorem>
 8009f98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009fa0:	eba6 020a 	sub.w	r2, r6, sl
 8009fa4:	4593      	cmp	fp, r2
 8009fa6:	ddb4      	ble.n	8009f12 <_dtoa_r+0xaf2>
 8009fa8:	9902      	ldr	r1, [sp, #8]
 8009faa:	2300      	movs	r3, #0
 8009fac:	220a      	movs	r2, #10
 8009fae:	4648      	mov	r0, r9
 8009fb0:	f000 f968 	bl	800a284 <__multadd>
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	e7eb      	b.n	8009f90 <_dtoa_r+0xb70>
 8009fb8:	0800c9fc 	.word	0x0800c9fc
 8009fbc:	0800c980 	.word	0x0800c980

08009fc0 <_free_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	2900      	cmp	r1, #0
 8009fc6:	d041      	beq.n	800a04c <_free_r+0x8c>
 8009fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fcc:	1f0c      	subs	r4, r1, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfb8      	it	lt
 8009fd2:	18e4      	addlt	r4, r4, r3
 8009fd4:	f000 f8e8 	bl	800a1a8 <__malloc_lock>
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <_free_r+0x90>)
 8009fda:	6813      	ldr	r3, [r2, #0]
 8009fdc:	b933      	cbnz	r3, 8009fec <_free_r+0x2c>
 8009fde:	6063      	str	r3, [r4, #4]
 8009fe0:	6014      	str	r4, [r2, #0]
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe8:	f000 b8e4 	b.w	800a1b4 <__malloc_unlock>
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	d908      	bls.n	800a002 <_free_r+0x42>
 8009ff0:	6820      	ldr	r0, [r4, #0]
 8009ff2:	1821      	adds	r1, r4, r0
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	bf01      	itttt	eq
 8009ff8:	6819      	ldreq	r1, [r3, #0]
 8009ffa:	685b      	ldreq	r3, [r3, #4]
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	e7ed      	b.n	8009fde <_free_r+0x1e>
 800a002:	461a      	mov	r2, r3
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	b10b      	cbz	r3, 800a00c <_free_r+0x4c>
 800a008:	42a3      	cmp	r3, r4
 800a00a:	d9fa      	bls.n	800a002 <_free_r+0x42>
 800a00c:	6811      	ldr	r1, [r2, #0]
 800a00e:	1850      	adds	r0, r2, r1
 800a010:	42a0      	cmp	r0, r4
 800a012:	d10b      	bne.n	800a02c <_free_r+0x6c>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	4401      	add	r1, r0
 800a018:	1850      	adds	r0, r2, r1
 800a01a:	4283      	cmp	r3, r0
 800a01c:	6011      	str	r1, [r2, #0]
 800a01e:	d1e0      	bne.n	8009fe2 <_free_r+0x22>
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	6053      	str	r3, [r2, #4]
 800a026:	4408      	add	r0, r1
 800a028:	6010      	str	r0, [r2, #0]
 800a02a:	e7da      	b.n	8009fe2 <_free_r+0x22>
 800a02c:	d902      	bls.n	800a034 <_free_r+0x74>
 800a02e:	230c      	movs	r3, #12
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	e7d6      	b.n	8009fe2 <_free_r+0x22>
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	1821      	adds	r1, r4, r0
 800a038:	428b      	cmp	r3, r1
 800a03a:	bf04      	itt	eq
 800a03c:	6819      	ldreq	r1, [r3, #0]
 800a03e:	685b      	ldreq	r3, [r3, #4]
 800a040:	6063      	str	r3, [r4, #4]
 800a042:	bf04      	itt	eq
 800a044:	1809      	addeq	r1, r1, r0
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	6054      	str	r4, [r2, #4]
 800a04a:	e7ca      	b.n	8009fe2 <_free_r+0x22>
 800a04c:	bd38      	pop	{r3, r4, r5, pc}
 800a04e:	bf00      	nop
 800a050:	2000155c 	.word	0x2000155c

0800a054 <malloc>:
 800a054:	4b02      	ldr	r3, [pc, #8]	@ (800a060 <malloc+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 b825 	b.w	800a0a8 <_malloc_r>
 800a05e:	bf00      	nop
 800a060:	20000018 	.word	0x20000018

0800a064 <sbrk_aligned>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4e0f      	ldr	r6, [pc, #60]	@ (800a0a4 <sbrk_aligned+0x40>)
 800a068:	460c      	mov	r4, r1
 800a06a:	6831      	ldr	r1, [r6, #0]
 800a06c:	4605      	mov	r5, r0
 800a06e:	b911      	cbnz	r1, 800a076 <sbrk_aligned+0x12>
 800a070:	f000 fe3e 	bl	800acf0 <_sbrk_r>
 800a074:	6030      	str	r0, [r6, #0]
 800a076:	4621      	mov	r1, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	f000 fe39 	bl	800acf0 <_sbrk_r>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	d103      	bne.n	800a08a <sbrk_aligned+0x26>
 800a082:	f04f 34ff 	mov.w	r4, #4294967295
 800a086:	4620      	mov	r0, r4
 800a088:	bd70      	pop	{r4, r5, r6, pc}
 800a08a:	1cc4      	adds	r4, r0, #3
 800a08c:	f024 0403 	bic.w	r4, r4, #3
 800a090:	42a0      	cmp	r0, r4
 800a092:	d0f8      	beq.n	800a086 <sbrk_aligned+0x22>
 800a094:	1a21      	subs	r1, r4, r0
 800a096:	4628      	mov	r0, r5
 800a098:	f000 fe2a 	bl	800acf0 <_sbrk_r>
 800a09c:	3001      	adds	r0, #1
 800a09e:	d1f2      	bne.n	800a086 <sbrk_aligned+0x22>
 800a0a0:	e7ef      	b.n	800a082 <sbrk_aligned+0x1e>
 800a0a2:	bf00      	nop
 800a0a4:	20001558 	.word	0x20001558

0800a0a8 <_malloc_r>:
 800a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	1ccd      	adds	r5, r1, #3
 800a0ae:	f025 0503 	bic.w	r5, r5, #3
 800a0b2:	3508      	adds	r5, #8
 800a0b4:	2d0c      	cmp	r5, #12
 800a0b6:	bf38      	it	cc
 800a0b8:	250c      	movcc	r5, #12
 800a0ba:	2d00      	cmp	r5, #0
 800a0bc:	4606      	mov	r6, r0
 800a0be:	db01      	blt.n	800a0c4 <_malloc_r+0x1c>
 800a0c0:	42a9      	cmp	r1, r5
 800a0c2:	d904      	bls.n	800a0ce <_malloc_r+0x26>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	6033      	str	r3, [r6, #0]
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1a4 <_malloc_r+0xfc>
 800a0d2:	f000 f869 	bl	800a1a8 <__malloc_lock>
 800a0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a0da:	461c      	mov	r4, r3
 800a0dc:	bb44      	cbnz	r4, 800a130 <_malloc_r+0x88>
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f7ff ffbf 	bl	800a064 <sbrk_aligned>
 800a0e6:	1c43      	adds	r3, r0, #1
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	d158      	bne.n	800a19e <_malloc_r+0xf6>
 800a0ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a0f0:	4627      	mov	r7, r4
 800a0f2:	2f00      	cmp	r7, #0
 800a0f4:	d143      	bne.n	800a17e <_malloc_r+0xd6>
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	d04b      	beq.n	800a192 <_malloc_r+0xea>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4630      	mov	r0, r6
 800a100:	eb04 0903 	add.w	r9, r4, r3
 800a104:	f000 fdf4 	bl	800acf0 <_sbrk_r>
 800a108:	4581      	cmp	r9, r0
 800a10a:	d142      	bne.n	800a192 <_malloc_r+0xea>
 800a10c:	6821      	ldr	r1, [r4, #0]
 800a10e:	1a6d      	subs	r5, r5, r1
 800a110:	4629      	mov	r1, r5
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ffa6 	bl	800a064 <sbrk_aligned>
 800a118:	3001      	adds	r0, #1
 800a11a:	d03a      	beq.n	800a192 <_malloc_r+0xea>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	442b      	add	r3, r5
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	f8d8 3000 	ldr.w	r3, [r8]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	bb62      	cbnz	r2, 800a184 <_malloc_r+0xdc>
 800a12a:	f8c8 7000 	str.w	r7, [r8]
 800a12e:	e00f      	b.n	800a150 <_malloc_r+0xa8>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	1b52      	subs	r2, r2, r5
 800a134:	d420      	bmi.n	800a178 <_malloc_r+0xd0>
 800a136:	2a0b      	cmp	r2, #11
 800a138:	d917      	bls.n	800a16a <_malloc_r+0xc2>
 800a13a:	1961      	adds	r1, r4, r5
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	6025      	str	r5, [r4, #0]
 800a140:	bf18      	it	ne
 800a142:	6059      	strne	r1, [r3, #4]
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	bf08      	it	eq
 800a148:	f8c8 1000 	streq.w	r1, [r8]
 800a14c:	5162      	str	r2, [r4, r5]
 800a14e:	604b      	str	r3, [r1, #4]
 800a150:	4630      	mov	r0, r6
 800a152:	f000 f82f 	bl	800a1b4 <__malloc_unlock>
 800a156:	f104 000b 	add.w	r0, r4, #11
 800a15a:	1d23      	adds	r3, r4, #4
 800a15c:	f020 0007 	bic.w	r0, r0, #7
 800a160:	1ac2      	subs	r2, r0, r3
 800a162:	bf1c      	itt	ne
 800a164:	1a1b      	subne	r3, r3, r0
 800a166:	50a3      	strne	r3, [r4, r2]
 800a168:	e7af      	b.n	800a0ca <_malloc_r+0x22>
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	bf0c      	ite	eq
 800a170:	f8c8 2000 	streq.w	r2, [r8]
 800a174:	605a      	strne	r2, [r3, #4]
 800a176:	e7eb      	b.n	800a150 <_malloc_r+0xa8>
 800a178:	4623      	mov	r3, r4
 800a17a:	6864      	ldr	r4, [r4, #4]
 800a17c:	e7ae      	b.n	800a0dc <_malloc_r+0x34>
 800a17e:	463c      	mov	r4, r7
 800a180:	687f      	ldr	r7, [r7, #4]
 800a182:	e7b6      	b.n	800a0f2 <_malloc_r+0x4a>
 800a184:	461a      	mov	r2, r3
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d1fb      	bne.n	800a184 <_malloc_r+0xdc>
 800a18c:	2300      	movs	r3, #0
 800a18e:	6053      	str	r3, [r2, #4]
 800a190:	e7de      	b.n	800a150 <_malloc_r+0xa8>
 800a192:	230c      	movs	r3, #12
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	4630      	mov	r0, r6
 800a198:	f000 f80c 	bl	800a1b4 <__malloc_unlock>
 800a19c:	e794      	b.n	800a0c8 <_malloc_r+0x20>
 800a19e:	6005      	str	r5, [r0, #0]
 800a1a0:	e7d6      	b.n	800a150 <_malloc_r+0xa8>
 800a1a2:	bf00      	nop
 800a1a4:	2000155c 	.word	0x2000155c

0800a1a8 <__malloc_lock>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	@ (800a1b0 <__malloc_lock+0x8>)
 800a1aa:	f7ff b8ae 	b.w	800930a <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	20001554 	.word	0x20001554

0800a1b4 <__malloc_unlock>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	@ (800a1bc <__malloc_unlock+0x8>)
 800a1b6:	f7ff b8a9 	b.w	800930c <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	20001554 	.word	0x20001554

0800a1c0 <_Balloc>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	69c6      	ldr	r6, [r0, #28]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	b976      	cbnz	r6, 800a1e8 <_Balloc+0x28>
 800a1ca:	2010      	movs	r0, #16
 800a1cc:	f7ff ff42 	bl	800a054 <malloc>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	61e0      	str	r0, [r4, #28]
 800a1d4:	b920      	cbnz	r0, 800a1e0 <_Balloc+0x20>
 800a1d6:	4b18      	ldr	r3, [pc, #96]	@ (800a238 <_Balloc+0x78>)
 800a1d8:	4818      	ldr	r0, [pc, #96]	@ (800a23c <_Balloc+0x7c>)
 800a1da:	216b      	movs	r1, #107	@ 0x6b
 800a1dc:	f000 fda6 	bl	800ad2c <__assert_func>
 800a1e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1e4:	6006      	str	r6, [r0, #0]
 800a1e6:	60c6      	str	r6, [r0, #12]
 800a1e8:	69e6      	ldr	r6, [r4, #28]
 800a1ea:	68f3      	ldr	r3, [r6, #12]
 800a1ec:	b183      	cbz	r3, 800a210 <_Balloc+0x50>
 800a1ee:	69e3      	ldr	r3, [r4, #28]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1f6:	b9b8      	cbnz	r0, 800a228 <_Balloc+0x68>
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a1fe:	1d72      	adds	r2, r6, #5
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	4620      	mov	r0, r4
 800a204:	f000 fdb0 	bl	800ad68 <_calloc_r>
 800a208:	b160      	cbz	r0, 800a224 <_Balloc+0x64>
 800a20a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a20e:	e00e      	b.n	800a22e <_Balloc+0x6e>
 800a210:	2221      	movs	r2, #33	@ 0x21
 800a212:	2104      	movs	r1, #4
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fda7 	bl	800ad68 <_calloc_r>
 800a21a:	69e3      	ldr	r3, [r4, #28]
 800a21c:	60f0      	str	r0, [r6, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e4      	bne.n	800a1ee <_Balloc+0x2e>
 800a224:	2000      	movs	r0, #0
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	6802      	ldr	r2, [r0, #0]
 800a22a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a22e:	2300      	movs	r3, #0
 800a230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a234:	e7f7      	b.n	800a226 <_Balloc+0x66>
 800a236:	bf00      	nop
 800a238:	0800c98d 	.word	0x0800c98d
 800a23c:	0800ca0d 	.word	0x0800ca0d

0800a240 <_Bfree>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	69c6      	ldr	r6, [r0, #28]
 800a244:	4605      	mov	r5, r0
 800a246:	460c      	mov	r4, r1
 800a248:	b976      	cbnz	r6, 800a268 <_Bfree+0x28>
 800a24a:	2010      	movs	r0, #16
 800a24c:	f7ff ff02 	bl	800a054 <malloc>
 800a250:	4602      	mov	r2, r0
 800a252:	61e8      	str	r0, [r5, #28]
 800a254:	b920      	cbnz	r0, 800a260 <_Bfree+0x20>
 800a256:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <_Bfree+0x3c>)
 800a258:	4809      	ldr	r0, [pc, #36]	@ (800a280 <_Bfree+0x40>)
 800a25a:	218f      	movs	r1, #143	@ 0x8f
 800a25c:	f000 fd66 	bl	800ad2c <__assert_func>
 800a260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a264:	6006      	str	r6, [r0, #0]
 800a266:	60c6      	str	r6, [r0, #12]
 800a268:	b13c      	cbz	r4, 800a27a <_Bfree+0x3a>
 800a26a:	69eb      	ldr	r3, [r5, #28]
 800a26c:	6862      	ldr	r2, [r4, #4]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a274:	6021      	str	r1, [r4, #0]
 800a276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
 800a27c:	0800c98d 	.word	0x0800c98d
 800a280:	0800ca0d 	.word	0x0800ca0d

0800a284 <__multadd>:
 800a284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	690d      	ldr	r5, [r1, #16]
 800a28a:	4607      	mov	r7, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	461e      	mov	r6, r3
 800a290:	f101 0c14 	add.w	ip, r1, #20
 800a294:	2000      	movs	r0, #0
 800a296:	f8dc 3000 	ldr.w	r3, [ip]
 800a29a:	b299      	uxth	r1, r3
 800a29c:	fb02 6101 	mla	r1, r2, r1, r6
 800a2a0:	0c1e      	lsrs	r6, r3, #16
 800a2a2:	0c0b      	lsrs	r3, r1, #16
 800a2a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2a8:	b289      	uxth	r1, r1
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2b0:	4285      	cmp	r5, r0
 800a2b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ba:	dcec      	bgt.n	800a296 <__multadd+0x12>
 800a2bc:	b30e      	cbz	r6, 800a302 <__multadd+0x7e>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	dc19      	bgt.n	800a2f8 <__multadd+0x74>
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	3101      	adds	r1, #1
 800a2ca:	f7ff ff79 	bl	800a1c0 <_Balloc>
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	b928      	cbnz	r0, 800a2de <__multadd+0x5a>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <__multadd+0x84>)
 800a2d6:	480d      	ldr	r0, [pc, #52]	@ (800a30c <__multadd+0x88>)
 800a2d8:	21ba      	movs	r1, #186	@ 0xba
 800a2da:	f000 fd27 	bl	800ad2c <__assert_func>
 800a2de:	6922      	ldr	r2, [r4, #16]
 800a2e0:	3202      	adds	r2, #2
 800a2e2:	f104 010c 	add.w	r1, r4, #12
 800a2e6:	0092      	lsls	r2, r2, #2
 800a2e8:	300c      	adds	r0, #12
 800a2ea:	f000 fd11 	bl	800ad10 <memcpy>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	f7ff ffa5 	bl	800a240 <_Bfree>
 800a2f6:	4644      	mov	r4, r8
 800a2f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2fc:	3501      	adds	r5, #1
 800a2fe:	615e      	str	r6, [r3, #20]
 800a300:	6125      	str	r5, [r4, #16]
 800a302:	4620      	mov	r0, r4
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	0800c9fc 	.word	0x0800c9fc
 800a30c:	0800ca0d 	.word	0x0800ca0d

0800a310 <__hi0bits>:
 800a310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a314:	4603      	mov	r3, r0
 800a316:	bf36      	itet	cc
 800a318:	0403      	lslcc	r3, r0, #16
 800a31a:	2000      	movcs	r0, #0
 800a31c:	2010      	movcc	r0, #16
 800a31e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a322:	bf3c      	itt	cc
 800a324:	021b      	lslcc	r3, r3, #8
 800a326:	3008      	addcc	r0, #8
 800a328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32c:	bf3c      	itt	cc
 800a32e:	011b      	lslcc	r3, r3, #4
 800a330:	3004      	addcc	r0, #4
 800a332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a336:	bf3c      	itt	cc
 800a338:	009b      	lslcc	r3, r3, #2
 800a33a:	3002      	addcc	r0, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	db05      	blt.n	800a34c <__hi0bits+0x3c>
 800a340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a344:	f100 0001 	add.w	r0, r0, #1
 800a348:	bf08      	it	eq
 800a34a:	2020      	moveq	r0, #32
 800a34c:	4770      	bx	lr

0800a34e <__lo0bits>:
 800a34e:	6803      	ldr	r3, [r0, #0]
 800a350:	4602      	mov	r2, r0
 800a352:	f013 0007 	ands.w	r0, r3, #7
 800a356:	d00b      	beq.n	800a370 <__lo0bits+0x22>
 800a358:	07d9      	lsls	r1, r3, #31
 800a35a:	d421      	bmi.n	800a3a0 <__lo0bits+0x52>
 800a35c:	0798      	lsls	r0, r3, #30
 800a35e:	bf49      	itett	mi
 800a360:	085b      	lsrmi	r3, r3, #1
 800a362:	089b      	lsrpl	r3, r3, #2
 800a364:	2001      	movmi	r0, #1
 800a366:	6013      	strmi	r3, [r2, #0]
 800a368:	bf5c      	itt	pl
 800a36a:	6013      	strpl	r3, [r2, #0]
 800a36c:	2002      	movpl	r0, #2
 800a36e:	4770      	bx	lr
 800a370:	b299      	uxth	r1, r3
 800a372:	b909      	cbnz	r1, 800a378 <__lo0bits+0x2a>
 800a374:	0c1b      	lsrs	r3, r3, #16
 800a376:	2010      	movs	r0, #16
 800a378:	b2d9      	uxtb	r1, r3
 800a37a:	b909      	cbnz	r1, 800a380 <__lo0bits+0x32>
 800a37c:	3008      	adds	r0, #8
 800a37e:	0a1b      	lsrs	r3, r3, #8
 800a380:	0719      	lsls	r1, r3, #28
 800a382:	bf04      	itt	eq
 800a384:	091b      	lsreq	r3, r3, #4
 800a386:	3004      	addeq	r0, #4
 800a388:	0799      	lsls	r1, r3, #30
 800a38a:	bf04      	itt	eq
 800a38c:	089b      	lsreq	r3, r3, #2
 800a38e:	3002      	addeq	r0, #2
 800a390:	07d9      	lsls	r1, r3, #31
 800a392:	d403      	bmi.n	800a39c <__lo0bits+0x4e>
 800a394:	085b      	lsrs	r3, r3, #1
 800a396:	f100 0001 	add.w	r0, r0, #1
 800a39a:	d003      	beq.n	800a3a4 <__lo0bits+0x56>
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	4770      	bx	lr
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	4770      	bx	lr
 800a3a4:	2020      	movs	r0, #32
 800a3a6:	4770      	bx	lr

0800a3a8 <__i2b>:
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	f7ff ff07 	bl	800a1c0 <_Balloc>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	b928      	cbnz	r0, 800a3c2 <__i2b+0x1a>
 800a3b6:	4b05      	ldr	r3, [pc, #20]	@ (800a3cc <__i2b+0x24>)
 800a3b8:	4805      	ldr	r0, [pc, #20]	@ (800a3d0 <__i2b+0x28>)
 800a3ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a3be:	f000 fcb5 	bl	800ad2c <__assert_func>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	6144      	str	r4, [r0, #20]
 800a3c6:	6103      	str	r3, [r0, #16]
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	bf00      	nop
 800a3cc:	0800c9fc 	.word	0x0800c9fc
 800a3d0:	0800ca0d 	.word	0x0800ca0d

0800a3d4 <__multiply>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	4617      	mov	r7, r2
 800a3da:	690a      	ldr	r2, [r1, #16]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	bfa8      	it	ge
 800a3e2:	463b      	movge	r3, r7
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	bfa4      	itt	ge
 800a3e8:	460f      	movge	r7, r1
 800a3ea:	4699      	movge	r9, r3
 800a3ec:	693d      	ldr	r5, [r7, #16]
 800a3ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	eb05 060a 	add.w	r6, r5, sl
 800a3fa:	42b3      	cmp	r3, r6
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	bfb8      	it	lt
 800a400:	3101      	addlt	r1, #1
 800a402:	f7ff fedd 	bl	800a1c0 <_Balloc>
 800a406:	b930      	cbnz	r0, 800a416 <__multiply+0x42>
 800a408:	4602      	mov	r2, r0
 800a40a:	4b41      	ldr	r3, [pc, #260]	@ (800a510 <__multiply+0x13c>)
 800a40c:	4841      	ldr	r0, [pc, #260]	@ (800a514 <__multiply+0x140>)
 800a40e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a412:	f000 fc8b 	bl	800ad2c <__assert_func>
 800a416:	f100 0414 	add.w	r4, r0, #20
 800a41a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a41e:	4623      	mov	r3, r4
 800a420:	2200      	movs	r2, #0
 800a422:	4573      	cmp	r3, lr
 800a424:	d320      	bcc.n	800a468 <__multiply+0x94>
 800a426:	f107 0814 	add.w	r8, r7, #20
 800a42a:	f109 0114 	add.w	r1, r9, #20
 800a42e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a432:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a436:	9302      	str	r3, [sp, #8]
 800a438:	1beb      	subs	r3, r5, r7
 800a43a:	3b15      	subs	r3, #21
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	3304      	adds	r3, #4
 800a442:	3715      	adds	r7, #21
 800a444:	42bd      	cmp	r5, r7
 800a446:	bf38      	it	cc
 800a448:	2304      	movcc	r3, #4
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	9103      	str	r1, [sp, #12]
 800a450:	428b      	cmp	r3, r1
 800a452:	d80c      	bhi.n	800a46e <__multiply+0x9a>
 800a454:	2e00      	cmp	r6, #0
 800a456:	dd03      	ble.n	800a460 <__multiply+0x8c>
 800a458:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d055      	beq.n	800a50c <__multiply+0x138>
 800a460:	6106      	str	r6, [r0, #16]
 800a462:	b005      	add	sp, #20
 800a464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a468:	f843 2b04 	str.w	r2, [r3], #4
 800a46c:	e7d9      	b.n	800a422 <__multiply+0x4e>
 800a46e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a472:	f1ba 0f00 	cmp.w	sl, #0
 800a476:	d01f      	beq.n	800a4b8 <__multiply+0xe4>
 800a478:	46c4      	mov	ip, r8
 800a47a:	46a1      	mov	r9, r4
 800a47c:	2700      	movs	r7, #0
 800a47e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a482:	f8d9 3000 	ldr.w	r3, [r9]
 800a486:	fa1f fb82 	uxth.w	fp, r2
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a490:	443b      	add	r3, r7
 800a492:	f8d9 7000 	ldr.w	r7, [r9]
 800a496:	0c12      	lsrs	r2, r2, #16
 800a498:	0c3f      	lsrs	r7, r7, #16
 800a49a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a49e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a8:	4565      	cmp	r5, ip
 800a4aa:	f849 3b04 	str.w	r3, [r9], #4
 800a4ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a4b2:	d8e4      	bhi.n	800a47e <__multiply+0xaa>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	50e7      	str	r7, [r4, r3]
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4be:	3104      	adds	r1, #4
 800a4c0:	f1b9 0f00 	cmp.w	r9, #0
 800a4c4:	d020      	beq.n	800a508 <__multiply+0x134>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	4647      	mov	r7, r8
 800a4ca:	46a4      	mov	ip, r4
 800a4cc:	f04f 0a00 	mov.w	sl, #0
 800a4d0:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a4dc:	4452      	add	r2, sl
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e4:	f84c 3b04 	str.w	r3, [ip], #4
 800a4e8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4f0:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4f4:	fb09 330a 	mla	r3, r9, sl, r3
 800a4f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4fc:	42bd      	cmp	r5, r7
 800a4fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a502:	d8e5      	bhi.n	800a4d0 <__multiply+0xfc>
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	50a3      	str	r3, [r4, r2]
 800a508:	3404      	adds	r4, #4
 800a50a:	e79f      	b.n	800a44c <__multiply+0x78>
 800a50c:	3e01      	subs	r6, #1
 800a50e:	e7a1      	b.n	800a454 <__multiply+0x80>
 800a510:	0800c9fc 	.word	0x0800c9fc
 800a514:	0800ca0d 	.word	0x0800ca0d

0800a518 <__pow5mult>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	4615      	mov	r5, r2
 800a51e:	f012 0203 	ands.w	r2, r2, #3
 800a522:	4607      	mov	r7, r0
 800a524:	460e      	mov	r6, r1
 800a526:	d007      	beq.n	800a538 <__pow5mult+0x20>
 800a528:	4c25      	ldr	r4, [pc, #148]	@ (800a5c0 <__pow5mult+0xa8>)
 800a52a:	3a01      	subs	r2, #1
 800a52c:	2300      	movs	r3, #0
 800a52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a532:	f7ff fea7 	bl	800a284 <__multadd>
 800a536:	4606      	mov	r6, r0
 800a538:	10ad      	asrs	r5, r5, #2
 800a53a:	d03d      	beq.n	800a5b8 <__pow5mult+0xa0>
 800a53c:	69fc      	ldr	r4, [r7, #28]
 800a53e:	b97c      	cbnz	r4, 800a560 <__pow5mult+0x48>
 800a540:	2010      	movs	r0, #16
 800a542:	f7ff fd87 	bl	800a054 <malloc>
 800a546:	4602      	mov	r2, r0
 800a548:	61f8      	str	r0, [r7, #28]
 800a54a:	b928      	cbnz	r0, 800a558 <__pow5mult+0x40>
 800a54c:	4b1d      	ldr	r3, [pc, #116]	@ (800a5c4 <__pow5mult+0xac>)
 800a54e:	481e      	ldr	r0, [pc, #120]	@ (800a5c8 <__pow5mult+0xb0>)
 800a550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a554:	f000 fbea 	bl	800ad2c <__assert_func>
 800a558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a55c:	6004      	str	r4, [r0, #0]
 800a55e:	60c4      	str	r4, [r0, #12]
 800a560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a568:	b94c      	cbnz	r4, 800a57e <__pow5mult+0x66>
 800a56a:	f240 2171 	movw	r1, #625	@ 0x271
 800a56e:	4638      	mov	r0, r7
 800a570:	f7ff ff1a 	bl	800a3a8 <__i2b>
 800a574:	2300      	movs	r3, #0
 800a576:	f8c8 0008 	str.w	r0, [r8, #8]
 800a57a:	4604      	mov	r4, r0
 800a57c:	6003      	str	r3, [r0, #0]
 800a57e:	f04f 0900 	mov.w	r9, #0
 800a582:	07eb      	lsls	r3, r5, #31
 800a584:	d50a      	bpl.n	800a59c <__pow5mult+0x84>
 800a586:	4631      	mov	r1, r6
 800a588:	4622      	mov	r2, r4
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ff22 	bl	800a3d4 <__multiply>
 800a590:	4631      	mov	r1, r6
 800a592:	4680      	mov	r8, r0
 800a594:	4638      	mov	r0, r7
 800a596:	f7ff fe53 	bl	800a240 <_Bfree>
 800a59a:	4646      	mov	r6, r8
 800a59c:	106d      	asrs	r5, r5, #1
 800a59e:	d00b      	beq.n	800a5b8 <__pow5mult+0xa0>
 800a5a0:	6820      	ldr	r0, [r4, #0]
 800a5a2:	b938      	cbnz	r0, 800a5b4 <__pow5mult+0x9c>
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff ff13 	bl	800a3d4 <__multiply>
 800a5ae:	6020      	str	r0, [r4, #0]
 800a5b0:	f8c0 9000 	str.w	r9, [r0]
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	e7e4      	b.n	800a582 <__pow5mult+0x6a>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800cac0 	.word	0x0800cac0
 800a5c4:	0800c98d 	.word	0x0800c98d
 800a5c8:	0800ca0d 	.word	0x0800ca0d

0800a5cc <__lshift>:
 800a5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	6849      	ldr	r1, [r1, #4]
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	4607      	mov	r7, r0
 800a5de:	4691      	mov	r9, r2
 800a5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5e4:	f108 0601 	add.w	r6, r8, #1
 800a5e8:	42b3      	cmp	r3, r6
 800a5ea:	db0b      	blt.n	800a604 <__lshift+0x38>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff fde7 	bl	800a1c0 <_Balloc>
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	b948      	cbnz	r0, 800a60a <__lshift+0x3e>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	4b28      	ldr	r3, [pc, #160]	@ (800a69c <__lshift+0xd0>)
 800a5fa:	4829      	ldr	r0, [pc, #164]	@ (800a6a0 <__lshift+0xd4>)
 800a5fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a600:	f000 fb94 	bl	800ad2c <__assert_func>
 800a604:	3101      	adds	r1, #1
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	e7ee      	b.n	800a5e8 <__lshift+0x1c>
 800a60a:	2300      	movs	r3, #0
 800a60c:	f100 0114 	add.w	r1, r0, #20
 800a610:	f100 0210 	add.w	r2, r0, #16
 800a614:	4618      	mov	r0, r3
 800a616:	4553      	cmp	r3, sl
 800a618:	db33      	blt.n	800a682 <__lshift+0xb6>
 800a61a:	6920      	ldr	r0, [r4, #16]
 800a61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a620:	f104 0314 	add.w	r3, r4, #20
 800a624:	f019 091f 	ands.w	r9, r9, #31
 800a628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a630:	d02b      	beq.n	800a68a <__lshift+0xbe>
 800a632:	f1c9 0e20 	rsb	lr, r9, #32
 800a636:	468a      	mov	sl, r1
 800a638:	2200      	movs	r2, #0
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	fa00 f009 	lsl.w	r0, r0, r9
 800a640:	4310      	orrs	r0, r2
 800a642:	f84a 0b04 	str.w	r0, [sl], #4
 800a646:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64a:	459c      	cmp	ip, r3
 800a64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a650:	d8f3      	bhi.n	800a63a <__lshift+0x6e>
 800a652:	ebac 0304 	sub.w	r3, ip, r4
 800a656:	3b15      	subs	r3, #21
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	3304      	adds	r3, #4
 800a65e:	f104 0015 	add.w	r0, r4, #21
 800a662:	4560      	cmp	r0, ip
 800a664:	bf88      	it	hi
 800a666:	2304      	movhi	r3, #4
 800a668:	50ca      	str	r2, [r1, r3]
 800a66a:	b10a      	cbz	r2, 800a670 <__lshift+0xa4>
 800a66c:	f108 0602 	add.w	r6, r8, #2
 800a670:	3e01      	subs	r6, #1
 800a672:	4638      	mov	r0, r7
 800a674:	612e      	str	r6, [r5, #16]
 800a676:	4621      	mov	r1, r4
 800a678:	f7ff fde2 	bl	800a240 <_Bfree>
 800a67c:	4628      	mov	r0, r5
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	f842 0f04 	str.w	r0, [r2, #4]!
 800a686:	3301      	adds	r3, #1
 800a688:	e7c5      	b.n	800a616 <__lshift+0x4a>
 800a68a:	3904      	subs	r1, #4
 800a68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a690:	f841 2f04 	str.w	r2, [r1, #4]!
 800a694:	459c      	cmp	ip, r3
 800a696:	d8f9      	bhi.n	800a68c <__lshift+0xc0>
 800a698:	e7ea      	b.n	800a670 <__lshift+0xa4>
 800a69a:	bf00      	nop
 800a69c:	0800c9fc 	.word	0x0800c9fc
 800a6a0:	0800ca0d 	.word	0x0800ca0d

0800a6a4 <__mcmp>:
 800a6a4:	690a      	ldr	r2, [r1, #16]
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	6900      	ldr	r0, [r0, #16]
 800a6aa:	1a80      	subs	r0, r0, r2
 800a6ac:	b530      	push	{r4, r5, lr}
 800a6ae:	d10e      	bne.n	800a6ce <__mcmp+0x2a>
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	3114      	adds	r1, #20
 800a6b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6c4:	4295      	cmp	r5, r2
 800a6c6:	d003      	beq.n	800a6d0 <__mcmp+0x2c>
 800a6c8:	d205      	bcs.n	800a6d6 <__mcmp+0x32>
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	bd30      	pop	{r4, r5, pc}
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d3f3      	bcc.n	800a6bc <__mcmp+0x18>
 800a6d4:	e7fb      	b.n	800a6ce <__mcmp+0x2a>
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	e7f9      	b.n	800a6ce <__mcmp+0x2a>
	...

0800a6dc <__mdiff>:
 800a6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	4689      	mov	r9, r1
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	f7ff ffdb 	bl	800a6a4 <__mcmp>
 800a6ee:	1e05      	subs	r5, r0, #0
 800a6f0:	d112      	bne.n	800a718 <__mdiff+0x3c>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff fd63 	bl	800a1c0 <_Balloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	b928      	cbnz	r0, 800a70a <__mdiff+0x2e>
 800a6fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a7fc <__mdiff+0x120>)
 800a700:	f240 2137 	movw	r1, #567	@ 0x237
 800a704:	483e      	ldr	r0, [pc, #248]	@ (800a800 <__mdiff+0x124>)
 800a706:	f000 fb11 	bl	800ad2c <__assert_func>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a710:	4610      	mov	r0, r2
 800a712:	b003      	add	sp, #12
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	bfbc      	itt	lt
 800a71a:	464b      	movlt	r3, r9
 800a71c:	46a1      	movlt	r9, r4
 800a71e:	4630      	mov	r0, r6
 800a720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a724:	bfba      	itte	lt
 800a726:	461c      	movlt	r4, r3
 800a728:	2501      	movlt	r5, #1
 800a72a:	2500      	movge	r5, #0
 800a72c:	f7ff fd48 	bl	800a1c0 <_Balloc>
 800a730:	4602      	mov	r2, r0
 800a732:	b918      	cbnz	r0, 800a73c <__mdiff+0x60>
 800a734:	4b31      	ldr	r3, [pc, #196]	@ (800a7fc <__mdiff+0x120>)
 800a736:	f240 2145 	movw	r1, #581	@ 0x245
 800a73a:	e7e3      	b.n	800a704 <__mdiff+0x28>
 800a73c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a740:	6926      	ldr	r6, [r4, #16]
 800a742:	60c5      	str	r5, [r0, #12]
 800a744:	f109 0310 	add.w	r3, r9, #16
 800a748:	f109 0514 	add.w	r5, r9, #20
 800a74c:	f104 0e14 	add.w	lr, r4, #20
 800a750:	f100 0b14 	add.w	fp, r0, #20
 800a754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a75c:	9301      	str	r3, [sp, #4]
 800a75e:	46d9      	mov	r9, fp
 800a760:	f04f 0c00 	mov.w	ip, #0
 800a764:	9b01      	ldr	r3, [sp, #4]
 800a766:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a76a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	fa1f f38a 	uxth.w	r3, sl
 800a774:	4619      	mov	r1, r3
 800a776:	b283      	uxth	r3, r0
 800a778:	1acb      	subs	r3, r1, r3
 800a77a:	0c00      	lsrs	r0, r0, #16
 800a77c:	4463      	add	r3, ip
 800a77e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a786:	b29b      	uxth	r3, r3
 800a788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a78c:	4576      	cmp	r6, lr
 800a78e:	f849 3b04 	str.w	r3, [r9], #4
 800a792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a796:	d8e5      	bhi.n	800a764 <__mdiff+0x88>
 800a798:	1b33      	subs	r3, r6, r4
 800a79a:	3b15      	subs	r3, #21
 800a79c:	f023 0303 	bic.w	r3, r3, #3
 800a7a0:	3415      	adds	r4, #21
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	bf38      	it	cc
 800a7a8:	2304      	movcc	r3, #4
 800a7aa:	441d      	add	r5, r3
 800a7ac:	445b      	add	r3, fp
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	462c      	mov	r4, r5
 800a7b2:	4544      	cmp	r4, r8
 800a7b4:	d30e      	bcc.n	800a7d4 <__mdiff+0xf8>
 800a7b6:	f108 0103 	add.w	r1, r8, #3
 800a7ba:	1b49      	subs	r1, r1, r5
 800a7bc:	f021 0103 	bic.w	r1, r1, #3
 800a7c0:	3d03      	subs	r5, #3
 800a7c2:	45a8      	cmp	r8, r5
 800a7c4:	bf38      	it	cc
 800a7c6:	2100      	movcc	r1, #0
 800a7c8:	440b      	add	r3, r1
 800a7ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ce:	b191      	cbz	r1, 800a7f6 <__mdiff+0x11a>
 800a7d0:	6117      	str	r7, [r2, #16]
 800a7d2:	e79d      	b.n	800a710 <__mdiff+0x34>
 800a7d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7d8:	46e6      	mov	lr, ip
 800a7da:	0c08      	lsrs	r0, r1, #16
 800a7dc:	fa1c fc81 	uxtah	ip, ip, r1
 800a7e0:	4471      	add	r1, lr
 800a7e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7e6:	b289      	uxth	r1, r1
 800a7e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7ec:	f846 1b04 	str.w	r1, [r6], #4
 800a7f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7f4:	e7dd      	b.n	800a7b2 <__mdiff+0xd6>
 800a7f6:	3f01      	subs	r7, #1
 800a7f8:	e7e7      	b.n	800a7ca <__mdiff+0xee>
 800a7fa:	bf00      	nop
 800a7fc:	0800c9fc 	.word	0x0800c9fc
 800a800:	0800ca0d 	.word	0x0800ca0d

0800a804 <__d2b>:
 800a804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a808:	460f      	mov	r7, r1
 800a80a:	2101      	movs	r1, #1
 800a80c:	ec59 8b10 	vmov	r8, r9, d0
 800a810:	4616      	mov	r6, r2
 800a812:	f7ff fcd5 	bl	800a1c0 <_Balloc>
 800a816:	4604      	mov	r4, r0
 800a818:	b930      	cbnz	r0, 800a828 <__d2b+0x24>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b23      	ldr	r3, [pc, #140]	@ (800a8ac <__d2b+0xa8>)
 800a81e:	4824      	ldr	r0, [pc, #144]	@ (800a8b0 <__d2b+0xac>)
 800a820:	f240 310f 	movw	r1, #783	@ 0x30f
 800a824:	f000 fa82 	bl	800ad2c <__assert_func>
 800a828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a82c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a830:	b10d      	cbz	r5, 800a836 <__d2b+0x32>
 800a832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	f1b8 0300 	subs.w	r3, r8, #0
 800a83c:	d023      	beq.n	800a886 <__d2b+0x82>
 800a83e:	4668      	mov	r0, sp
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	f7ff fd84 	bl	800a34e <__lo0bits>
 800a846:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a84a:	b1d0      	cbz	r0, 800a882 <__d2b+0x7e>
 800a84c:	f1c0 0320 	rsb	r3, r0, #32
 800a850:	fa02 f303 	lsl.w	r3, r2, r3
 800a854:	430b      	orrs	r3, r1
 800a856:	40c2      	lsrs	r2, r0
 800a858:	6163      	str	r3, [r4, #20]
 800a85a:	9201      	str	r2, [sp, #4]
 800a85c:	9b01      	ldr	r3, [sp, #4]
 800a85e:	61a3      	str	r3, [r4, #24]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf0c      	ite	eq
 800a864:	2201      	moveq	r2, #1
 800a866:	2202      	movne	r2, #2
 800a868:	6122      	str	r2, [r4, #16]
 800a86a:	b1a5      	cbz	r5, 800a896 <__d2b+0x92>
 800a86c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a870:	4405      	add	r5, r0
 800a872:	603d      	str	r5, [r7, #0]
 800a874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a878:	6030      	str	r0, [r6, #0]
 800a87a:	4620      	mov	r0, r4
 800a87c:	b003      	add	sp, #12
 800a87e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a882:	6161      	str	r1, [r4, #20]
 800a884:	e7ea      	b.n	800a85c <__d2b+0x58>
 800a886:	a801      	add	r0, sp, #4
 800a888:	f7ff fd61 	bl	800a34e <__lo0bits>
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	6163      	str	r3, [r4, #20]
 800a890:	3020      	adds	r0, #32
 800a892:	2201      	movs	r2, #1
 800a894:	e7e8      	b.n	800a868 <__d2b+0x64>
 800a896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a89a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a89e:	6038      	str	r0, [r7, #0]
 800a8a0:	6918      	ldr	r0, [r3, #16]
 800a8a2:	f7ff fd35 	bl	800a310 <__hi0bits>
 800a8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8aa:	e7e5      	b.n	800a878 <__d2b+0x74>
 800a8ac:	0800c9fc 	.word	0x0800c9fc
 800a8b0:	0800ca0d 	.word	0x0800ca0d

0800a8b4 <__ssputs_r>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	688e      	ldr	r6, [r1, #8]
 800a8ba:	461f      	mov	r7, r3
 800a8bc:	42be      	cmp	r6, r7
 800a8be:	680b      	ldr	r3, [r1, #0]
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	4690      	mov	r8, r2
 800a8c6:	d82d      	bhi.n	800a924 <__ssputs_r+0x70>
 800a8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a8d0:	d026      	beq.n	800a920 <__ssputs_r+0x6c>
 800a8d2:	6965      	ldr	r5, [r4, #20]
 800a8d4:	6909      	ldr	r1, [r1, #16]
 800a8d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8da:	eba3 0901 	sub.w	r9, r3, r1
 800a8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e2:	1c7b      	adds	r3, r7, #1
 800a8e4:	444b      	add	r3, r9
 800a8e6:	106d      	asrs	r5, r5, #1
 800a8e8:	429d      	cmp	r5, r3
 800a8ea:	bf38      	it	cc
 800a8ec:	461d      	movcc	r5, r3
 800a8ee:	0553      	lsls	r3, r2, #21
 800a8f0:	d527      	bpl.n	800a942 <__ssputs_r+0x8e>
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7ff fbd8 	bl	800a0a8 <_malloc_r>
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	b360      	cbz	r0, 800a956 <__ssputs_r+0xa2>
 800a8fc:	6921      	ldr	r1, [r4, #16]
 800a8fe:	464a      	mov	r2, r9
 800a900:	f000 fa06 	bl	800ad10 <memcpy>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	6126      	str	r6, [r4, #16]
 800a912:	6165      	str	r5, [r4, #20]
 800a914:	444e      	add	r6, r9
 800a916:	eba5 0509 	sub.w	r5, r5, r9
 800a91a:	6026      	str	r6, [r4, #0]
 800a91c:	60a5      	str	r5, [r4, #8]
 800a91e:	463e      	mov	r6, r7
 800a920:	42be      	cmp	r6, r7
 800a922:	d900      	bls.n	800a926 <__ssputs_r+0x72>
 800a924:	463e      	mov	r6, r7
 800a926:	6820      	ldr	r0, [r4, #0]
 800a928:	4632      	mov	r2, r6
 800a92a:	4641      	mov	r1, r8
 800a92c:	f000 f9c6 	bl	800acbc <memmove>
 800a930:	68a3      	ldr	r3, [r4, #8]
 800a932:	1b9b      	subs	r3, r3, r6
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	4433      	add	r3, r6
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	2000      	movs	r0, #0
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	462a      	mov	r2, r5
 800a944:	f000 fa36 	bl	800adb4 <_realloc_r>
 800a948:	4606      	mov	r6, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d1e0      	bne.n	800a910 <__ssputs_r+0x5c>
 800a94e:	6921      	ldr	r1, [r4, #16]
 800a950:	4650      	mov	r0, sl
 800a952:	f7ff fb35 	bl	8009fc0 <_free_r>
 800a956:	230c      	movs	r3, #12
 800a958:	f8ca 3000 	str.w	r3, [sl]
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	e7e9      	b.n	800a93e <__ssputs_r+0x8a>
	...

0800a96c <_svfiprintf_r>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	4698      	mov	r8, r3
 800a972:	898b      	ldrh	r3, [r1, #12]
 800a974:	061b      	lsls	r3, r3, #24
 800a976:	b09d      	sub	sp, #116	@ 0x74
 800a978:	4607      	mov	r7, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	4614      	mov	r4, r2
 800a97e:	d510      	bpl.n	800a9a2 <_svfiprintf_r+0x36>
 800a980:	690b      	ldr	r3, [r1, #16]
 800a982:	b973      	cbnz	r3, 800a9a2 <_svfiprintf_r+0x36>
 800a984:	2140      	movs	r1, #64	@ 0x40
 800a986:	f7ff fb8f 	bl	800a0a8 <_malloc_r>
 800a98a:	6028      	str	r0, [r5, #0]
 800a98c:	6128      	str	r0, [r5, #16]
 800a98e:	b930      	cbnz	r0, 800a99e <_svfiprintf_r+0x32>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	b01d      	add	sp, #116	@ 0x74
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	2340      	movs	r3, #64	@ 0x40
 800a9a0:	616b      	str	r3, [r5, #20]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b0:	2330      	movs	r3, #48	@ 0x30
 800a9b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ab50 <_svfiprintf_r+0x1e4>
 800a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9ba:	f04f 0901 	mov.w	r9, #1
 800a9be:	4623      	mov	r3, r4
 800a9c0:	469a      	mov	sl, r3
 800a9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c6:	b10a      	cbz	r2, 800a9cc <_svfiprintf_r+0x60>
 800a9c8:	2a25      	cmp	r2, #37	@ 0x25
 800a9ca:	d1f9      	bne.n	800a9c0 <_svfiprintf_r+0x54>
 800a9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d0:	d00b      	beq.n	800a9ea <_svfiprintf_r+0x7e>
 800a9d2:	465b      	mov	r3, fp
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff ff6b 	bl	800a8b4 <__ssputs_r>
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f000 80a7 	beq.w	800ab32 <_svfiprintf_r+0x1c6>
 800a9e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9e6:	445a      	add	r2, fp
 800a9e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 809f 	beq.w	800ab32 <_svfiprintf_r+0x1c6>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fe:	f10a 0a01 	add.w	sl, sl, #1
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	9307      	str	r3, [sp, #28]
 800aa06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa0c:	4654      	mov	r4, sl
 800aa0e:	2205      	movs	r2, #5
 800aa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa14:	484e      	ldr	r0, [pc, #312]	@ (800ab50 <_svfiprintf_r+0x1e4>)
 800aa16:	f7f5 fbe3 	bl	80001e0 <memchr>
 800aa1a:	9a04      	ldr	r2, [sp, #16]
 800aa1c:	b9d8      	cbnz	r0, 800aa56 <_svfiprintf_r+0xea>
 800aa1e:	06d0      	lsls	r0, r2, #27
 800aa20:	bf44      	itt	mi
 800aa22:	2320      	movmi	r3, #32
 800aa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa28:	0711      	lsls	r1, r2, #28
 800aa2a:	bf44      	itt	mi
 800aa2c:	232b      	movmi	r3, #43	@ 0x2b
 800aa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa32:	f89a 3000 	ldrb.w	r3, [sl]
 800aa36:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa38:	d015      	beq.n	800aa66 <_svfiprintf_r+0xfa>
 800aa3a:	9a07      	ldr	r2, [sp, #28]
 800aa3c:	4654      	mov	r4, sl
 800aa3e:	2000      	movs	r0, #0
 800aa40:	f04f 0c0a 	mov.w	ip, #10
 800aa44:	4621      	mov	r1, r4
 800aa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa4a:	3b30      	subs	r3, #48	@ 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d94b      	bls.n	800aae8 <_svfiprintf_r+0x17c>
 800aa50:	b1b0      	cbz	r0, 800aa80 <_svfiprintf_r+0x114>
 800aa52:	9207      	str	r2, [sp, #28]
 800aa54:	e014      	b.n	800aa80 <_svfiprintf_r+0x114>
 800aa56:	eba0 0308 	sub.w	r3, r0, r8
 800aa5a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	46a2      	mov	sl, r4
 800aa64:	e7d2      	b.n	800aa0c <_svfiprintf_r+0xa0>
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	1d19      	adds	r1, r3, #4
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	9103      	str	r1, [sp, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bfbb      	ittet	lt
 800aa72:	425b      	neglt	r3, r3
 800aa74:	f042 0202 	orrlt.w	r2, r2, #2
 800aa78:	9307      	strge	r3, [sp, #28]
 800aa7a:	9307      	strlt	r3, [sp, #28]
 800aa7c:	bfb8      	it	lt
 800aa7e:	9204      	strlt	r2, [sp, #16]
 800aa80:	7823      	ldrb	r3, [r4, #0]
 800aa82:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa84:	d10a      	bne.n	800aa9c <_svfiprintf_r+0x130>
 800aa86:	7863      	ldrb	r3, [r4, #1]
 800aa88:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa8a:	d132      	bne.n	800aaf2 <_svfiprintf_r+0x186>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	1d1a      	adds	r2, r3, #4
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	9203      	str	r2, [sp, #12]
 800aa94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa98:	3402      	adds	r4, #2
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab60 <_svfiprintf_r+0x1f4>
 800aaa0:	7821      	ldrb	r1, [r4, #0]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	4650      	mov	r0, sl
 800aaa6:	f7f5 fb9b 	bl	80001e0 <memchr>
 800aaaa:	b138      	cbz	r0, 800aabc <_svfiprintf_r+0x150>
 800aaac:	9b04      	ldr	r3, [sp, #16]
 800aaae:	eba0 000a 	sub.w	r0, r0, sl
 800aab2:	2240      	movs	r2, #64	@ 0x40
 800aab4:	4082      	lsls	r2, r0
 800aab6:	4313      	orrs	r3, r2
 800aab8:	3401      	adds	r4, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac0:	4824      	ldr	r0, [pc, #144]	@ (800ab54 <_svfiprintf_r+0x1e8>)
 800aac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aac6:	2206      	movs	r2, #6
 800aac8:	f7f5 fb8a 	bl	80001e0 <memchr>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d036      	beq.n	800ab3e <_svfiprintf_r+0x1d2>
 800aad0:	4b21      	ldr	r3, [pc, #132]	@ (800ab58 <_svfiprintf_r+0x1ec>)
 800aad2:	bb1b      	cbnz	r3, 800ab1c <_svfiprintf_r+0x1b0>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	3307      	adds	r3, #7
 800aad8:	f023 0307 	bic.w	r3, r3, #7
 800aadc:	3308      	adds	r3, #8
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae2:	4433      	add	r3, r6
 800aae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aae6:	e76a      	b.n	800a9be <_svfiprintf_r+0x52>
 800aae8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaec:	460c      	mov	r4, r1
 800aaee:	2001      	movs	r0, #1
 800aaf0:	e7a8      	b.n	800aa44 <_svfiprintf_r+0xd8>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	3401      	adds	r4, #1
 800aaf6:	9305      	str	r3, [sp, #20]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f04f 0c0a 	mov.w	ip, #10
 800aafe:	4620      	mov	r0, r4
 800ab00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab04:	3a30      	subs	r2, #48	@ 0x30
 800ab06:	2a09      	cmp	r2, #9
 800ab08:	d903      	bls.n	800ab12 <_svfiprintf_r+0x1a6>
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0c6      	beq.n	800aa9c <_svfiprintf_r+0x130>
 800ab0e:	9105      	str	r1, [sp, #20]
 800ab10:	e7c4      	b.n	800aa9c <_svfiprintf_r+0x130>
 800ab12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab16:	4604      	mov	r4, r0
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e7f0      	b.n	800aafe <_svfiprintf_r+0x192>
 800ab1c:	ab03      	add	r3, sp, #12
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	462a      	mov	r2, r5
 800ab22:	4b0e      	ldr	r3, [pc, #56]	@ (800ab5c <_svfiprintf_r+0x1f0>)
 800ab24:	a904      	add	r1, sp, #16
 800ab26:	4638      	mov	r0, r7
 800ab28:	f7fd fe7a 	bl	8008820 <_printf_float>
 800ab2c:	1c42      	adds	r2, r0, #1
 800ab2e:	4606      	mov	r6, r0
 800ab30:	d1d6      	bne.n	800aae0 <_svfiprintf_r+0x174>
 800ab32:	89ab      	ldrh	r3, [r5, #12]
 800ab34:	065b      	lsls	r3, r3, #25
 800ab36:	f53f af2d 	bmi.w	800a994 <_svfiprintf_r+0x28>
 800ab3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab3c:	e72c      	b.n	800a998 <_svfiprintf_r+0x2c>
 800ab3e:	ab03      	add	r3, sp, #12
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	462a      	mov	r2, r5
 800ab44:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <_svfiprintf_r+0x1f0>)
 800ab46:	a904      	add	r1, sp, #16
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f7fe f901 	bl	8008d50 <_printf_i>
 800ab4e:	e7ed      	b.n	800ab2c <_svfiprintf_r+0x1c0>
 800ab50:	0800ca66 	.word	0x0800ca66
 800ab54:	0800ca70 	.word	0x0800ca70
 800ab58:	08008821 	.word	0x08008821
 800ab5c:	0800a8b5 	.word	0x0800a8b5
 800ab60:	0800ca6c 	.word	0x0800ca6c

0800ab64 <__sflush_r>:
 800ab64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	0716      	lsls	r6, r2, #28
 800ab6e:	4605      	mov	r5, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	d454      	bmi.n	800ac1e <__sflush_r+0xba>
 800ab74:	684b      	ldr	r3, [r1, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	dc02      	bgt.n	800ab80 <__sflush_r+0x1c>
 800ab7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	dd48      	ble.n	800ac12 <__sflush_r+0xae>
 800ab80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	d045      	beq.n	800ac12 <__sflush_r+0xae>
 800ab86:	2300      	movs	r3, #0
 800ab88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab8c:	682f      	ldr	r7, [r5, #0]
 800ab8e:	6a21      	ldr	r1, [r4, #32]
 800ab90:	602b      	str	r3, [r5, #0]
 800ab92:	d030      	beq.n	800abf6 <__sflush_r+0x92>
 800ab94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	0759      	lsls	r1, r3, #29
 800ab9a:	d505      	bpl.n	800aba8 <__sflush_r+0x44>
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	1ad2      	subs	r2, r2, r3
 800aba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aba2:	b10b      	cbz	r3, 800aba8 <__sflush_r+0x44>
 800aba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aba6:	1ad2      	subs	r2, r2, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abac:	6a21      	ldr	r1, [r4, #32]
 800abae:	4628      	mov	r0, r5
 800abb0:	47b0      	blx	r6
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	d106      	bne.n	800abc6 <__sflush_r+0x62>
 800abb8:	6829      	ldr	r1, [r5, #0]
 800abba:	291d      	cmp	r1, #29
 800abbc:	d82b      	bhi.n	800ac16 <__sflush_r+0xb2>
 800abbe:	4a2a      	ldr	r2, [pc, #168]	@ (800ac68 <__sflush_r+0x104>)
 800abc0:	40ca      	lsrs	r2, r1
 800abc2:	07d6      	lsls	r6, r2, #31
 800abc4:	d527      	bpl.n	800ac16 <__sflush_r+0xb2>
 800abc6:	2200      	movs	r2, #0
 800abc8:	6062      	str	r2, [r4, #4]
 800abca:	04d9      	lsls	r1, r3, #19
 800abcc:	6922      	ldr	r2, [r4, #16]
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	d504      	bpl.n	800abdc <__sflush_r+0x78>
 800abd2:	1c42      	adds	r2, r0, #1
 800abd4:	d101      	bne.n	800abda <__sflush_r+0x76>
 800abd6:	682b      	ldr	r3, [r5, #0]
 800abd8:	b903      	cbnz	r3, 800abdc <__sflush_r+0x78>
 800abda:	6560      	str	r0, [r4, #84]	@ 0x54
 800abdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abde:	602f      	str	r7, [r5, #0]
 800abe0:	b1b9      	cbz	r1, 800ac12 <__sflush_r+0xae>
 800abe2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abe6:	4299      	cmp	r1, r3
 800abe8:	d002      	beq.n	800abf0 <__sflush_r+0x8c>
 800abea:	4628      	mov	r0, r5
 800abec:	f7ff f9e8 	bl	8009fc0 <_free_r>
 800abf0:	2300      	movs	r3, #0
 800abf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800abf4:	e00d      	b.n	800ac12 <__sflush_r+0xae>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	4602      	mov	r2, r0
 800abfe:	1c50      	adds	r0, r2, #1
 800ac00:	d1c9      	bne.n	800ab96 <__sflush_r+0x32>
 800ac02:	682b      	ldr	r3, [r5, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0c6      	beq.n	800ab96 <__sflush_r+0x32>
 800ac08:	2b1d      	cmp	r3, #29
 800ac0a:	d001      	beq.n	800ac10 <__sflush_r+0xac>
 800ac0c:	2b16      	cmp	r3, #22
 800ac0e:	d11e      	bne.n	800ac4e <__sflush_r+0xea>
 800ac10:	602f      	str	r7, [r5, #0]
 800ac12:	2000      	movs	r0, #0
 800ac14:	e022      	b.n	800ac5c <__sflush_r+0xf8>
 800ac16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1a:	b21b      	sxth	r3, r3
 800ac1c:	e01b      	b.n	800ac56 <__sflush_r+0xf2>
 800ac1e:	690f      	ldr	r7, [r1, #16]
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	d0f6      	beq.n	800ac12 <__sflush_r+0xae>
 800ac24:	0793      	lsls	r3, r2, #30
 800ac26:	680e      	ldr	r6, [r1, #0]
 800ac28:	bf08      	it	eq
 800ac2a:	694b      	ldreq	r3, [r1, #20]
 800ac2c:	600f      	str	r7, [r1, #0]
 800ac2e:	bf18      	it	ne
 800ac30:	2300      	movne	r3, #0
 800ac32:	eba6 0807 	sub.w	r8, r6, r7
 800ac36:	608b      	str	r3, [r1, #8]
 800ac38:	f1b8 0f00 	cmp.w	r8, #0
 800ac3c:	dde9      	ble.n	800ac12 <__sflush_r+0xae>
 800ac3e:	6a21      	ldr	r1, [r4, #32]
 800ac40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac42:	4643      	mov	r3, r8
 800ac44:	463a      	mov	r2, r7
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	dc08      	bgt.n	800ac60 <__sflush_r+0xfc>
 800ac4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac56:	81a3      	strh	r3, [r4, #12]
 800ac58:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac60:	4407      	add	r7, r0
 800ac62:	eba8 0800 	sub.w	r8, r8, r0
 800ac66:	e7e7      	b.n	800ac38 <__sflush_r+0xd4>
 800ac68:	20400001 	.word	0x20400001

0800ac6c <_fflush_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	690b      	ldr	r3, [r1, #16]
 800ac70:	4605      	mov	r5, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	b913      	cbnz	r3, 800ac7c <_fflush_r+0x10>
 800ac76:	2500      	movs	r5, #0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	b118      	cbz	r0, 800ac86 <_fflush_r+0x1a>
 800ac7e:	6a03      	ldr	r3, [r0, #32]
 800ac80:	b90b      	cbnz	r3, 800ac86 <_fflush_r+0x1a>
 800ac82:	f7fe fa0f 	bl	80090a4 <__sinit>
 800ac86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0f3      	beq.n	800ac76 <_fflush_r+0xa>
 800ac8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac90:	07d0      	lsls	r0, r2, #31
 800ac92:	d404      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac94:	0599      	lsls	r1, r3, #22
 800ac96:	d402      	bmi.n	800ac9e <_fflush_r+0x32>
 800ac98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac9a:	f7fe fb36 	bl	800930a <__retarget_lock_acquire_recursive>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	f7ff ff5f 	bl	800ab64 <__sflush_r>
 800aca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aca8:	07da      	lsls	r2, r3, #31
 800acaa:	4605      	mov	r5, r0
 800acac:	d4e4      	bmi.n	800ac78 <_fflush_r+0xc>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	059b      	lsls	r3, r3, #22
 800acb2:	d4e1      	bmi.n	800ac78 <_fflush_r+0xc>
 800acb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acb6:	f7fe fb29 	bl	800930c <__retarget_lock_release_recursive>
 800acba:	e7dd      	b.n	800ac78 <_fflush_r+0xc>

0800acbc <memmove>:
 800acbc:	4288      	cmp	r0, r1
 800acbe:	b510      	push	{r4, lr}
 800acc0:	eb01 0402 	add.w	r4, r1, r2
 800acc4:	d902      	bls.n	800accc <memmove+0x10>
 800acc6:	4284      	cmp	r4, r0
 800acc8:	4623      	mov	r3, r4
 800acca:	d807      	bhi.n	800acdc <memmove+0x20>
 800accc:	1e43      	subs	r3, r0, #1
 800acce:	42a1      	cmp	r1, r4
 800acd0:	d008      	beq.n	800ace4 <memmove+0x28>
 800acd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acda:	e7f8      	b.n	800acce <memmove+0x12>
 800acdc:	4402      	add	r2, r0
 800acde:	4601      	mov	r1, r0
 800ace0:	428a      	cmp	r2, r1
 800ace2:	d100      	bne.n	800ace6 <memmove+0x2a>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acee:	e7f7      	b.n	800ace0 <memmove+0x24>

0800acf0 <_sbrk_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d06      	ldr	r5, [pc, #24]	@ (800ad0c <_sbrk_r+0x1c>)
 800acf4:	2300      	movs	r3, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	4608      	mov	r0, r1
 800acfa:	602b      	str	r3, [r5, #0]
 800acfc:	f7f9 f8c0 	bl	8003e80 <_sbrk>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_sbrk_r+0x1a>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_sbrk_r+0x1a>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	20001550 	.word	0x20001550

0800ad10 <memcpy>:
 800ad10:	440a      	add	r2, r1
 800ad12:	4291      	cmp	r1, r2
 800ad14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad18:	d100      	bne.n	800ad1c <memcpy+0xc>
 800ad1a:	4770      	bx	lr
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad26:	4291      	cmp	r1, r2
 800ad28:	d1f9      	bne.n	800ad1e <memcpy+0xe>
 800ad2a:	bd10      	pop	{r4, pc}

0800ad2c <__assert_func>:
 800ad2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad2e:	4614      	mov	r4, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b09      	ldr	r3, [pc, #36]	@ (800ad58 <__assert_func+0x2c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	68d8      	ldr	r0, [r3, #12]
 800ad3a:	b14c      	cbz	r4, 800ad50 <__assert_func+0x24>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <__assert_func+0x30>)
 800ad3e:	9100      	str	r1, [sp, #0]
 800ad40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad44:	4906      	ldr	r1, [pc, #24]	@ (800ad60 <__assert_func+0x34>)
 800ad46:	462b      	mov	r3, r5
 800ad48:	f000 f870 	bl	800ae2c <fiprintf>
 800ad4c:	f000 f880 	bl	800ae50 <abort>
 800ad50:	4b04      	ldr	r3, [pc, #16]	@ (800ad64 <__assert_func+0x38>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e7f3      	b.n	800ad3e <__assert_func+0x12>
 800ad56:	bf00      	nop
 800ad58:	20000018 	.word	0x20000018
 800ad5c:	0800ca81 	.word	0x0800ca81
 800ad60:	0800ca8e 	.word	0x0800ca8e
 800ad64:	0800cabc 	.word	0x0800cabc

0800ad68 <_calloc_r>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	fba1 5402 	umull	r5, r4, r1, r2
 800ad6e:	b934      	cbnz	r4, 800ad7e <_calloc_r+0x16>
 800ad70:	4629      	mov	r1, r5
 800ad72:	f7ff f999 	bl	800a0a8 <_malloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	b928      	cbnz	r0, 800ad86 <_calloc_r+0x1e>
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	220c      	movs	r2, #12
 800ad80:	6002      	str	r2, [r0, #0]
 800ad82:	2600      	movs	r6, #0
 800ad84:	e7f9      	b.n	800ad7a <_calloc_r+0x12>
 800ad86:	462a      	mov	r2, r5
 800ad88:	4621      	mov	r1, r4
 800ad8a:	f7fe fa41 	bl	8009210 <memset>
 800ad8e:	e7f4      	b.n	800ad7a <_calloc_r+0x12>

0800ad90 <__ascii_mbtowc>:
 800ad90:	b082      	sub	sp, #8
 800ad92:	b901      	cbnz	r1, 800ad96 <__ascii_mbtowc+0x6>
 800ad94:	a901      	add	r1, sp, #4
 800ad96:	b142      	cbz	r2, 800adaa <__ascii_mbtowc+0x1a>
 800ad98:	b14b      	cbz	r3, 800adae <__ascii_mbtowc+0x1e>
 800ad9a:	7813      	ldrb	r3, [r2, #0]
 800ad9c:	600b      	str	r3, [r1, #0]
 800ad9e:	7812      	ldrb	r2, [r2, #0]
 800ada0:	1e10      	subs	r0, r2, #0
 800ada2:	bf18      	it	ne
 800ada4:	2001      	movne	r0, #1
 800ada6:	b002      	add	sp, #8
 800ada8:	4770      	bx	lr
 800adaa:	4610      	mov	r0, r2
 800adac:	e7fb      	b.n	800ada6 <__ascii_mbtowc+0x16>
 800adae:	f06f 0001 	mvn.w	r0, #1
 800adb2:	e7f8      	b.n	800ada6 <__ascii_mbtowc+0x16>

0800adb4 <_realloc_r>:
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	4607      	mov	r7, r0
 800adba:	4614      	mov	r4, r2
 800adbc:	460d      	mov	r5, r1
 800adbe:	b921      	cbnz	r1, 800adca <_realloc_r+0x16>
 800adc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc4:	4611      	mov	r1, r2
 800adc6:	f7ff b96f 	b.w	800a0a8 <_malloc_r>
 800adca:	b92a      	cbnz	r2, 800add8 <_realloc_r+0x24>
 800adcc:	f7ff f8f8 	bl	8009fc0 <_free_r>
 800add0:	4625      	mov	r5, r4
 800add2:	4628      	mov	r0, r5
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	f000 f841 	bl	800ae5e <_malloc_usable_size_r>
 800addc:	4284      	cmp	r4, r0
 800adde:	4606      	mov	r6, r0
 800ade0:	d802      	bhi.n	800ade8 <_realloc_r+0x34>
 800ade2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ade6:	d8f4      	bhi.n	800add2 <_realloc_r+0x1e>
 800ade8:	4621      	mov	r1, r4
 800adea:	4638      	mov	r0, r7
 800adec:	f7ff f95c 	bl	800a0a8 <_malloc_r>
 800adf0:	4680      	mov	r8, r0
 800adf2:	b908      	cbnz	r0, 800adf8 <_realloc_r+0x44>
 800adf4:	4645      	mov	r5, r8
 800adf6:	e7ec      	b.n	800add2 <_realloc_r+0x1e>
 800adf8:	42b4      	cmp	r4, r6
 800adfa:	4622      	mov	r2, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	bf28      	it	cs
 800ae00:	4632      	movcs	r2, r6
 800ae02:	f7ff ff85 	bl	800ad10 <memcpy>
 800ae06:	4629      	mov	r1, r5
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7ff f8d9 	bl	8009fc0 <_free_r>
 800ae0e:	e7f1      	b.n	800adf4 <_realloc_r+0x40>

0800ae10 <__ascii_wctomb>:
 800ae10:	4603      	mov	r3, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	b141      	cbz	r1, 800ae28 <__ascii_wctomb+0x18>
 800ae16:	2aff      	cmp	r2, #255	@ 0xff
 800ae18:	d904      	bls.n	800ae24 <__ascii_wctomb+0x14>
 800ae1a:	228a      	movs	r2, #138	@ 0x8a
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae22:	4770      	bx	lr
 800ae24:	700a      	strb	r2, [r1, #0]
 800ae26:	2001      	movs	r0, #1
 800ae28:	4770      	bx	lr
	...

0800ae2c <fiprintf>:
 800ae2c:	b40e      	push	{r1, r2, r3}
 800ae2e:	b503      	push	{r0, r1, lr}
 800ae30:	4601      	mov	r1, r0
 800ae32:	ab03      	add	r3, sp, #12
 800ae34:	4805      	ldr	r0, [pc, #20]	@ (800ae4c <fiprintf+0x20>)
 800ae36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae3a:	6800      	ldr	r0, [r0, #0]
 800ae3c:	9301      	str	r3, [sp, #4]
 800ae3e:	f000 f83f 	bl	800aec0 <_vfiprintf_r>
 800ae42:	b002      	add	sp, #8
 800ae44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae48:	b003      	add	sp, #12
 800ae4a:	4770      	bx	lr
 800ae4c:	20000018 	.word	0x20000018

0800ae50 <abort>:
 800ae50:	b508      	push	{r3, lr}
 800ae52:	2006      	movs	r0, #6
 800ae54:	f000 fa08 	bl	800b268 <raise>
 800ae58:	2001      	movs	r0, #1
 800ae5a:	f7f8 ff99 	bl	8003d90 <_exit>

0800ae5e <_malloc_usable_size_r>:
 800ae5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae62:	1f18      	subs	r0, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bfbc      	itt	lt
 800ae68:	580b      	ldrlt	r3, [r1, r0]
 800ae6a:	18c0      	addlt	r0, r0, r3
 800ae6c:	4770      	bx	lr

0800ae6e <__sfputc_r>:
 800ae6e:	6893      	ldr	r3, [r2, #8]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	b410      	push	{r4}
 800ae76:	6093      	str	r3, [r2, #8]
 800ae78:	da08      	bge.n	800ae8c <__sfputc_r+0x1e>
 800ae7a:	6994      	ldr	r4, [r2, #24]
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	db01      	blt.n	800ae84 <__sfputc_r+0x16>
 800ae80:	290a      	cmp	r1, #10
 800ae82:	d103      	bne.n	800ae8c <__sfputc_r+0x1e>
 800ae84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae88:	f000 b932 	b.w	800b0f0 <__swbuf_r>
 800ae8c:	6813      	ldr	r3, [r2, #0]
 800ae8e:	1c58      	adds	r0, r3, #1
 800ae90:	6010      	str	r0, [r2, #0]
 800ae92:	7019      	strb	r1, [r3, #0]
 800ae94:	4608      	mov	r0, r1
 800ae96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <__sfputs_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460f      	mov	r7, r1
 800aea2:	4614      	mov	r4, r2
 800aea4:	18d5      	adds	r5, r2, r3
 800aea6:	42ac      	cmp	r4, r5
 800aea8:	d101      	bne.n	800aeae <__sfputs_r+0x12>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e007      	b.n	800aebe <__sfputs_r+0x22>
 800aeae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff ffda 	bl	800ae6e <__sfputc_r>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	d1f3      	bne.n	800aea6 <__sfputs_r+0xa>
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aec0 <_vfiprintf_r>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	460d      	mov	r5, r1
 800aec6:	b09d      	sub	sp, #116	@ 0x74
 800aec8:	4614      	mov	r4, r2
 800aeca:	4698      	mov	r8, r3
 800aecc:	4606      	mov	r6, r0
 800aece:	b118      	cbz	r0, 800aed8 <_vfiprintf_r+0x18>
 800aed0:	6a03      	ldr	r3, [r0, #32]
 800aed2:	b90b      	cbnz	r3, 800aed8 <_vfiprintf_r+0x18>
 800aed4:	f7fe f8e6 	bl	80090a4 <__sinit>
 800aed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeda:	07d9      	lsls	r1, r3, #31
 800aedc:	d405      	bmi.n	800aeea <_vfiprintf_r+0x2a>
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	059a      	lsls	r2, r3, #22
 800aee2:	d402      	bmi.n	800aeea <_vfiprintf_r+0x2a>
 800aee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aee6:	f7fe fa10 	bl	800930a <__retarget_lock_acquire_recursive>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	071b      	lsls	r3, r3, #28
 800aeee:	d501      	bpl.n	800aef4 <_vfiprintf_r+0x34>
 800aef0:	692b      	ldr	r3, [r5, #16]
 800aef2:	b99b      	cbnz	r3, 800af1c <_vfiprintf_r+0x5c>
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 f938 	bl	800b16c <__swsetup_r>
 800aefc:	b170      	cbz	r0, 800af1c <_vfiprintf_r+0x5c>
 800aefe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af00:	07dc      	lsls	r4, r3, #31
 800af02:	d504      	bpl.n	800af0e <_vfiprintf_r+0x4e>
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	b01d      	add	sp, #116	@ 0x74
 800af0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0e:	89ab      	ldrh	r3, [r5, #12]
 800af10:	0598      	lsls	r0, r3, #22
 800af12:	d4f7      	bmi.n	800af04 <_vfiprintf_r+0x44>
 800af14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af16:	f7fe f9f9 	bl	800930c <__retarget_lock_release_recursive>
 800af1a:	e7f3      	b.n	800af04 <_vfiprintf_r+0x44>
 800af1c:	2300      	movs	r3, #0
 800af1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af20:	2320      	movs	r3, #32
 800af22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af26:	f8cd 800c 	str.w	r8, [sp, #12]
 800af2a:	2330      	movs	r3, #48	@ 0x30
 800af2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b0dc <_vfiprintf_r+0x21c>
 800af30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af34:	f04f 0901 	mov.w	r9, #1
 800af38:	4623      	mov	r3, r4
 800af3a:	469a      	mov	sl, r3
 800af3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af40:	b10a      	cbz	r2, 800af46 <_vfiprintf_r+0x86>
 800af42:	2a25      	cmp	r2, #37	@ 0x25
 800af44:	d1f9      	bne.n	800af3a <_vfiprintf_r+0x7a>
 800af46:	ebba 0b04 	subs.w	fp, sl, r4
 800af4a:	d00b      	beq.n	800af64 <_vfiprintf_r+0xa4>
 800af4c:	465b      	mov	r3, fp
 800af4e:	4622      	mov	r2, r4
 800af50:	4629      	mov	r1, r5
 800af52:	4630      	mov	r0, r6
 800af54:	f7ff ffa2 	bl	800ae9c <__sfputs_r>
 800af58:	3001      	adds	r0, #1
 800af5a:	f000 80a7 	beq.w	800b0ac <_vfiprintf_r+0x1ec>
 800af5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af60:	445a      	add	r2, fp
 800af62:	9209      	str	r2, [sp, #36]	@ 0x24
 800af64:	f89a 3000 	ldrb.w	r3, [sl]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 809f 	beq.w	800b0ac <_vfiprintf_r+0x1ec>
 800af6e:	2300      	movs	r3, #0
 800af70:	f04f 32ff 	mov.w	r2, #4294967295
 800af74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af78:	f10a 0a01 	add.w	sl, sl, #1
 800af7c:	9304      	str	r3, [sp, #16]
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af84:	931a      	str	r3, [sp, #104]	@ 0x68
 800af86:	4654      	mov	r4, sl
 800af88:	2205      	movs	r2, #5
 800af8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8e:	4853      	ldr	r0, [pc, #332]	@ (800b0dc <_vfiprintf_r+0x21c>)
 800af90:	f7f5 f926 	bl	80001e0 <memchr>
 800af94:	9a04      	ldr	r2, [sp, #16]
 800af96:	b9d8      	cbnz	r0, 800afd0 <_vfiprintf_r+0x110>
 800af98:	06d1      	lsls	r1, r2, #27
 800af9a:	bf44      	itt	mi
 800af9c:	2320      	movmi	r3, #32
 800af9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afa2:	0713      	lsls	r3, r2, #28
 800afa4:	bf44      	itt	mi
 800afa6:	232b      	movmi	r3, #43	@ 0x2b
 800afa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afac:	f89a 3000 	ldrb.w	r3, [sl]
 800afb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800afb2:	d015      	beq.n	800afe0 <_vfiprintf_r+0x120>
 800afb4:	9a07      	ldr	r2, [sp, #28]
 800afb6:	4654      	mov	r4, sl
 800afb8:	2000      	movs	r0, #0
 800afba:	f04f 0c0a 	mov.w	ip, #10
 800afbe:	4621      	mov	r1, r4
 800afc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afc4:	3b30      	subs	r3, #48	@ 0x30
 800afc6:	2b09      	cmp	r3, #9
 800afc8:	d94b      	bls.n	800b062 <_vfiprintf_r+0x1a2>
 800afca:	b1b0      	cbz	r0, 800affa <_vfiprintf_r+0x13a>
 800afcc:	9207      	str	r2, [sp, #28]
 800afce:	e014      	b.n	800affa <_vfiprintf_r+0x13a>
 800afd0:	eba0 0308 	sub.w	r3, r0, r8
 800afd4:	fa09 f303 	lsl.w	r3, r9, r3
 800afd8:	4313      	orrs	r3, r2
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	46a2      	mov	sl, r4
 800afde:	e7d2      	b.n	800af86 <_vfiprintf_r+0xc6>
 800afe0:	9b03      	ldr	r3, [sp, #12]
 800afe2:	1d19      	adds	r1, r3, #4
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	9103      	str	r1, [sp, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bfbb      	ittet	lt
 800afec:	425b      	neglt	r3, r3
 800afee:	f042 0202 	orrlt.w	r2, r2, #2
 800aff2:	9307      	strge	r3, [sp, #28]
 800aff4:	9307      	strlt	r3, [sp, #28]
 800aff6:	bfb8      	it	lt
 800aff8:	9204      	strlt	r2, [sp, #16]
 800affa:	7823      	ldrb	r3, [r4, #0]
 800affc:	2b2e      	cmp	r3, #46	@ 0x2e
 800affe:	d10a      	bne.n	800b016 <_vfiprintf_r+0x156>
 800b000:	7863      	ldrb	r3, [r4, #1]
 800b002:	2b2a      	cmp	r3, #42	@ 0x2a
 800b004:	d132      	bne.n	800b06c <_vfiprintf_r+0x1ac>
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	1d1a      	adds	r2, r3, #4
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	9203      	str	r2, [sp, #12]
 800b00e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b012:	3402      	adds	r4, #2
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0ec <_vfiprintf_r+0x22c>
 800b01a:	7821      	ldrb	r1, [r4, #0]
 800b01c:	2203      	movs	r2, #3
 800b01e:	4650      	mov	r0, sl
 800b020:	f7f5 f8de 	bl	80001e0 <memchr>
 800b024:	b138      	cbz	r0, 800b036 <_vfiprintf_r+0x176>
 800b026:	9b04      	ldr	r3, [sp, #16]
 800b028:	eba0 000a 	sub.w	r0, r0, sl
 800b02c:	2240      	movs	r2, #64	@ 0x40
 800b02e:	4082      	lsls	r2, r0
 800b030:	4313      	orrs	r3, r2
 800b032:	3401      	adds	r4, #1
 800b034:	9304      	str	r3, [sp, #16]
 800b036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03a:	4829      	ldr	r0, [pc, #164]	@ (800b0e0 <_vfiprintf_r+0x220>)
 800b03c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b040:	2206      	movs	r2, #6
 800b042:	f7f5 f8cd 	bl	80001e0 <memchr>
 800b046:	2800      	cmp	r0, #0
 800b048:	d03f      	beq.n	800b0ca <_vfiprintf_r+0x20a>
 800b04a:	4b26      	ldr	r3, [pc, #152]	@ (800b0e4 <_vfiprintf_r+0x224>)
 800b04c:	bb1b      	cbnz	r3, 800b096 <_vfiprintf_r+0x1d6>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	3307      	adds	r3, #7
 800b052:	f023 0307 	bic.w	r3, r3, #7
 800b056:	3308      	adds	r3, #8
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b05c:	443b      	add	r3, r7
 800b05e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b060:	e76a      	b.n	800af38 <_vfiprintf_r+0x78>
 800b062:	fb0c 3202 	mla	r2, ip, r2, r3
 800b066:	460c      	mov	r4, r1
 800b068:	2001      	movs	r0, #1
 800b06a:	e7a8      	b.n	800afbe <_vfiprintf_r+0xfe>
 800b06c:	2300      	movs	r3, #0
 800b06e:	3401      	adds	r4, #1
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	4619      	mov	r1, r3
 800b074:	f04f 0c0a 	mov.w	ip, #10
 800b078:	4620      	mov	r0, r4
 800b07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07e:	3a30      	subs	r2, #48	@ 0x30
 800b080:	2a09      	cmp	r2, #9
 800b082:	d903      	bls.n	800b08c <_vfiprintf_r+0x1cc>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0c6      	beq.n	800b016 <_vfiprintf_r+0x156>
 800b088:	9105      	str	r1, [sp, #20]
 800b08a:	e7c4      	b.n	800b016 <_vfiprintf_r+0x156>
 800b08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b090:	4604      	mov	r4, r0
 800b092:	2301      	movs	r3, #1
 800b094:	e7f0      	b.n	800b078 <_vfiprintf_r+0x1b8>
 800b096:	ab03      	add	r3, sp, #12
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	462a      	mov	r2, r5
 800b09c:	4b12      	ldr	r3, [pc, #72]	@ (800b0e8 <_vfiprintf_r+0x228>)
 800b09e:	a904      	add	r1, sp, #16
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	f7fd fbbd 	bl	8008820 <_printf_float>
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	1c78      	adds	r0, r7, #1
 800b0aa:	d1d6      	bne.n	800b05a <_vfiprintf_r+0x19a>
 800b0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ae:	07d9      	lsls	r1, r3, #31
 800b0b0:	d405      	bmi.n	800b0be <_vfiprintf_r+0x1fe>
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	059a      	lsls	r2, r3, #22
 800b0b6:	d402      	bmi.n	800b0be <_vfiprintf_r+0x1fe>
 800b0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ba:	f7fe f927 	bl	800930c <__retarget_lock_release_recursive>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	065b      	lsls	r3, r3, #25
 800b0c2:	f53f af1f 	bmi.w	800af04 <_vfiprintf_r+0x44>
 800b0c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0c8:	e71e      	b.n	800af08 <_vfiprintf_r+0x48>
 800b0ca:	ab03      	add	r3, sp, #12
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4b05      	ldr	r3, [pc, #20]	@ (800b0e8 <_vfiprintf_r+0x228>)
 800b0d2:	a904      	add	r1, sp, #16
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7fd fe3b 	bl	8008d50 <_printf_i>
 800b0da:	e7e4      	b.n	800b0a6 <_vfiprintf_r+0x1e6>
 800b0dc:	0800ca66 	.word	0x0800ca66
 800b0e0:	0800ca70 	.word	0x0800ca70
 800b0e4:	08008821 	.word	0x08008821
 800b0e8:	0800ae9d 	.word	0x0800ae9d
 800b0ec:	0800ca6c 	.word	0x0800ca6c

0800b0f0 <__swbuf_r>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	460e      	mov	r6, r1
 800b0f4:	4614      	mov	r4, r2
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	b118      	cbz	r0, 800b102 <__swbuf_r+0x12>
 800b0fa:	6a03      	ldr	r3, [r0, #32]
 800b0fc:	b90b      	cbnz	r3, 800b102 <__swbuf_r+0x12>
 800b0fe:	f7fd ffd1 	bl	80090a4 <__sinit>
 800b102:	69a3      	ldr	r3, [r4, #24]
 800b104:	60a3      	str	r3, [r4, #8]
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	071a      	lsls	r2, r3, #28
 800b10a:	d501      	bpl.n	800b110 <__swbuf_r+0x20>
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	b943      	cbnz	r3, 800b122 <__swbuf_r+0x32>
 800b110:	4621      	mov	r1, r4
 800b112:	4628      	mov	r0, r5
 800b114:	f000 f82a 	bl	800b16c <__swsetup_r>
 800b118:	b118      	cbz	r0, 800b122 <__swbuf_r+0x32>
 800b11a:	f04f 37ff 	mov.w	r7, #4294967295
 800b11e:	4638      	mov	r0, r7
 800b120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b122:	6823      	ldr	r3, [r4, #0]
 800b124:	6922      	ldr	r2, [r4, #16]
 800b126:	1a98      	subs	r0, r3, r2
 800b128:	6963      	ldr	r3, [r4, #20]
 800b12a:	b2f6      	uxtb	r6, r6
 800b12c:	4283      	cmp	r3, r0
 800b12e:	4637      	mov	r7, r6
 800b130:	dc05      	bgt.n	800b13e <__swbuf_r+0x4e>
 800b132:	4621      	mov	r1, r4
 800b134:	4628      	mov	r0, r5
 800b136:	f7ff fd99 	bl	800ac6c <_fflush_r>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d1ed      	bne.n	800b11a <__swbuf_r+0x2a>
 800b13e:	68a3      	ldr	r3, [r4, #8]
 800b140:	3b01      	subs	r3, #1
 800b142:	60a3      	str	r3, [r4, #8]
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	6022      	str	r2, [r4, #0]
 800b14a:	701e      	strb	r6, [r3, #0]
 800b14c:	6962      	ldr	r2, [r4, #20]
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	429a      	cmp	r2, r3
 800b152:	d004      	beq.n	800b15e <__swbuf_r+0x6e>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	07db      	lsls	r3, r3, #31
 800b158:	d5e1      	bpl.n	800b11e <__swbuf_r+0x2e>
 800b15a:	2e0a      	cmp	r6, #10
 800b15c:	d1df      	bne.n	800b11e <__swbuf_r+0x2e>
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f7ff fd83 	bl	800ac6c <_fflush_r>
 800b166:	2800      	cmp	r0, #0
 800b168:	d0d9      	beq.n	800b11e <__swbuf_r+0x2e>
 800b16a:	e7d6      	b.n	800b11a <__swbuf_r+0x2a>

0800b16c <__swsetup_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4b29      	ldr	r3, [pc, #164]	@ (800b214 <__swsetup_r+0xa8>)
 800b170:	4605      	mov	r5, r0
 800b172:	6818      	ldr	r0, [r3, #0]
 800b174:	460c      	mov	r4, r1
 800b176:	b118      	cbz	r0, 800b180 <__swsetup_r+0x14>
 800b178:	6a03      	ldr	r3, [r0, #32]
 800b17a:	b90b      	cbnz	r3, 800b180 <__swsetup_r+0x14>
 800b17c:	f7fd ff92 	bl	80090a4 <__sinit>
 800b180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b184:	0719      	lsls	r1, r3, #28
 800b186:	d422      	bmi.n	800b1ce <__swsetup_r+0x62>
 800b188:	06da      	lsls	r2, r3, #27
 800b18a:	d407      	bmi.n	800b19c <__swsetup_r+0x30>
 800b18c:	2209      	movs	r2, #9
 800b18e:	602a      	str	r2, [r5, #0]
 800b190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	f04f 30ff 	mov.w	r0, #4294967295
 800b19a:	e033      	b.n	800b204 <__swsetup_r+0x98>
 800b19c:	0758      	lsls	r0, r3, #29
 800b19e:	d512      	bpl.n	800b1c6 <__swsetup_r+0x5a>
 800b1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1a2:	b141      	cbz	r1, 800b1b6 <__swsetup_r+0x4a>
 800b1a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	d002      	beq.n	800b1b2 <__swsetup_r+0x46>
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f7fe ff07 	bl	8009fc0 <_free_r>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6063      	str	r3, [r4, #4]
 800b1c2:	6923      	ldr	r3, [r4, #16]
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f043 0308 	orr.w	r3, r3, #8
 800b1cc:	81a3      	strh	r3, [r4, #12]
 800b1ce:	6923      	ldr	r3, [r4, #16]
 800b1d0:	b94b      	cbnz	r3, 800b1e6 <__swsetup_r+0x7a>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1dc:	d003      	beq.n	800b1e6 <__swsetup_r+0x7a>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f000 f883 	bl	800b2ec <__smakebuf_r>
 800b1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ea:	f013 0201 	ands.w	r2, r3, #1
 800b1ee:	d00a      	beq.n	800b206 <__swsetup_r+0x9a>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	60a2      	str	r2, [r4, #8]
 800b1f4:	6962      	ldr	r2, [r4, #20]
 800b1f6:	4252      	negs	r2, r2
 800b1f8:	61a2      	str	r2, [r4, #24]
 800b1fa:	6922      	ldr	r2, [r4, #16]
 800b1fc:	b942      	cbnz	r2, 800b210 <__swsetup_r+0xa4>
 800b1fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b202:	d1c5      	bne.n	800b190 <__swsetup_r+0x24>
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	0799      	lsls	r1, r3, #30
 800b208:	bf58      	it	pl
 800b20a:	6962      	ldrpl	r2, [r4, #20]
 800b20c:	60a2      	str	r2, [r4, #8]
 800b20e:	e7f4      	b.n	800b1fa <__swsetup_r+0x8e>
 800b210:	2000      	movs	r0, #0
 800b212:	e7f7      	b.n	800b204 <__swsetup_r+0x98>
 800b214:	20000018 	.word	0x20000018

0800b218 <_raise_r>:
 800b218:	291f      	cmp	r1, #31
 800b21a:	b538      	push	{r3, r4, r5, lr}
 800b21c:	4605      	mov	r5, r0
 800b21e:	460c      	mov	r4, r1
 800b220:	d904      	bls.n	800b22c <_raise_r+0x14>
 800b222:	2316      	movs	r3, #22
 800b224:	6003      	str	r3, [r0, #0]
 800b226:	f04f 30ff 	mov.w	r0, #4294967295
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b22e:	b112      	cbz	r2, 800b236 <_raise_r+0x1e>
 800b230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b234:	b94b      	cbnz	r3, 800b24a <_raise_r+0x32>
 800b236:	4628      	mov	r0, r5
 800b238:	f000 f830 	bl	800b29c <_getpid_r>
 800b23c:	4622      	mov	r2, r4
 800b23e:	4601      	mov	r1, r0
 800b240:	4628      	mov	r0, r5
 800b242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b246:	f000 b817 	b.w	800b278 <_kill_r>
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d00a      	beq.n	800b264 <_raise_r+0x4c>
 800b24e:	1c59      	adds	r1, r3, #1
 800b250:	d103      	bne.n	800b25a <_raise_r+0x42>
 800b252:	2316      	movs	r3, #22
 800b254:	6003      	str	r3, [r0, #0]
 800b256:	2001      	movs	r0, #1
 800b258:	e7e7      	b.n	800b22a <_raise_r+0x12>
 800b25a:	2100      	movs	r1, #0
 800b25c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b260:	4620      	mov	r0, r4
 800b262:	4798      	blx	r3
 800b264:	2000      	movs	r0, #0
 800b266:	e7e0      	b.n	800b22a <_raise_r+0x12>

0800b268 <raise>:
 800b268:	4b02      	ldr	r3, [pc, #8]	@ (800b274 <raise+0xc>)
 800b26a:	4601      	mov	r1, r0
 800b26c:	6818      	ldr	r0, [r3, #0]
 800b26e:	f7ff bfd3 	b.w	800b218 <_raise_r>
 800b272:	bf00      	nop
 800b274:	20000018 	.word	0x20000018

0800b278 <_kill_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	@ (800b298 <_kill_r+0x20>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	4611      	mov	r1, r2
 800b284:	602b      	str	r3, [r5, #0]
 800b286:	f7f8 fd73 	bl	8003d70 <_kill>
 800b28a:	1c43      	adds	r3, r0, #1
 800b28c:	d102      	bne.n	800b294 <_kill_r+0x1c>
 800b28e:	682b      	ldr	r3, [r5, #0]
 800b290:	b103      	cbz	r3, 800b294 <_kill_r+0x1c>
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	bd38      	pop	{r3, r4, r5, pc}
 800b296:	bf00      	nop
 800b298:	20001550 	.word	0x20001550

0800b29c <_getpid_r>:
 800b29c:	f7f8 bd60 	b.w	8003d60 <_getpid>

0800b2a0 <__swhatbuf_r>:
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	b096      	sub	sp, #88	@ 0x58
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	461e      	mov	r6, r3
 800b2b0:	da0d      	bge.n	800b2ce <__swhatbuf_r+0x2e>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2b8:	f04f 0100 	mov.w	r1, #0
 800b2bc:	bf14      	ite	ne
 800b2be:	2340      	movne	r3, #64	@ 0x40
 800b2c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	6031      	str	r1, [r6, #0]
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	b016      	add	sp, #88	@ 0x58
 800b2cc:	bd70      	pop	{r4, r5, r6, pc}
 800b2ce:	466a      	mov	r2, sp
 800b2d0:	f000 f848 	bl	800b364 <_fstat_r>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dbec      	blt.n	800b2b2 <__swhatbuf_r+0x12>
 800b2d8:	9901      	ldr	r1, [sp, #4]
 800b2da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2e2:	4259      	negs	r1, r3
 800b2e4:	4159      	adcs	r1, r3
 800b2e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2ea:	e7eb      	b.n	800b2c4 <__swhatbuf_r+0x24>

0800b2ec <__smakebuf_r>:
 800b2ec:	898b      	ldrh	r3, [r1, #12]
 800b2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2f0:	079d      	lsls	r5, r3, #30
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	d507      	bpl.n	800b308 <__smakebuf_r+0x1c>
 800b2f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	2301      	movs	r3, #1
 800b302:	6163      	str	r3, [r4, #20]
 800b304:	b003      	add	sp, #12
 800b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b308:	ab01      	add	r3, sp, #4
 800b30a:	466a      	mov	r2, sp
 800b30c:	f7ff ffc8 	bl	800b2a0 <__swhatbuf_r>
 800b310:	9f00      	ldr	r7, [sp, #0]
 800b312:	4605      	mov	r5, r0
 800b314:	4639      	mov	r1, r7
 800b316:	4630      	mov	r0, r6
 800b318:	f7fe fec6 	bl	800a0a8 <_malloc_r>
 800b31c:	b948      	cbnz	r0, 800b332 <__smakebuf_r+0x46>
 800b31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b322:	059a      	lsls	r2, r3, #22
 800b324:	d4ee      	bmi.n	800b304 <__smakebuf_r+0x18>
 800b326:	f023 0303 	bic.w	r3, r3, #3
 800b32a:	f043 0302 	orr.w	r3, r3, #2
 800b32e:	81a3      	strh	r3, [r4, #12]
 800b330:	e7e2      	b.n	800b2f8 <__smakebuf_r+0xc>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	6020      	str	r0, [r4, #0]
 800b336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	9b01      	ldr	r3, [sp, #4]
 800b33e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b342:	b15b      	cbz	r3, 800b35c <__smakebuf_r+0x70>
 800b344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 f81d 	bl	800b388 <_isatty_r>
 800b34e:	b128      	cbz	r0, 800b35c <__smakebuf_r+0x70>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	f043 0301 	orr.w	r3, r3, #1
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	431d      	orrs	r5, r3
 800b360:	81a5      	strh	r5, [r4, #12]
 800b362:	e7cf      	b.n	800b304 <__smakebuf_r+0x18>

0800b364 <_fstat_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4d07      	ldr	r5, [pc, #28]	@ (800b384 <_fstat_r+0x20>)
 800b368:	2300      	movs	r3, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	4608      	mov	r0, r1
 800b36e:	4611      	mov	r1, r2
 800b370:	602b      	str	r3, [r5, #0]
 800b372:	f7f8 fd5d 	bl	8003e30 <_fstat>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d102      	bne.n	800b380 <_fstat_r+0x1c>
 800b37a:	682b      	ldr	r3, [r5, #0]
 800b37c:	b103      	cbz	r3, 800b380 <_fstat_r+0x1c>
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	bd38      	pop	{r3, r4, r5, pc}
 800b382:	bf00      	nop
 800b384:	20001550 	.word	0x20001550

0800b388 <_isatty_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d06      	ldr	r5, [pc, #24]	@ (800b3a4 <_isatty_r+0x1c>)
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f8 fd5c 	bl	8003e50 <_isatty>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_isatty_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_isatty_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20001550 	.word	0x20001550

0800b3a8 <_init>:
 800b3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3aa:	bf00      	nop
 800b3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ae:	bc08      	pop	{r3}
 800b3b0:	469e      	mov	lr, r3
 800b3b2:	4770      	bx	lr

0800b3b4 <_fini>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	bf00      	nop
 800b3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ba:	bc08      	pop	{r3}
 800b3bc:	469e      	mov	lr, r3
 800b3be:	4770      	bx	lr
